.TH MPI_Type_indexed 3 "12/21/1995" " " "MPI"
.SH NAME
MPI_Type_indexed \- Creates an indexed datatype

.SH INPUT PARAMETERS
.PD 0
.TP
.B count 
- number of blocks -- also number of entries in indices and blocklens
.PD 1
.PD 0
.TP
.B blocklens 
- number of elements in each block (array of nonnegative integers) 
.PD 1
.PD 0
.TP
.B indices 
- displacement of each block in multiples of old_type (array of 
integers)
.PD 1
.PD 0
.TP
.B old_type 
- old datatype (handle) 
.PD 1

.SH OUTPUT PARAMETER
.PD 0
.TP
.B newtype 
- new datatype (handle) 
.PD 1

.SH NOTES FOR FORTRAN
All MPI routines in Fortran (except for 
.I MPI_WTIME
and 
.I MPI_WTICK
) have
an additional argument 
.I ierr
at the end of the argument list.  
.I ierr
is an integer and has the same meaning as the return value of the routine
in C.  In Fortran, MPI routines are subroutines, and are invoked with the
.I call
statement.

All MPI objects (e.g., 
.I MPI_Datatype
, 
.I MPI_Comm
) are of type 
.I INTEGER
in Fortran.

The indices are displacements, and are based on a zero origin.  A common error
is to do something like to following
.nf
    integer a(100)
    integer blens(10), indices(10)
    do i=1,10
         blens(i)   = 1
10       indices(i) = 1 + (i-1)*10
    call MPI_TYPE_INDEXED(10,blens,indices,MPI_INTEGER,newtype,ierr)
    call MPI_TYPE_COMMIT(newtype,ierr)
    call MPI_SEND(a,1,newtype,...)
.fi

expecting this to send 
.I a(1),a(11),...
because the indices have values
.I 1,11,...
.   Because these are 
.B displacements
from the beginning of 
.I a
,
it actually sends 
.I a(1+1),a(1+11),...
.

If you wish to consider the displacements as indices into a Fortran array,
consider declaring the Fortran array with a zero origin
.nf
    integer a(0:99)
.fi


.SH SYNOPSIS
.nf
#include "mpi.h"
int MPI_Type_indexed( count, blocklens, indices, old_type, newtype )
int           count;
int        blocklens[];
int        indices[];
MPI_Datatype  old_type;
MPI_Datatype *newtype;

.fi

.SH LOCATION
 type_ind.c
