.TH MPI_Comm_split 3 "6/20/1995" " " "MPI"
.SH NAME
MPI_Comm_split \- Creates new communicators based on colors and keys

.SH INPUT PARAMETERS
.PD 0
.TP
.B comm 
- communicator (handle) 
.PD 1
.PD 0
.TP
.B color 
- control of subset assignment (nonnegative integer) 
.PD 1
.PD 0
.TP
.B key 
- control of rank assigment (integer) 
.PD 1

.SH OUTPUT PARAMETER
.PD 0
.TP
.B newcomm 
- new communicator (handle) 
.PD 1

.SH NOTES
The 'color' must be non-negative or 'MPI_UNDEFINED'.
.SH ALGORITHM

The current algorithm used has quite a few (read: a lot of) inefficiencies
that can be removed.  Here's what we do for now

.nf
 1) A table is built of colors, and keys (has a next field also).
 2) The tables of all processes are merged using MPI_Allreduce
 3) Two contexts are allocated for all the comms to be created.  These
     same two contexts can be used for all created communicators since
     the communicators will not overlap.
 4) If the local process has a color of MPI_UNDEFINED, it can return
     a NULL comm. 
 5) The table entries that match the local process color are sorted 
     by key/rank. 
 6) A group is created from the sorted list and a communicator is created
     with this group and the previously allocated contexts.
.fi

.SH SYNOPSIS
.nf
#include "mpi.h"
int MPI_Comm_split ( comm, color, key, comm_out )
MPI_Comm  comm;
int       color, key;
MPI_Comm *comm_out;

.fi

.SH LOCATION
 comm_split.c
