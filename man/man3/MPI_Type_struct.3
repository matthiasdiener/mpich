.TH MPI_Type_struct 3 "6/1/1995" " " "MPI"
.SH NAME
MPI_Type_struct \- Creates a struct datatype

.SH INPUT PARAMETERS
.PD 0
.TP
.B count 
- number of blocks (integer) -- also number of 
entries in arrays array_of_types ,
array_of_displacements  and array_of_blocklengths  
.PD 1
.PD 0
.TP
.B blocklens 
- number of elements in each block (array)
.PD 1
.PD 0
.TP
.B indices 
- byte displacement of each block (array)
.PD 1
.PD 0
.TP
.B old_types 
- type of elements in each block (array 
of handles to datatype objects) 
.PD 1

.SH OUTPUT PARAMETER
.PD 0
.TP
.B newtype 
- new datatype (handle) 
.PD 1

.SH NOTES
If an upperbound is set explicitly by using the MPI datatype 'MPI_UB', the
corresponding index must be positive.

The MPI standard originally made vague statements about padding and alignment;
this was intended to allow the simple definition of structures that could
be sent with a count greater than one.  For example,
.nf
    struct { int a; char b; } foo;
.fi

may have 'sizeof(foo) > sizeof(int) + sizeof(char)'; for example,
'sizeof(foo) == 2*sizeof(int)'.  The initial version of the MPI standard
defined the extent of a datatype as including an `epsilon` that would have
allowed an implementation to make the extent an MPI datatype
for this structure equal to '2*sizeof(int)'.  However, since different systems
might define different paddings, a clarification to the standard made epsilon
zero.  Thus, if you define a structure datatype and wish to send or receive
multiple items, you should explicitly include an 'MPI_UB' entry as the
last member of the structure.  For example, the following code can be used
for the structure foo
.nf
    blen[0] = 1; indices[0] = 0; oldtypes[0] = MPI_INT;
    blen[1] = 1; indices[1] = &foo.b - &foo; oldtypes[1] = MPI_CHAR;
    blen[2] = 1; indices[2] = sizeof(foo); oldtypes[2] = MPI_UB;
    MPI_Type_struct( 3, blen, indices, oldtypes, &newtype );
.fi

.SH SYNOPSIS
.nf
#include "mpi.h"
int MPI_Type_struct( count, blocklens, indices, old_types, newtype )
int           count;
int        blocklens[];
MPI_Aint      indices[];      
MPI_Datatype  old_types[];
MPI_Datatype *newtype;

.fi

.SH LOCATION
 type_struct.c
