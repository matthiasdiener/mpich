.TH MPI_Gather 3 "12/21/1995" " " "MPI"
.SH NAME
MPI_Gather \- Gathers together values from a group of processes

.SH INPUT PARAMETERS
.PD 0
.TP
.B sendbuf 
- starting address of send buffer (choice) 
.PD 1
.PD 0
.TP
.B sendcount 
- number of elements in send buffer (integer) 
.PD 1
.PD 0
.TP
.B sendtype 
- data type of send buffer elements (handle) 
.PD 1
.PD 0
.TP
.B recvcount 
- number of elements for any single receive (integer, 
significant only at root) 
.PD 1
.PD 0
.TP
.B recvtype 
- data type of recv buffer elements 
(significant only at root) (handle) 
.PD 1
.PD 0
.TP
.B root 
- rank of receiving process (integer) 
.PD 1
.PD 0
.TP
.B comm 
- communicator (handle) 
.PD 1

.SH OUTPUT PARAMETER
.PD 0
.TP
.B recvbuf 
- address of receive buffer (choice, significant only at 
.I root
) 
.PD 1

.SH NOTES FOR FORTRAN
All MPI routines in Fortran (except for 
.I MPI_WTIME
and 
.I MPI_WTICK
) have
an additional argument 
.I ierr
at the end of the argument list.  
.I ierr
is an integer and has the same meaning as the return value of the routine
in C.  In Fortran, MPI routines are subroutines, and are invoked with the
.I call
statement.

All MPI objects (e.g., 
.I MPI_Datatype
, 
.I MPI_Comm
) are of type 
.I INTEGER
in Fortran.
.SH SYNOPSIS
.nf
#include "mpi.h"
int MPI_Gather ( sendbuf, sendcnt, sendtype, recvbuf, recvcount, recvtype, 
   root, comm )
void             *sendbuf;
int               sendcnt;
MPI_Datatype      sendtype;
void             *recvbuf;
int               recvcount;
MPI_Datatype      recvtype;
int               root;
MPI_Comm          comm;

.fi

.SH LOCATION
 gather.c
