.TH MPID_Init 5 "10/10/1994" " " "ADI"
.SH NAME
MPID_Init \- Initializes the ADI

.SH INPUT PARAMETERS
.PD 0
.TP
.B argc 
- Pointer to an integer containing the number of arguments
.PD 1
.PD 0
.TP
.B argv 
- Pointer to the argument vector
.PD 1

.SH RETURNS
Pointer that may be passed back to these routines (context).

.SH SYNOPSIS
.nf
void *MPID_Init( int *argc, char ***argv )
.fi

.SH NOTES
If called from a C program with main(argc,argv), the correct calling
sequence is MPID_Init(&argc,&argv).

This routine may (or may not) also initialize the parallel processes
themselves.  That is, when this routine is called, it may create the
requested number of parallel processes, or it may simply make use of
an already existing set.  What the case is, and how the number of
processes is specified, is specific to any particular implementation
and environment.

As an example, the Chameleon version of the ADI has these properties
.PD 0
.TP
.B Transport_ 
Layer  -            MPID_Init starts processes
.PD 1
.br
.PD 0
.TP
.B p4,pvm,EUIH 
-                 yes
.PD 1
.PD 0
.TP
.B Paragon 
-                       depends on Paragon 
.PD 1
.PD 0
.TP
.B Intel_ 
i860,Delta,CM5,POE -   no
.PD 1
.br

The pointer returned by this routine may be null; it is provided to allow
for multiple, simultaneous ADI's.  For example, if the pointer returned
contains a structure with pointers to the ADI routines, and the macros
for the operations choose the actual function from this structure, then
a single user-application can easily switch between ADIs, depending,
for example, on the MPI Communicator in use.
