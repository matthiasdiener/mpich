.TH Collective 5 "8/23/1995" " " "ADI"
.SH NAME
Collective \- Support in the ADI for collective operations

.SH DISCUSSION
On some systems, there is special hardware for some collective operations.
On others, there are special techniques that can be applied to
significantly speed up some collective operations.

It is not necessary to support ANY collective operations within the ADI.
However, the ADI does provide a way for the ADI to perform some
operations.  In addition, these operations may be provided for just
MPI_COMM_WORLD or for any communicator.

The ADI provides for the following classes of collective operations
.PD 0
.TP
.B MPID_Barrier 
- Barrier
.PD 1
.PD 0
.TP
.B MPID_Reduce_op_type 
- Reduction (op == sum, prod, etc, type = double, 
int, etc).  Define MPID_Reduce if ANY are defined
.PD 1
.PD 0
.TP
.B MPID_Scan_op_type 
- Scan reduction.  Define 
.I MPID_Scan
 if 
.B any
 are 
defined.
.PD 1
.PD 0
.TP
.B MPID_Bcast 
- Broadcast (1 to all)
.PD 1
.PD 0
.TP
.B MPID_AlltoAll 
- All to all
.PD 1

These routines all handle a 
.B single element
, since this is an
important and common case.

Since these may require the creation of special data structures, the
ADI routine 
.I MPID_Comm_init
 must be called before these may be used.

.I MPID_Comm_free
 must be called when a communicator is destroyed to
ensure that any resources are returned.

All of these "routines" are actually macros, allowing the API code
to contain code like

.nf
   #ifdef MPID_Barrier
   if (comm->AdiBarrier) MPID_Barrier( comm->AdiCtx, comm );
   else 
   #endif
   {
   ... code using pt-2-pt
   }
.fi


Not yet decided: are the reduction and scan reduced to a single root
or to all (I''d prefer to all).
