.TH MPE_Errors_call_debugger 4 "7/1/1998" " " "MPE"
.SH NAME
MPE_Errors_call_debugger \-  On an error, print a message and (attempt) to start the specified debugger on the program 
.SH SYNOPSIS
.nf
#include <stdio.h>
#include "mpe.h"
void MPE_Errors_call_debugger( pgm, dbg, args )
char *pgm, *dbg, **args;
.fi
.SH INPUT PARAMETERS
.PD 0
.TP
.B pgm 
- Name of the program.
.PD 1
.PD 0
.TP
.B dbg 
- Name of the debugger.  If null, use a default (usually dbx)
.PD 1
.PD 0
.TP
.B args 
- arguments to use in generating the debugger.
This allows things like "
.I xterm -e dbx pgm pid
", or 
"
.I xdbx -geometry +%d+%d pgm pid
".  The list should be null terminated.
(The 
.I %d %d
format is not yet supported).
.PD 1

.SH NOTES
You may need to ignore some signals, depending on the signals that
the MPICH and underlying communications code is using.  You can
do this in dbx by adding "ignore signal-name" to your .dbxinit file.
For example, to ignore 
.I SIGUSR1
, use "
.I ignore USR1
".

Currently, there is no Fortran interface for this routine.
.SH LOCATION
dbxerr.c
