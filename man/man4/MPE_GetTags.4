.TH MPE_GetTags 4 "5/28/1996" " " "MPE"
.SH NAME
MPE_GetTags \-  Returns tags that can be used in communication with a  communicator 
.SH SYNOPSIS
.nf
#include <stdio.h>
#include "mpe.h"
int MPE_GetTags( comm_in, ntags, comm_out, first_tag )
MPI_Comm comm_in, *comm_out;
int      ntags, *first_tag;
.fi
.SH INPUT PARAMETERS
.PD 0
.TP
.B comm_in 
- Input communicator
.PD 1
.PD 0
.TP
.B ntags   
- Number of tags
.PD 1

.SH OUTPUT PARAMETERS
.PD 0
.TP
.B comm_out 
- Output communicator.  May be 'comm_in'.
.PD 1
.PD 0
.TP
.B first_tag 
- First tag available
.PD 1

.SH RETURNS
MPI_SUCCESS on success, MPI error class on failure.

.SH NOTES
This routine returns the requested number of tags, with the tags being
'first_tag', 'first_tag+1', ..., 'first_tag+ntags-1'.

These tags are guarenteed to be unique within 'comm_out'.

.SH SEE ALSO
MPE_ReturnTags
.br
@*/
int MPE_GetTags( comm_in, ntags, comm_out, first_tag )
MPI_Comm comm_in, *comm_out;
int      ntags, *first_tag;
{
int mpe_errno = MPI_SUCCESS;
int *tagvalp, *maxval, flag;

if (MPE_Tag_keyval == MPI_KEYVAL_INVALID) {
MPI_Keyval_create( MPI_NULL_COPY_FN, MPE_DelTag,
&MPE_Tag_keyval, (void *)0 );
}

if ((mpe_errno = MPI_Attr_get( comm_in, MPE_Tag_keyval, &tagvalp, &flag )))
return mpe_errno;

if (!flag) {
/* This communicator is not yet known to this system, so we
dup it and setup the first value */
MPI_Comm_dup( comm_in, comm_out );
comm_in = *comm_out;
MPI_Attr_get( MPI_COMM_WORLD, MPI_TAG_UB, &maxval, &flag );
tagvalp = (int *)malloc( 2 * sizeof(int) );
if (!tagvalp) return MPI_ERR_OTHER;
*tagvalp   = *maxval;
*first_tag = *tagvalp - ntags;
*tagvalp   = *first_tag;
MPI_Attr_put( comm_in, MPE_Tag_keyval, tagvalp );
return MPI_SUCCESS;
}
*comm_out = comm_in;

if (*tagvalp < ntags) {
/* Error, out of tags.  Another solution would be to
do an MPI_Comm_dup. */
return MPI_ERR_INTERN;
}
*first_tag = *tagvalp - ntags;
*tagvalp   = *first_tag;

return MPI_SUCCESS;
}

/*
This is a simple implementation that will lose track of tags that are
not returned in a stack fashion.
*/

/*@
MPE_ReturnTags - Returns tags allocated with MPE_GetTags.

.SH INPUT PARAMETERS
.PD 0
.TP
.B comm 
- Communicator to return tags to
.PD 1
.PD 0
.TP
.B first_tag 
- First of the tags to return
.PD 1
.PD 0
.TP
.B ntags 
- Number of tags to return.
.PD 1

.SH SEE ALSO
MPE_GetTags
.br
@*/
int MPE_ReturnTags( comm, first_tag, ntags )
MPI_Comm comm;
int      first_tag, ntags;
{
int *tagvalp, flag, mpe_errno;

if ((mpe_errno = MPI_Attr_get( comm, MPE_Tag_keyval, &tagvalp, &flag )))
return mpe_errno;

if (!flag) {
/* Error, attribute does not exist in this communicator */
return MPI_ERR_OTHER;
}
if (*tagvalp == first_tag) {
*tagvalp = first_tag + ntags;
}

return MPI_SUCCESS;
}

/*@
MPE_TagsEnd - Returns the private keyval.

.SH NOTES
This routine is provided to aid in cleaning up all of the allocated
storage in and MPI program.  Normally, this routine does `not` need
to be called.  If it is, it should be called immediately before
'MPI_Finalize'.
.SH LOCATION
privtags.c
