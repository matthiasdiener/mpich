dnl
dnl Caching is usually WRONG for systems with cross-mounted file systems
dnl (the cache file may correspond to a different system).  Since configure
dnl is not on a performance-critical path, go for robustness over speed.
dnl
define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl
dnl
dnl
AC_INIT()
#
AC_ARG_ENABLE(strict,
[--enable-strict  - Turn on strict compilation testing when using gcc],
COPTIONS="${COPTIONS} -Wall -O -Wstrict-prototypes -Wmissing-prototypes -DGCC_WALL")
#
echo "Configuring SLOG with $ac_configure_args"
#
AC_CONFIG_HEADER( slog_config.h )
AC_HEADER_STDC
AC_CHECK_HEADERS( unistd.h stdlib.h string.h ctype.h stdarg.h )
#
MAKE=${MAKE:-"make"}
SLOGNAME=slog
CFLAGS="-DHAVE_SLOGCONF_H $CFLAGS"
#
AC_DEFINE( CHECKRECDEFS )
AC_DEFINE( CHECKPROFILE )
AC_DEFINE( CHECKTIMEORDER )
AC_DEFINE( COMPRESSION )
# AC_DEFINE( NOINSTRUCTION )
#
# Find the home directory if not specified
if test "X$srcdir" != "X." -a -s $srcdir/Makefile.in ; then 
    SLOG_TRIAL=$srcdir
else
    PAC_GETWD(SLOG_TRIAL,src/Makefile.in)
fi
SLOG_HOME=$SLOG_TRIAL
 
  
CC=${CC:-cc}

AC_ARG_WITH( cc, [--with-cc=SLOG_CC                  - pass the preferred CC compiler, e.g. --with-cc=xlc.  This will overide the environmental variable CC.], SLOG_CC="$withval" )
if test -n "$SLOG_CC" ; then
    CC="$SLOG_CC"
fi

#  Check if it is mpcc, then use xlc instead; this is for AIX
if test -n "` echo $CC | grep mpcc `" -o -n "` echo $CC | grep mpCC `" ; then
    CC="xlc"
fi

AC_ARG_WITH( cflags, [--with-cflags=SLOG_CFLAGS          - pass extra CFLAGS to the CC compiler like optimization flags or special machine dependent flags, e.g. -64 for IRIX64 platform], SLOG_CFLAGS="$withval" ) 
if test -n "$SLOG_CFLAGS" ; then 
    CFLAGS="$CFLAGS $SLOG_CFLAGS"
fi
 
AC_ARG_ENABLE( g, [--enable-g                         - Turn on/off the debugging and diagnostic code, default=disabled], , enable_g=no )
if test "$enable_g" = "yes" ; then
    AC_DEFINE( DEBUG )
    if test -z "`echo $CFLAGS | grep "\-g"`"; then
        CFLAGS="-g $CFLAGS" 
    fi
fi

# echo "prefix = $prefix"
# echo "exec_prefix = $exec_prefix"
# echo "includedir = $includedir"
# echo "libdir = $libdir"
# echo "bindir = $bindir"
# echo "mandir = $mandir"
# echo "htmldir = $htmldir"

#
# Create the "autoconf" style directory names...
#
# top_srcdir is the top level source code directory (slog home)
if test -z "$top_srcdir" -o "$top_srcdir" = "." ; then 
    top_srcdir=$SLOG_HOME 
fi
AC_SUBST(top_srcdir)

if test -z "$htmldir" ; then
    htmldir=$mandir/../html
fi
AC_SUBST(htmldir)

#
# libbuild_dir is used to build the libraries in before they are installed.
# binbuild_dir is for the scripts/programs
# includebuild_dir is for all user header files
# manbuild_dir is for all SLOG-API manpages 
# htmlbuild_dir is for all SLOG-API html pages
#
rootbuild_dir=`pwd`
for dir in lib bin include ; do
    dirname=${dir}build_dir
    eval dirvalue=\$"$dirname"
    eval $dirname=$rootbuild_dir/$dir
done
for dir in man html ; do
    dirname=${dir}build_dir
    eval dirvalue=\$"$dirname"
    eval $dirname=$rootbuild_dir/doc/$dir
done

AC_ARG_ENABLE( build_include, [--enable-build_include             - Turn on/off the building of include files], , enable_build_include=yes )
if test "$enable_build_include" = "no" ; then
    includebuild_dir=
fi
AC_ARG_ENABLE( build_man, [--enable-build_man                 - Turn on/off the building of man files], , enable_build_man=yes )
if test "$enable_build_man" = "no" ; then
    manbuild_dir=
fi
AC_ARG_ENABLE( build_html, [--enable-build_html                - Turn on/off the building of html files], , enable_build_html=yes )
if test "$enable_build_html" = "no" ; then
    htmlbuild_dir=
fi

for dir in lib bin include man html ; do
    dirname=${dir}build_dir
    eval dirvalue=\$"$dirname"
    if test -n "$dirvalue" ; then 
        if test ! -d $dirvalue ; then
            if mkdir -p $dirvalue ; then
                :
            else
                AC_MSG_ERROR( [Could not create directory $dirvalue] )
            fi
        fi
    fi 
done

AC_SUBST(includebuild_dir)
AC_SUBST(libbuild_dir)
AC_SUBST(binbuild_dir)
AC_SUBST(manbuild_dir)
AC_SUBST(htmlbuild_dir)

#
# Fixup for make
PAC_MAKE_IS_GNUMAKE
PAC_MAKE_IS_BSD44
PAC_MAKE_IS_OSF
PAC_MAKE_VPATH
AC_SUBST(MAKE)
#
if test ! -s include/slog.h -a -z "$VPATH" ; then
    AC_MSG_ERROR([No virtual MAKE path command found.
	You may need to set your make command
	The GNU make (sometimes available as gnumake) can be used.])
fi

#
AC_PROG_CC
AC_C_CONST
 

# Check if size of char, short, int and long long are as expected
PAC_GET_TYPE_SIZE( char, cc_char )
if test "$char_len" != "1" ; then
    AC_MSG_ERROR( [**** Unexpected byte length for char.  Abort!!!] )
fi    
PAC_GET_TYPE_SIZE( short, cc_short )
if test "$short_len" != "2" ; then
    AC_MSG_ERROR( [**** Unexpected byte length for short.  Abort!!!] )
fi    
PAC_GET_TYPE_SIZE( int, cc_int )
if test "$int_len" != "4" ; then
    AC_MSG_ERROR( [**** Unexpected byte length for int.  Abort!!!] )
fi    
PAC_GET_TYPE_SIZE( long long, cc_longlong )
if test "$long_long_len" != "8" ; then
    AC_MSG_ERROR( [**** Unexpected byte length for long long.  Abort!!!] )
fi    

#
AC_PROG_LN_S
AC_PROG_RANLIB
AC_CHECK_PROG(AR, ar, ar, ;)
#
#   -- Check if byteswapping needs to be done.
if test $cross_compiling = "yes" ; then
    AC_MSG_WARN([Cannot test for endianess when cross compiling, assuming big endian])
    AC_DEFINE(WORDS_BIGENDIAN)
else
    AC_C_BIGENDIAN
fi
#
#   -- Check if there is any memory leak checking tool like "electric fence"
if test "$enable_g" = "yes"; then
    AC_CHECK_LIB( efence, malloc, DEBUG_LIBS="-lefence" )
fi
##if test "$enable_g" = "yes"; then
##    AC_MSG_CHECKING( whether electric fence exists )
##    TMP_LIBS=$LIBS
##    LIBS="-lefence"
##    AC_TRY_LINK( [#include <stdlib.h>],
##                 [ int *iptr; iptr = (int*) malloc(sizeof(int)) ],
##                 efence_exist=yes, efence_exist=no )
##    if test "$efence_exist" = "yes" ; then
##        AC_MSG_RESULT(yes)
##        DEBUG_LIBS="-lefence"
##    else
##        AC_MSG_RESULT(no)
##        DEBUG_LIBS=""
##    fi
##    LIBS=$TMP_LIBS
##fi
#
AC_FUNC_ALLOCA
#
#
CFLAGS="$CFLAGS $COPTIONS"
#
AC_SUBST(LN_S)
AC_SUBST(CC)
AC_SUBST(AR)
AC_SUBST(RANLIB)
AC_SUBST(SLOGNAME)
AC_SUBST(SLOG_HOME)
AC_SUBST(CFLAGS)
AC_SUBST(DEBUG_LIBS)
# Make sure that there is no old slog_config.h file
rm -f $srcdir/slog_config.h
AC_OUTPUT(Makefile src/Makefile sbin/install-slog)

for script in "sbin/install-slog"; do
    if test -f "$script" ; then
        chmod a+x $script
    else
        AC_MSG_ERROR([*** $script is not a valid file - Make sure you have configured with a valid SLOG-API home directory])
    fi
done
