# create Makefile from this file with configure script
##### User configurable options #####
ALL: mpi
ARCH        = @ARCH@
COMM        = @COMM@
DEVICE      = @DEVICE@
BOPT        = @BOPT@
P4_DIR      = @P4_DIR@
TOOLS_DIR   = @TOOLS_DIR@
MPIR_HOME   = @MPIR_HOME@
INCLUDE_DIR = @INCLUDE_PATH@ -Impid/@DEVICE@ -Iinclude
PREFIX	    = @PREFIX@
MAKE        = @MAKE@
CPRP        = @CPRP@
RSH_COMMAND = @RSH_COMMAND@
DEFAULT_MACHINE = @DEFAULT_MACHINE@
### End User configurable options ###

SHELL = /bin/sh

MPIDIRS  = src/pt2pt src/env src/dmpi src/util src/context src/coll \
	   src/topol src/profile
DIRS     = $(MPIDIRS) mpid/$(DEVICE) @CPP_DIR@ @MPE_DIR@ \
	   examples examples/basic examples/test/pt2pt examples/test/coll \
	   examples/test/topol examples/test/context \
	   examples/test/env examples/test \
	   examples/contrib examples/perftest \
           profiling/examples profiling/lib profiling/wrappergen
# 
# This is a list of the devices that are available
DEVICES  = mpid/chameleon mpid/ch_nx mpid/ch_p4 mpid/ch_nc mpid/ch_cmmd \
	   mpid/ch_eui mpid/meiko mpid/t3d mpid/ch_meiko mpid_ch_shmem \
	   mpid/ch_tcp mpid/ch_spp mpid/sgi
OTHERDEVICES  = mpid/ch_nx mpid/ch_p4 mpid/ch_nc mpid/ch_cmmd mpid/ch_eui \
		mpid/ch_meiko mpid/ch_shmem mpid/t3d \
		mpid/ch_spp mpid/sgi
# mpid/ch_tcp 
# 
# Build the device FIRST in case the device include, used in mpiimpl.h, 
# needs to be built (e.g., ch_p4 device)
CODEDIRS = mpid/$(DEVICE) $(MPIDIRS) @CPP_DIR@ @MPE_DIR@

#
# The order here was chosen to identify problems early in the build
# In particular, we try a linktest as soon as the libraries are available,
# with a second link test after the profiling libraries are built just to
# be sure that they still succeed.  There are "make clean"s around the 
# whole thing so that there is reduced danger of finding the "wrong" 
# object files .
mpi:
	$(MAKE) clean
	$(MAKE) rmlib
	$(MAKE) mpilib
	$(MAKE) mpiflib
	@echo "Testing that MPI applications can be linked..."
	$(MAKE) linktest
	$(MAKE) clean
	$(MAKE) profile
	$(MAKE) clean
	$(MAKE) mpirun
	$(MAKE) mpireconfig
	$(MAKE) mpiman
	$(MAKE) upshot
	@echo "Completed build of MPI.  Check the output for errors"
	@echo "Also try executing 'make testing' in examples/test"
	@echo "(This relies on mpirun, which currently works for many"
	@echo "but not all systems.  mpirun requires that you first"
	@echo "setup the util/machines/machines.$(ARCH) file for the"
	@echo "ch_p4 device.  Other devices do not need that file)."
	@echo " "
	@echo "Send bugs and comments to mpi-bugs@mcs.anl.gov"

examples: util/mpirun
	( cd examples ; $(MAKE) default )

linktest:
	( cd examples/test/pt2pt; $(MAKE) linktest )



mpilib: Makefile.in
	@for dir in $(CODEDIRS) ;\
	  do \
	  echo " " ;\
	  echo making mpir in directory $$dir ;\
	  (cd $$dir; \
	  $(MAKE) default_all ;) ;\
	  done
	@RANLIB@ lib/$(ARCH)/$(COMM)/libmpi.a
	@if test -w lib/$(ARCH)/$(COMM)/libmpi++.a ; then \
		@RANLIB@ lib/$(ARCH)/$(COMM)/libmpi++.a ; fi
	@if test -w lib/$(ARCH)/$(COMM)/libmpe.a ; then \
		@RANLIB@ lib/$(ARCH)/$(COMM)/libmpe.a ; fi
	@if test -w lib/$(ARCH)/$(COMM)/libmpe_nompi.a ; then \
		@RANLIB@ lib/$(ARCH)/$(COMM)/libmpe_nompi.a ; fi

mpiflib: Makefile.in
	@for dir in $(MPIDIRS) ;\
	  do \
	  echo " " ;\
	  echo making mpir in directory $$dir ;\
	  (cd $$dir; \
	  $(MAKE) wrapperlib ) ;\
	  done
	@RANLIB@ lib/$(ARCH)/$(COMM)/libfmpi.a
	
#
# This target is used to remove the libraries for this configuration; this
# can lead to better performance when rebuilding.
rmlib:
	/bin/rm -f lib/$(ARCH)/$(COMM)/lib*.a
#
# This is a special target for just the device part of the transport
# (used to speed builds for multiple Chameleon transport layers)
#
# WARNING: THIS DEPENDS ON THE ROUTINES IN MPIDIRS CALLING ROUTINES, NOT
# MACROS, FROM THE ADI.  THIS IS CURRENTLY THE CASE BUT MAY CHANGE
# 
# This uses the "default" entry instead of "default_all" because it is
# usually executed alone, and the RANLIB is needed at the end of this
# target anyway.
mpidevlib:
	(cd mpid/$(DEVICE) ; $(MAKE) clean )
	@for dir in mpid/$(DEVICE) ;\
	  do \
	  echo " " ;\
	  echo making mpir in directory $$dir ;\
	  (cd $$dir; \
	  $(MAKE) default) ;\
	  done

#
# This is mpilib, but with memory leak/usage debugging turned on.
# The command line switch -chmemdebug will enable leak reporting
# when MPI_Finalize is called.
mpilibdebug:
	@for dir in $(CODEDIRS) ;\
	  do \
	  echo " " ;\
	  echo making mpir in directory $$dir ;\
	  (cd $$dir; \
	  $(MAKE) default_all MPIPROFILE="-DMPIR_DEBUG_MEM" ) ;\
	  (cd $$dir ; $(MAKE) clean ; \
	  $(MAKE) profile_all MPIPROFILE="-DMPIR_DEBUG_MEM -DMPI_BUILD_PROFILING");\
	  done 
	@RANLIB@ lib/$(ARCH)/$(COMM)/libmpi.a
	@RANLIB@ lib/$(ARCH)/$(COMM)/libpmpi.a
	@if test -w lib/$(ARCH)/$(COMM)/libmpi++.a ; then \
		@RANLIB@ lib/$(ARCH)/$(COMM)/libmpi++.a ; fi
	@if test -w lib/$(ARCH)/$(COMM)/libmpe.a ; then \
		@RANLIB@ lib/$(ARCH)/$(COMM)/libmpe.a ; fi
	@if test -w lib/$(ARCH)/$(COMM)/libmpe_nompi.a ; then \
		@RANLIB@ lib/$(ARCH)/$(COMM)/libmpe_nompi.a ; fi
	

profile:
	@for dir in $(MPIDIRS) ;\
	  do \
	  echo " " ;\
	  echo making mpir in directory $$dir ;\
	  (cd $$dir; \
	  $(MAKE) profile_all MPIPROFILE="-DMPI_BUILD_PROFILING" ) ;\
	  done
	@RANLIB@ lib/$(ARCH)/$(COMM)/libpmpi.a

#
# Make mpirun from mpirun.in
#
mpirun: util/mpirun

#
# If you change this, ALSO change it in the install target!
# Note that the csh version is no longer built
util/mpirun: util/mpirun.sh.in
	-(cd util ; for file in mpirun.*.in tstmachines.in ; do \
	bfile=`basename $$file .in` ; \
	/bin/rm -f $$bfile ; \
	cat $$file | sed -e "s%\#MPIR_HOME\#%$(MPIR_HOME)%g" \
		-e "s%\#EXECER_DIR\#%$(MPIR_HOME)/util%g" \
 		-e "s%\#DEFAULT_DEVICE\#%$(DEVICE)%g" \
		-e "s%\#RSH_COMMAND\#%$(RSH_COMMAND)%g" \
		-e "s%\#DEFAULT_MACHINE\#%$(DEFAULT_MACHINE)%g" \
		-e "s%\#DEFAULT_ARCH\#%$(ARCH)%g" > $$bfile ; \
	chmod 775 $$bfile ; \
	/bin/rm -f ../lib/$(ARCH)/$(COMM)/$$bfile ; \
	cp $$bfile ../lib/$(ARCH)/$(COMM) ; done ; \
	mv mpirun.sh mpirun )
#
# If you change this, ALSO change it in the install target!
mpireconfig: util/mpireconfig
util/mpireconfig: util/mpireconfig.in
	cat util/mpireconfig.in | sed -e "s%\#MPIR_HOME\#%$(MPIR_HOME)%g" \
			    -e "s%\#ARCH\#%$(ARCH)%g" \
			    -e "s%\#PREFIX\#%$(PREFIX)%g" \
			    -e "s%\#COMM\#%$(COMM)%g" > \
		    util/mpireconfig ;\
	chmod 775 util/mpireconfig
	-/bin/rm -f lib/$(ARCH)/$(COMM)/mpireconfig \
		lib/$(ARCH)/$(COMM)/config.status 
	-cp util/mpireconfig config.status lib/$(ARCH)/$(COMM)

#
# Make mpiman from mpiman.in
#
mpiman: util/mpiman

#
# If you change this, ALSO change it in the install target!
util/mpiman: util/mpiman.in
	/bin/rm -f util/mpiman
	cat util/mpiman.in \
	    | sed -e "s%\#INSTALL_DIR\#%$(MPIR_HOME)%g" > util/mpiman
	chmod 755 util/mpiman
#
#
# Make upshot from upshot.in
#
upshot: profiling/upshot/bin/upshot

#
# Update the install if you change this!
profiling/upshot/bin/upshot: profiling/upshot/bin/upshot.in
	/bin/rm -f profiling/upshot/bin/upshot
	cat profiling/upshot/bin/upshot.in | sed \
	  -e "s%\#wishloc\#%@wishloc@%g" \
	  -e "s%\#BITMAP_DIR\#%$(MPIR_HOME)/profiling/upshot/bitmaps%g" > \
	    profiling/upshot/bin/upshot;\
	chmod 775 profiling/upshot/bin/upshot

nupshot:
	(cd profiling/nupshot; \
	if [ ! -s Makefile ] ; then \
	    configure -tcldir=@TCL_DIR@ -tkdir=@TK_DIR@ ; fi ; \
	$(MAKE) )

#
# If you change this, ALSO change it in the install target!
serv_p4:
	( cd mpid/ch_p4/p4-1.4/servers ; make serv_p4 ; \
	  cp ../bin/serv_p4 ../../../../lib/$(ARCH)/ch_p4 )
	/bin/rm -f util/chp4_servs
	cat util/chp4_servs.in | sed -e "s%\#MPIR_HOME\#%$(MPIR_HOME)%g" \
 		-e "s%\#DEFAULT_DEVICE\#%$(DEVICE)%g" \
		-e "s%\#RSH_COMMAND\#%$(RSH_COMMAND)%g" \
		-e "s%\#DEFAULT_MACHINE\#%$(DEFAULT_MACHINE)%g" \
		-e "s%\#DEFAULT_ARCH\#%$(ARCH)%g" > \
		    util/chp4_servs ;\
	chmod 775 util/chp4_servs
	-cp util/chp4_servs lib/$(ARCH)/$(COMM)

#
# Changed clean to not remove the library, only the object files
clean:
	@/bin/rm -f *~ *.ln util/mpirun util/mpireconfig util/tstmachines \
			    util/mpicc util/mpif77 \
			    installtest/Makefile \
	  		    profiling/upshot/bin/upshot
	@if [ -d profiling/wrappergen ] ; then \
	    /bin/rm -f profiling/wrappergen/*.o ; fi
	@if [ -d profiling/nupshot ] ; then \
	    ( cd profiling/nupshot ; $(MAKE) clean ) ; fi
	@if [ -d tsuite ] ; then \
	    (cd tsuite ; $(MAKE) clean ) ; fi
	@if [ -d bugs -a -s bugs/Makefile ] ; then \
	    (cd bugs ; $(MAKE) clean ) ; fi
	@-for dir in $(DIRS) ;\
	  do \
	  echo cleaning $$dir ;\
	  (cd $$dir; if [ -s Makefile ] ; then $(MAKE) clean ; fi ) ;\
	  done
	if [ -n "$(TOOLS_DIR)" ] ; then  \
	    echo "cleaning mpid/chameleon" ; \
	    (cd mpid/chameleon ; $(MAKE) clean )  ; fi
#	@for dir in $(OTHERDEVICES) ; do echo cleaning $$dir ; \
#		(cd $$dir ; $(MAKE) clean ) ; done
	if [ -d mpid/chameleon ] ; then \
	    /bin/rm -f mpid/chameleon/*.o ; fi
	if [ -s mpid/ch_shmem/p2ptest/Makefile ] ; then \
	    echo "cleaning mpid/ch_shmem/p2ptest" ; \
	    (cd mpid/ch_shmem/p2ptest ; $(MAKE) clean ) ; fi

realclean: clean
	-/bin/rm -f lib/*/*/*.[oa]
	-/bin/rm -f lib/*/*.[oa]
	if [ -n "$(TOOLS_DIR)" ] ; then  \
	    echo "cleaning mpid/chameleon" ; \
	    (cd mpid/chameleon ; $(MAKE) clean )  ; fi
	@-for dir in $(OTHERDEVICES) ; do echo cleaning $$dir ; \
	     (cd $$dir ; if [ -s Makefile ] ; then $(MAKE) clean ; fi ) ; done
	if [ -s mpid/ch_p4/p4-1.4/Makefile ] ; then \
	    (cd  mpid/ch_p4/p4-1.4 ; make realclean ) ; fi
	@for dir in $(DIRS) ;\
	  do \
	  echo removing Makefile in $$dir ;\
	  (cd $$dir; /bin/rm Makefile) ;\
	  done
	@/bin/rm Makefile
	

# Configure the Makefiles for some popular versions for ANL
anlp4: configure
	@if [ `umask` != 0002 ] ; then echo "Set umask 2 first!" ; exit 1; fi
	configure -arch=sun4 -comm=p4 -bopt=g -device=chameleon -var_pkt \
	-devicedir=/home/gropp/tools.n -transportdir=/usr/local/p4-1.4 -mpe 
	@-chmod g+ws lib lib/sun4 lib/sun4/p4 >/dev/null 2>&1
anlp4pre: configure
	@if [ `umask` != 0002 ] ; then echo "Set umask 2 first!" ; exit 1; fi
	configure -arch=sun4 -comm=p4 -bopt=g -device=chameleon -var_pkt \
	-devicedir=/home/gropp/tools.n -transportdir=/usr/local/p4-1.4 -mpe \
	-pre_alloc
	@-chmod g+ws lib lib/sun4 lib/sun4/p4 >/dev/null 2>&1
anlchp4: configure
	@if [ `umask` != 0002 ] ; then echo "Set umask 2 first!" ; exit 1; fi
	configure -arch=sun4 -device=ch_p4 -mpe -var_pkt -mpedbg -opt="-g"
	-cp config.status lib/sun4/ch_p4
	@-chmod g+ws lib lib/sun4 lib/sun4/ch_p4 >/dev/null 2>&1
anltcp: configure 
	@if [ `umask` != 0002 ] ; then echo "Set umask 2 first!" ; exit 1; fi
	configure -arch=sun4 -device=ch_tcp -mpe -var_pkt -mpedbg -opt="-g"
	-cp config.status lib/sun4/ch_tcp
	@-chmod g+ws lib lib/sun4 lib/sun4/ch_tcp >/dev/null 2>&1
anlchp4mem: configure
	@if [ `umask` != 0002 ] ; then echo "Set umask 2 first!" ; exit 1; fi
	configure -arch=sun4 -device=ch_p4 -mpe -var_pkt -mpedbg -memdebug \
		-opt="-g"
	-cp config.status lib/sun4/ch_p4
	@-chmod g+ws lib lib/sun4 lib/sun4/ch_p4 >/dev/null 2>&1
anlchp4rndv: configure
	@if [ `umask` != 0002 ] ; then echo "Set umask 2 first!" ; exit 1; fi
	configure -arch=sun4 -device=ch_p4 -mpe -var_pkt -mpedbg -use_rndv \
		-opt="-g"
	-cp config.status lib/sun4/ch_p4
	@-chmod g+ws lib lib/sun4 lib/sun4/ch_p4 >/dev/null 2>&1
anlp4sgi: configure
	@if [ `umask` != 0002 ] ; then echo "Set umask 2 first!" ; exit 1; fi
	configure -arch=IRIX -comm=p4 -bopt=g -device=chameleon \
	-devicedir=/home/gropp/tools.n -transportdir=/usr/local/p4-1.4 -mpe \
		-no_short_longs
	-cp config.status lib/IRIX/p4
	@-chmod g+ws lib lib/IRIX lib/IRIX/p4 >/dev/null 2>&1
anlchp4sgi: configure
	@if [ `umask` != 0002 ] ; then echo "Set umask 2 first!" ; exit 1; fi
	configure -arch=IRIX -comm=ch_p4 -device=ch_p4 -mpe -no_short_longs
	@-chmod g+ws lib lib/IRIX lib/IRIX/ch_p4 >/dev/null 2>&1
anlchp4alpha: configure
	@if [ `umask` != 002 ] ; then echo "Set umask 2 first!" ; exit 1; fi
	configure -arch=alpha -comm=ch_p4 -device=ch_p4 -mpe \
		-make=/usr/bin/make -no_short_longs -mpedbg
	@-chmod g+ws lib lib/alpha lib/alpha/ch_p4 >/dev/null 2>&1
anlchp4alphamem: configure
	@if [ `umask` != 002 ] ; then echo "Set umask 2 first!" ; exit 1; fi
	configure -arch=alpha -comm=ch_p4 -device=ch_p4 -mpe \
		-make=/usr/bin/make -no_short_longs -memdebug -mpedbg
	@-chmod g+ws lib lib/alpha lib/alpha/ch_p4 >/dev/null 2>&1
# RS6000 sh umask returns 3 digits, not four!
anlp4ibm: configure
	@if [ `umask` != 002 -a `umask` != 0002 ] ; then \
		echo "Set umask 2 first!" ; exit 1; fi
	configure -arch=rs6000 -comm=p4 -bopt=g -device=chameleon \
	-devicedir=/home/gropp/tools.n -transportdir=/usr/local/p4-1.4a -mpe \
	-no_short_longs
	@-chmod g+ws lib lib/rs6000 lib/rs6000/p4 >/dev/null 2>&1
anlchp4ibm: configure
	@if [ `umask` != 002 -a `umask` != 0002 ] ; then \
		echo "Set umask 2 first!" ; exit 1; fi
	configure -arch=rs6000 -comm=ch_p4 -device=ch_p4 -mpe -no_short_longs \
		-opt="-O"
	@-chmod g+ws lib lib/rs6000 lib/rs6000/p4 >/dev/null 2>&1
# euih is similar to the release 1 MPLp for the SP1.
anleuih: configure
	@if [ `umask` != 002 -a `umask` != 0002 ] ; then \
		echo "Set umask 2 first!" ; exit 1; fi
	configure -arch=rs6000 -comm=euih -bopt=O -device=chameleon \
		-devicedir=/home/gropp/tools.n  -mpe -opt="-O" -nodevdebug
	@-chmod g+ws lib lib/rs6000 lib/rs6000/euih >/dev/null 2>&1
anlcheuih: configure
	@if [ `umask` != 002 -a `umask` != 0002 ] ; then \
		echo "Set umask 2 first!" ; exit 1; fi
	configure -arch=rs6000 -device=ch_eui -comm=ch_euih -mpe -opt="-O" \
		-no_mpegraphics -nodevdebug
	@-chmod g+ws lib lib/rs6000 lib/rs6000/ch_euih >/dev/null 2>&1
# mpi is for release 2 MPL for the SPx
anlmpl: configure
	@if [ `umask` != 002 -a `umask` != 0002 ] ; then \
		echo "Set umask 2 first!" ; exit 1; fi
	configure -arch=rs6000 -comm=eui -bopt=O -device=chameleon \
	-devicedir=/home/gropp/tools.n  -mpe -opt="-O" -nodevdebug \
		-no_short_longs -limited_buffers
	@-chmod g+ws lib lib/rs6000 lib/rs6000/eui >/dev/null 2>&1
anlchmpl: configure
	@if [ `umask` != 002 -a `umask` != 0002 ] ; then \
		echo "Set umask 2 first!" ; exit 1; fi
	configure -arch=rs6000 -device=ch_eui -comm=ch_eui -mpe -opt="-g" \
		-limited_buffers -nodevdebug -no_short_longs -pkt_size=64
	@-chmod g+ws lib lib/rs6000 lib/rs6000/ch_eui >/dev/null 2>&1
anlchmplg: configure
	@if [ `umask` != 002 -a `umask` != 0002 ] ; then \
		echo "Set umask 2 first!" ; exit 1; fi
	configure -arch=rs6000 -device=ch_eui -comm=ch_eui -mpe -opt="-g" \
		-limited_buffers -no_short_longs -pkt_size=64 -mpedbg
	@-chmod g+ws lib lib/rs6000 lib/rs6000/ch_eui >/dev/null 2>&1
# This is for testing the rendevous code
anlchmplrndv: configure
	@if [ `umask` != 002 -a `umask` != 0002 ] ; then \
		echo "Set umask 2 first!" ; exit 1; fi
	configure -arch=rs6000 -device=ch_eui -comm=ch_eui -mpe -opt="-g" \
		-no_mpegraphics -use_rndv -no_short_longs
	@-chmod g+ws lib lib/rs6000 lib/rs6000/ch_eui >/dev/null 2>&1
anlpvm3: configure
	@if [ `umask` != 0002 ] ; then echo "Set umask 2 first!" ; exit 1; fi
	configure -arch=sun4 -comm=pvm3 -bopt=g -device=chameleon \
	    -devicedir=/home/gropp/tools.n -transportdir=/home/gropp/pvm3 -mpe
	@-chmod g+ws lib lib/sun4 lib/sun4/pvm3 >/dev/null 2>&1
# This is intended to be cross-compiled on, say, a Sun
anlnx: configure
	@if [ `umask` != 0002 ] ; then echo "Set umask 2 first!" ; exit 1; fi
	configure -arch=intelnx -comm=nx -device=ch_nx -mpe -no_mpegraphics \
		-opt="-O" -nodevdebug
	@-chmod g+ws lib lib/intelnx lib/intelnx/nx >/dev/null 2>&1
#
# This version allows us to build a version for profiling
anlchp4pg: configure
	@if [ `umask` != 0002 ] ; then echo "Set umask 2 first!" ; exit 1; fi
	configure -arch=sun4 -device=ch_p4 \
		-mpe -opt="-pg -O" -nodevdebug -var_pkt -mpedbg
	-@chmod g+ws lib lib/sun4 lib/sun4/p4 >/dev/null 2>&1

INSTALLDIR = /usr/local/mpi
#
# The install target really needs to use some for of 'install' program that
# will create directories, set modes and owners, etc.  Alas, such a function
# is not standard.
#
install:
	@if [ ! -s lib/$(ARCH)/$(COMM)/libmpi.a ] ; then \
	    echo "You must make MPI before installing it!" ; exit 1 ; fi
	@if [ ! -n "$(PREFIX)" ] ; then \
	  echo "Set an installation location with --prefix=<location>";\
	  echo "during configure or PREFIX=<location> during make install.";\
	  exit 1;\
	fi
	@echo "Install into $(PREFIX) on the $(ARCH) with $(COMM)
	@if [ -d $(PREFIX) ] ;\
	then\
	    echo 'using existing directory $(PREFIX)' ;\
	else\
	    mkdir $(PREFIX) ;\
	fi
	@if [ ! -d $(PREFIX)/lib ] ; then mkdir $(PREFIX)/lib ; fi
	@if [ ! -d $(PREFIX)/lib/$(ARCH) ] ; then \
	    mkdir $(PREFIX)/lib/$(ARCH) ; fi
	@if [ ! -d $(PREFIX)/lib/$(ARCH)/$(COMM) ] ; then \
	    mkdir $(PREFIX)/lib/$(ARCH)/$(COMM) ; fi
	@if [ ! -d $(PREFIX)/util ] ; then mkdir $(PREFIX)/util ; fi
	@if [ ! -d $(PREFIX)/include ] ; then \
	    mkdir $(PREFIX)/include ; fi
	@if [ ! -d $(PREFIX)/mpid ] ; then mkdir $(PREFIX)/mpid ; fi
	@if [ ! -d $(PREFIX)/mpid/$(DEVICE) ] ; then \
	    mkdir $(PREFIX)/mpid/$(DEVICE) ; fi
	@if [ ! -d $(PREFIX)/examples ] ; then mkdir $(PREFIX)/examples; fi
	@if [ ! -d $(PREFIX)/bin ] ; then mkdir $(PREFIX)/bin; fi
	cp util/tarch $(PREFIX)/bin
	cp util/tdevice $(PREFIX)/bin
	#
	# mpiman
	/bin/rm -f $(PREFIX)/bin/mpiman
	cat util/mpiman.in \
	    | sed -e "s%\#INSTALL_DIR\#%$(PREFIX)%g" > $(PREFIX)/bin/mpiman
	chmod 755 $(PREFIX)/bin/mpiman
	#
	# Upshot and Nupshot
	/bin/rm -f $(PREFIX)/bin/upshot
	cat profiling/upshot/bin/upshot.in | sed  \
		-e "s%\#wishloc\#%@wishloc@%g" \
	  	-e "s%\#BITMAP_DIR\#%$(PREFIX)/lib/bitmaps%g" > \
		$(PREFIX)/bin/upshot
	chmod 755 $(PREFIX)/bin/upshot
	#
	# Should clean nupshot sources  (*.c/h) 
	-if [ -n "@TCL_DIR@" ] ; then \
	    $(CPRP) -r profiling/nupshot $(PREFIX) ; \
	    (cd $(PREFIX)/nupshot ; \
		configure -tcldir=@TCL_DIR@ -tkdir=@TK_DIR@ ; \
		$(MAKE) clean ; $(MAKE) ; \
	    	mv nupshot ../bin ) ; \
	fi
	#
	# mpirun et al.
	-(cd util ; for file in mpirun.*.in tstmachines.in ; do \
	bfile=`basename $$file .in` ; \
	cat $$file | sed -e "s%\#MPIR_HOME\#%$(PREFIX)%g" \
		-e "s%\#EXECER_DIR\#%$(PREFIX)/util%g" \
 		-e "s%\#DEFAULT_DEVICE\#%$(DEVICE)%g" \
		-e "s%\#RSH_COMMAND\#%$(RSH_COMMAND)%g" \
		-e "s%\#DEFAULT_MACHINE\#%$(DEFAULT_MACHINE)%g" \
		-e "s%\#DEFAULT_ARCH\#%$(ARCH)%g" > $(PREFIX)/bin/$$bfile ; \
	chmod 775 $(PREFIX)/bin/$$bfile ; \
	/bin/rm -f $(PREFIX)/lib/$(ARCH)/$(COMM)/$$bfile ; \
	cp $(PREFIX)/bin/$$bfile $(PREFIX)/lib/$(ARCH)/$(COMM) ; done ; \
	mv mpirun.sh mpirun )
	/bin/rm -f $(PREFIX)/bin/mpireconfig
	cat util/mpireconfig.in | sed -e "s%\#MPIR_HOME\#%$(PREFIX)%g" \
		    -e "s%\#ARCH\#%$(ARCH)%g" \
		    -e "s%\#PREFIX\#%$(PREFIX)%g" \
		    -e "s%\#COMM\#%$(COMM)%g" > \
		    $(PREFIX)/bin/mpireconfig ; \
	chmod 775 $(PREFIX)/bin/mpireconfig
	/bin/rm -f $(PREFIX)/bin/execer
	cp util/execer $(PREFIX)/bin/execer
	chmod 755 $(PREFIX)/bin/execer
	# 
	# P4 server
	-if [ "$(DEVICE)" = "ch_p4" ] ; then \
	( cd mpid/ch_p4/p4-1.4/servers ; make serv_p4 ; cd ../bin ; \
	  cp serv_p4 $(PREFIX)/bin ; chmod a+x $(PREFIX)/bin/serv_p4 ; ) \
	fi
	/bin/rm -f util/chp4_servs
	cat util/chp4_servs.in | sed -e "s%\#MPIR_HOME\#%$(PREFIX)%g" \
 		-e "s%\#DEFAULT_DEVICE\#%$(DEVICE)%g" \
		-e "s%\#RSH_COMMAND\#%$(RSH_COMMAND)%g" \
		-e "s%\#DEFAULT_MACHINE\#%$(DEFAULT_MACHINE)%g" \
		-e "s%\#DEFAULT_ARCH\#%$(ARCH)%g" > \
		    $(PREFIX)/util/chp4_servs ;\
	chmod 775 $(PREFIX)/util/chp4_servs
	-cp $(PREFIX)/util/chp4_servs $(PREFIX)/lib/$(ARCH)/$(COMM)
	#
	# Machines database
#	@if [ ! -d $(PREFIX)/util/machines.anl ] ; then \
#	    mkdir $(PREFIX)/util/machines.anl ; fi
#	$(CPRP) -r util/machines $(PREFIX)/util/machines.anl
	$(CPRP) -r util/machines $(PREFIX)/util/machines
	$(CPRP) -r profiling/upshot/bitmaps $(PREFIX)/lib/bitmaps
	#
	# Include files
	cp include/mpi.h $(PREFIX)/include
	cp include/mpi++.h $(PREFIX)/include
	cp include/mpi++P.h $(PREFIX)/include
	cp include/mpif.h $(PREFIX)/include
	cp include/mpi_errno.h $(PREFIX)/include
	cp include/binding.h $(PREFIX)/include
	cp include/patchlevel.h $(PREFIX)/include
	cp mpe/mpe.h $(PREFIX)/include
	cp mpe/mpe_graphics.h $(PREFIX)/include
	cp mpe/mpe_log.h $(PREFIX)/include
	cp mpe/basex11.h $(PREFIX)/include
	(cd $(PREFIX)/include ; chmod ug+rw mpi.h mpi++.h mpi++P.h mpif.h \
	mpi_errno.h binding.h patchlevel.h mpe.h mpe_graphics.h mpe_log.h \
	basex11.h )
	#
	# Libaries
	$(CPRP) -p lib/$(ARCH)/$(COMM)/* $(PREFIX)/lib/$(ARCH)/$(COMM)
	#
	# Documentation
	$(CPRP) -r man $(PREFIX)
	$(CPRP) -r doc $(PREFIX)
	cp ref/adiman.ps.Z $(PREFIX)/doc
	cp ref/mpiman.ps.Z $(PREFIX)/doc
	#
	# Example programs
	cp installtest/Makefile.in $(PREFIX)/examples
	chmod ug+wr $(PREFIX)/examples/Makefile.in
	#
	# This SHOULD use mpireconfig...
	@cat installtest/makefile.proto | sed \
		-e "s%\#ARCH\#%@ARCH@%g" \
		-e "s%\#COMM\#%@COMM@%g" \
		-e "s%\#INSTALL_DIR\#%$(PREFIX)%g" \
		-e "s%\#CC\#%@CC@%g" \
		-e "s%\#CLINKER\#%@CLINKER@%g" \
		-e "s%\#F77\#%@F77@%g" \
		-e "s%\#FLINKER\#%@FLINKER@%g" \
		-e "s%\#OPTFLAGS\#%@OPTFLAGS@%g" \
		-e "s%\#LIB_LIST\#%@LIB_LIST@%g" \
		-e "s%\#FLIB_PATH_LEADER\#%@FLIB_PATH_LEADER@%g" \
		-e "s%\#INCLUDE_PATH\#%@INCLUDE_PATH@%g" \
		-e "s%\#FFLAGS\#%@FFLAGS@%g" \
		-e "s%\#CFLAGS\#%@CFLAGS@%g" > installtest/Makefile
	cp installtest/cpi.c $(PREFIX)/examples
	cp installtest/pi3.f $(PREFIX)/examples
	cp installtest/cpilog.c $(PREFIX)/examples
	cp installtest/Makefile $(PREFIX)/examples
	(cd $(PREFIX)/examples ; chmod ug+rw Makefile cpi.c pi3.f cpilog.c \
	Makefile )
	#
	# Test build the examples
	(cd $(PREFIX)/examples ; /bin/rm -f mpirun ; \
	  ln -s ../bin/mpirun mpirun )
	cat config.status | sed -e "s%MPIR_HOME=.*$$%MPIR_HOME='$(PREFIX)'%g" \
  -e "s%^LIB_PATH=\([^/]*\)/.*$$%LIB_PATH=\1$(PREFIX)/lib/$(ARCH)/$(COMM)'%g" \
-e "s%^FLIB_PATH=\([^/]*\)/.*$$%FLIB_PATH=\1$(PREFIX)/lib/$(ARCH)/$(COMM)'%g" \
			-e "s%MPE_DIR=.*$$%MPE_DIR='$(PREFIX)/mpe'%g" \
			        > $(PREFIX)/config.status
	/bin/rm -f $(PREFIX)/examples/mpif.h
	ln -s $(PREFIX)/include/mpif.h $(PREFIX)/examples/mpif.h
	# We should never do wildcarded permission changes.  As necessary,
	# do them as the files are moved.
	#-chmod -R ug+rw $(PREFIX)
	echo "About to run installation test..."
	(cd $(PREFIX)/examples; $(MAKE))
	@echo installed $(ARCH)/$(COMM)/$(DEVICE) MPI in $(PREFIX)


installlib:
	@if [ ! -n "$(PREFIX)" ]; then \
	  echo "Set an installation location with --prefix=<location>"; \ 
	  echo "during configure or PREFIX=<location> during make installlib."; \
	  exit 1; \
	fi
	@echo "Install new libs into $(PREFIX) for $(ARCH)/$(COMM)"
	@if [ -d $(PREFIX) ] ;\
	then\
	    echo 'using existing directory $(PREFIX)' ;\
	else\
	    mkdir $(PREFIX) ;\
	fi
	@if [ ! -d $(PREFIX)/lib ] ; then mkdir $(PREFIX)/lib ; fi
	@if [ ! -d $(PREFIX)/lib/$(ARCH) ] ; then \
	    mkdir $(PREFIX)/lib/$(ARCH) ; fi
	@if [ ! -d $(PREFIX)/lib/$(ARCH)/$(COMM) ] ; then \
	    mkdir $(PREFIX)/lib/$(ARCH)/$(COMM) ; fi
	-$(CPRP) -p lib/$(ARCH)/$(COMM)/* $(PREFIX)/lib/$(ARCH)/$(COMM)
	@if [ ! -d $(PREFIX)/mpid ] ; then mkdir $(PREFIX)/mpid ; fi
	@if [ ! -d $(PREFIX)/mpid/$(DEVICE) ] ; then \
	    mkdir $(PREFIX)/mpid/$(DEVICE) ; fi
#	-cp mpid/$(DEVICE)/*.h $(PREFIX)/mpid/$(DEVICE)
#       We need to be more careful about permissions
#	-chmod -R ug+rw $(PREFIX)
	@echo installed $(ARCH)/$(COMM)/$(DEVICE) MPI in $(PREFIX)

#
# Install adds ALL of the examples to the installation area
# This is an initial version.
install-all: install
	-$(CPRP) -r examples $(PREFIX)
	# Update the makefiles
	(cd $(PREFIX)/examples ; for dir in `find -type d -print` ; do \
		(cd $$dir ; \
		if [ -s Makefile.in ] ; then \
		    $(PREFIX)/lib/$(ARCH)/$(COMM)/mpireconfig Makefile ; \
		fi ) )

