# Makefile.in for mpd

@SET_MAKE@
@VPATH@
prefix    = @prefix@
exec_prefix = @exec_prefix@
bindir    = @bindir@
srcdir	  = @srcdir@
SHELL	  = @SHELL@
CC	  = @CC@
INCLUDES  = -I. -I${srcdir}
CPPFLAGS  = @CPPFLAGS@
CLINKER	  = ${CC}
COPTIONS  = @COPTIONS@
LDFLAGS	  = @LDFLAGS@
LIBS	  = @LIBS@ 
GDB       = @GDB@

C_COMPILE = ${CC} ${INCLUDES} ${CFLAGS} ${COPTIONS}
C_LINK	  = ${CLINKER} ${CFLAGS} ${COPTIONS} ${LDFLAGS}

PROGRAMS  = mpd mpdman mpdcon
EXAMPLES  = hellop 

SOURCES   = ${mpd_SOURCES} ${base_SOURCES} ${example_SOURCES}
OBJECTS   = ${mpd_OBJECTS} ${base_OBJECTS} ${example_OBJECTS}
HEADERS   = mpdconf.h mpd.h mpdlib.h mpdman.h

CMDS      =  mpirun mpigdb mpdtrace mpddump mpdringtest mpdexit mpdallexit \
             mpdbomb mpdhelp mpdcleanup mpdmpexec mpdmandump \
             mpdlistjobs mpdkilljob 

mpd_SOURCES     = mpd.c handlers.c sockets.c sibproc.c conproc.c util.c
base_SOURCES	= mpdlib.c
example_SOURCES	= hellop.c 

mpd_OBJECTS	= ${mpd_SOURCES:.c=.o}
#mpd_OBJECTS     =  mpd.o handlers.o sockets.o sibproc.o conproc.o util.o
base_OBJECTS	= ${base_SOURCES:.c=.o}
example_OBJECTS	= ${example_SOURCES:.c=.o}


all: Makefile ${PROGRAMS} mpdlib.o util.o cmds bnr.o


.SUFFIXES:
.SUFFIXES: .o .dep .c 

etags:  ${HEADERS} ${SOURCES}
	etags ${HEADERS} ${SOURCES}

cmds: mpdcon
	@for cmd in ${CMDS} ; do \
	    if [ ! -f $$cmd ] ; then \
		if [ "$$cmd" != "mpigdb"  -o  "$(GDB)" = "1" ] ; then \
			ln -s mpdcon $$cmd ; \
	    	fi ; \
	    fi ; \
	done

mpd: ${mpd_OBJECTS}
	$(C_LINK) -o mpd ${mpd_OBJECTS} $(LIBS)

mpdman: mpdman.o util.o sockets.o
	$(C_LINK) -o mpdman mpdman.o util.o sockets.o $(LIBS)

mpdcon: mpdcon.o util.o sockets.o
	$(C_LINK) -o mpdcon mpdcon.o sockets.o util.o $(LIBS)

# The following lines provide the right libraries for all example programs
.c:
	${C_LINK} -o $* $*.c mpdlib.o util.o sockets.o bnr.o $(LIBS)
.o:     
	$(C_LINK) -o $* $*.o mpdlib.o util.o sockets.o bnr.o $(LIBS)

clean: 
	@-/bin/rm -f *.o *.dep *~ ${EXAMPLES} core 

distclean: clean
	/bin/rm -f Makefile startdaemons mpdconf.h ${PROGRAMS} ${CMDS} \
                   config.status config.cache config.log
	echo "some of the following might be executables you want to remove"
	ls -l | grep rwx

maintainer-clean: distclean
	/bin/rm -f configure

configure: configure.in
	./makeconfigure

Makefile: ${srcdir}/Makefile.in config.status
	./config.status

sibproc.o: sibproc.c
	${C_COMPILE} -c -DMANAGER_PATHNAME=\"`pwd`/mpdman\" $< 

.c.o:	
	${C_COMPILE} -c $<

# dependencies
aborttest.o: aborttest.c mpdlib.h
bnr.o: bnr.c bnr.h mpdlib.h mpd.h
conproc.o: conproc.c mpd.h
handlers.o: handlers.c mpd.h
hellop.o: hellop.c mpd.h mpdlib.h
hellop1.o: hellop1.c mpdlib.h
mpd.o: mpd.c mpd.h
mpdcon.o: mpdcon.c mpd.h
mpdlib.o: mpdlib.c mpd.h mpdlib.h
mpdman.o: mpdman.c mpdman.h mpd.h bnr.h
sibproc.o: sibproc.c mpd.h
sleeper1.o: sleeper1.c
sleeper2.o: sleeper2.c
sockets.o: sockets.c mpd.h
util.o: util.c mpd.h

# Installation target
install:
# startdaemons at least temporarily obsolete      
#	sed -e "s/^DIR=.*$/DIR=${bindir}/g" ${top_srcdir}/mpid/mpd/startdaemons.in ${bindir}/startdaemons
#	chmod ${XMODE} ${bindir}/startdaemons
	cp mpd ${bindir}/mpd
	cp mpdcon ${bindir}/mpdcon
	cp mpdman ${bindir}/mpdman
#	if [ -f startdaemons -a mpd.hosts ] ; then \
#	    cp startdaemons ${bindir}/startdaemons ;\
#	    cp mpd.hosts ${bindir}/mpd.hosts ;\
#	fi
#  This should be a loop over CMDS
	@LN_S@ ${bindir}/mpdcon ${bindir}/mpdtrace
	@LN_S@ ${bindir}/mpdcon ${bindir}/mpddump
	@LN_S@ ${bindir}/mpdcon ${bindir}/mpdexit
	@LN_S@ ${bindir}/mpdcon ${bindir}/mpdallexit
	@LN_S@ ${bindir}/mpdcon ${bindir}/mpdbomb
	@LN_S@ ${bindir}/mpdcon ${bindir}/mpdhelp
	@LN_S@ ${bindir}/mpdcon ${bindir}/mpdcleanup
	@LN_S@ ${bindir}/mpdcon ${bindir}/mpdmpexec
	@LN_S@ ${bindir}/mpdcon ${bindir}/mpigdb
	@LN_S@ ${bindir}/mpdcon ${bindir}/mpdmandump
	@LN_S@ ${bindir}/mpdcon ${bindir}/mpdlistjobs
	@LN_S@ ${bindir}/mpdcon ${bindir}/mpdkilljob
	@LN_S@ ${bindir}/mpdcon ${bindir}/mpdringtest
#  Some other part of mpich install might have created an mpirun
	/bin/rm -f ${bindir}/mpirun
	-@if [ -n "${UNINSTALLFILE}" ] ; then \
	    for file in mpd mpdcon mpdman mpdtrace mpddump mpdexit \
	        mpdallexit mpdbomb mpdhelp mpdcleanup mpdmpexec \
		mpigdb mpdmandump mpdlistjobs mpdkilljob mpdringtest ; do \
	        echo "/bin/rm -f ${bindir}/$$file" >> ${UNINSTALLFILE} ; \
	    done ; \
	fi
#
#----------------------------------------------------------------------
#
#   RIO stuff - needs retesting
#
rio :  riod librio.a riotest
riod:  riod.o riod_handlers.o util.o sockets.o
	$(CC) -o riod riod.o riod_handlers.o util.o sockets.o $(LIBS)
librio.a : rio.o sockets.o util.o
	ar lruv librio.a rio.o sockets.o util.o
	ranlib librio.a
# RIO test suite
riotest : localtest rtest
localtest: localtest.o librio.a 
	$(C_LINK) $(LIBS) -o localtest localtest.o librio.a
rtest: rtest.o librio.a 
	$(C_LINK) $(LIBS) -o rtest rtest.o librio.a
rtest1: riotest.o librio.a 
	$(C_LINK) $(LIBS) -o riotest riotest.o librio.a
riotar:    
	tar cvf rio.tar rio.h mpd.h rio.c riod.c riod_handlers.c sockets.c\
	 util.c localtest.c rtest.c makefile readme.rio

#----------------------------------------------------------------------
