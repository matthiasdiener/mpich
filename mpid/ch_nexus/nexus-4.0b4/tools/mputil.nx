#!/bin/ksh
# 5765-144 (C) COPYRIGHT IBM CORP 1993, 1994
# @(#) 1.17.1.5 src/ppe/poe/bin/mputil, ppe.poe, ppe_r2.1, r2_1s11a 95/09/18 14:22:50
# All Rights Reserved
# Licensed Materials - Property of IBM
#
# US Government Users Restricted Rights - Use, duplication or disclosure
# restricted by GSA ADP Schedule Contract with IBM Corp.
#
# set -o verbose
# Changes for Release 2:
#    - add the possibility of -us in place of -lsp for static binding
#      and in doing so remove all references to the LSP libraries
#    - add logic for the potential of dynamic libraries
#    - remove logic for Resource Manager library
#    - changed default to link dynamically, set up library
#      names to handle static or dynamic libraries.  
#    - added external variable to signal library version
#    - changed profiling to enable counts, removed _PROF_LIB
#    - restored _PROF_LIB, make shr.o nonshared when profiling
#
# Changes for Release 2.1:
#    - removed statements related to xlf (Fortran) profiling. 
#    - when compiling with Fortran V3, make shr.o and io.o nonshared.
#    - when compiling with Fortran V2, make shr.o nonshared.
#    - environment variables MP_UTIL_EUI1, MP_UTIL_COMPILER for direct use 
#    - always include replaced exit routine from _PROF_LIB; makes exit code external.               
# When using with AFS uncomment the following two lines to define the AFS
# libraries and search paths. If these are different on your system, make the
# appropriate change.
#
#_AFS_PATHS="-L/usr/afsws -L/usr/afsws/lib -L/usr/afsws/lib/afs"
#_AFS_LIBS="-lauth -lsys -lrx -llwp -lrxkad"
#
#------------------------------------------------------------------------------
# If _BASE, _EUI1, or _COMPILER are unset, use exported variables
# Defaults are:
#    _BASE:/usr/lpp/poe or $MP_PREFIX/poe
#    _EUI1:eui1c
#    _COMPILER:cc
_BASE=${_BASE:-${MP_PREFIX:-/usr/lpp}/poe}
_EUI1=${_EUI1:-${MP_UTIL_EUI1:-"eui1c"}}
_COMPILER=${_COMPILER:-${MP_UTIL_COMPILER:-"cc"}}

_LIBROOT=$_BASE/lib
_LIBR="-L$_LIBROOT "
_LIBD=$_LIBROOT/ip

_LIB="$_LIBR"
_PROF_LIB="-lpoeprof"
_LIBS="-ls -lvtd -lppe -lm -lccl  -l$_EUI1 $_PROF_LIB "
 
_INCLUDE=$_BASE/include
 
_FLAGS="-I$_INCLUDE "
 
_ENTRY_FLAG=
_NOT_COMPILE_ONLY_FLAG=1
# Default profiling flag is none
_MP_PROFILE=0
#
# The following flag is used to determine if the default to link the libraries
# dynamically was chosen.
#
_NO_DEFAULT=0

						# IX48927
args=$#
while [ $args -gt 0 ]
do
 param=$1					# IX48927
 shift
 args=`expr $args - 1`
 case $param in
#
#
*\"*) _FLAGS="$_FLAGS '$param' " ;;            # IX48927
 -ip) _LIB="-L$_LIBROOT/ip $_LIBR" ;
		_LIBD=$_LIBROOT/ip; _NO_DEFAULT=1;;
 -us) _LIB="-L$_LIBROOT/us $_LIBR" ;
		_FLAGS="$_FLAGS -bI:/usr/lpp/ssp/css/libus/fs_ext.exp" ;
		_LIBD=$_LIBROOT/us; _NO_DEFAULT=2;;
 -v) _FLAGS="$_FLAGS $param " ; MP_VERBOSE=YES ;;
 -c) _FLAGS="$_FLAGS $param " ; _NOT_COMPILE_ONLY_FLAG=0 ;;
 -E) _FLAGS="$_FLAGS $param " ;
     if [[ "$_COMPILER" = "cc" || "$_COMPILER" = "xlC" || "$_COMPILER" = "/bin/xlc_r" ]]
       then
        _NOT_COMPILE_ONLY_FLAG=0 ;
     fi ;;
 -e*) _ENTRY_FLAG=TRUE ; _FLAGS="$_FLAGS $param " ;; 
 -p)  _MP_PROFILE=-1 ; _FLAGS="$_FLAGS $param ";;
 -pg) _MP_PROFILE=1 ;  _FLAGS="$_FLAGS $param ";;
 *) _FLAGS="$_FLAGS $param " ;;
 esac
done

if [ "$_ENTRY_FLAG" != "TRUE" ] 
then
    _FLAGS="$_FLAGS -emp_main " ;
fi

if [ $_NOT_COMPILE_ONLY_FLAG -eq 1 ]; then
if [ "$MP_VERBOSE" = "YES" ]; then
     echo "Not using -c option";
fi
# Pick up the -p and -pg flags and create an external symbol to load
if [ "$MP_VERBOSE" = "YES" ]; then
     echo "Creating profiling flag with value $_MP_PROFILE"
fi
touch mputil.mp_$$.c >/dev/null 2>&1
if [ ! -f mputil.mp_$$.c ]
then
	echo "Unable to create temporary file mputil.mp_$$.c, check directory permissions"
	exit 1
fi

echo "int mpmondata=$_MP_PROFILE; int mp_linked_euilib=$_NO_DEFAULT;" > mputil.mp_$$.c


cc -c mputil.mp_$$.c
_FLAGS="$_FLAGS mputil.mp_$$.o"

# If profiling, get local copy of shr.o from appropriate library
if [ $_MP_PROFILE -ne 0 ]; then
 case "$_COMPILER" in
#
#  Treat the -bnso files as a library, so that our -lpoeprof entry gets loaded.
#  If Fortran, do nothing (libs always linked ), for c, create static shr.o
#
 xlf*);; 
 *)   if [ "$MP_VERBOSE" = "YES" ]; then
        echo "Creating non-shared version of shr.o"
      fi
      ar x /usr/lib/libc.a shr.o;
	RC=$?
	if [ ${RC} -ne 0 -o ! -f shr.o ]
	then
		echo "ERROR: Unable to extract shr.o from /usr/lib/libc.a\ninto current directory for static linking."
		exit 1
	fi
		/usr/bin/rm shr.o;
	    _LIBS="$_LIBS mputil.shr_$$.o";;
 esac
fi

 case "$_COMPILER" in
#
#  If Fortran V3, create static io.o, if Fortran V2 + V3, create static shr.o
#
 xlf*) what /usr/lpp/xlf/bin/xlfentry | grep 'Version 03' > /dev/null
       if [ $? -eq 0 ]; then
         if [ "$MP_VERBOSE" = "YES" ]; then
          echo "Fortran V3, creating non-shared version of io.o"
         fi
         ar x /usr/lib/libxlf90.a io.o;
	RC=$?
	if [ ${RC} -ne 0 -o ! -f io.o ]
	then
		echo "ERROR: Unable to extract io.o from /usr/lib/libxlf90.a\ninto current directory for static linking."
		exit 1
	fi
	 ld -r -o mputil.io_$$.o io.o -bnso;
	RC=$?
	if [ $RC -ne 0 -o ! -f mputil.io_$$.o ]
	then
		echo "ERROR: Unable to complete static linking."
		exit 1
	fi
	 /usr/bin/rm io.o;
	 _LIBS="$_LIBS mputil.io_$$.o";
#  		_LIBS already contains _PROF_LIB 
       fi
       if [ "$MP_VERBOSE" = "YES" ]; then
        echo "Fortran, creating non-shared version of shr.o"
       fi
       ar x /usr/lib/libxlf.a shr.o;
	RC=$?
	if [ ${RC} -ne 0 -o ! -f shr.o ]
	then
		echo "ERROR: Unable to extract shr.o from /usr/lib/libxlf.a\ninto current directory for static linking."
		exit 1
	fi
       ld -r -o mputil.shr_$$.o shr.o -bnso;
	RC=$?
	if [ $RC -ne 0 -o ! -f mputil.shr_$$.o -o ! -f shr.o ]
	then
		echo "ERROR: Unable to complete static linking."
		exit 1
	fi
       /usr/bin/rm shr.o;
       _LIBS="$_LIBS mputil.shr_$$.o";;
 esac

# Removed check for Resource Manager library.

# Check for a default to use the dynamic library

if [ $_NO_DEFAULT -eq 0 ]; then
# Dynamic linking
	if [ "$MP_VERBOSE" = "YES" ]; then
		echo Dynamic linking:
    fi
	_LIB="-L$_LIBD $_LIB";
	_LIBS="$_LIBS -lcss";
else
# Static linking
	_CSS_NAME=`ar t $_LIBD/libcss.a`;
	if [ "$MP_VERBOSE" = "YES" ]; then
		echo Static linking:
		echo Extracting member $_CSS_NAME;
		echo "ar x $_LIBD/libcss.a $_CSS_NAME;"
		echo "ld -r $_CSS_NAME -o mputil_css_$$.o -bnso;"
	fi
	ar x $_LIBD/libcss.a $_CSS_NAME;
	RC=$?
	if [ ${RC} -ne 0 -o ! -f ${_CSS_NAME} ]
	then
		echo "ERROR: Unable to extract $_CSS_NAME from $_LIBD/libcss.a\ninto current directory for static linking."
		exit 1
	fi
	ld -r $_CSS_NAME -o mputil_css_$$.o -bnso;
	RC=$?
	if [ $RC -ne 0 -o ! -f mputil_css_$$.o ]
	then
		echo "ERROR: Unable to complete static linking."
		exit 1
	fi
	_FLAGS="$_FLAGS mputil_css_$$.o";
	/usr/bin/rm -f $_CSS_NAME;
fi

if [ "$MP_VERBOSE" = "YES" ]; then
        echo $_COMPILER $_FLAGS $_LIB $_LIBS $_AFS_PATHS $_AFS_LIBS
fi
 eval "$_COMPILER $_FLAGS $_LIB $_LIBS $_AFS_PATHS $_AFS_LIBS" # IX48927

else
if [ "$MP_VERBOSE" = "YES" ]; then
        echo $_COMPILER $_FLAGS
fi
 eval "$_COMPILER $_FLAGS"
fi
# save return code from compiler (IX42245)
rc=$?

if [ $_NOT_COMPILE_ONLY_FLAG -eq 1 ]; then
# Erase the profiler flag files
/usr/bin/rm -f mputil.mp_$$.*
/usr/bin/rm -f mputil_css_$$.o
/usr/bin/rm -f mputil.shr_$$.o
/usr/bin/rm -f mputil.io_$$.o
fi

return $rc
