#
# rcsid = "$Header: /nfs/globus1/src/master/ports0/Makefile.in,v 1.24 1997/01/21 23:00:31 tuecke Exp $"
#

# This is inserted by configure
@makefile_header@

PORTSO_INCLUDES= -I. -I$(srcdir)
PORTS0_CFLAGS= $(PORTSO_INCLUDES) $(ALL_CFLAGS) 
 
SHARED_LIB=$(build_dir_lib)/libnexus@nexus_flavor@.@SOEXT@
STATIC_LIB=$(build_dir_lib)/libnexus@nexus_flavor@.a

THREAD_MODULE= @THREAD_MODULE@

OBJS = \
	$(THREAD_MODULE).@OFILE@ \
	p0_args.@OFILE@ \
	p0_error.@OFILE@ \
	p0_fileio.@OFILE@ \
	p0_init.@OFILE@ \
	p0_mac_func.@OFILE@ \
	p0_malloc.@OFILE@ \
	p0_sanity.@OFILE@ \
	p0_trace.@OFILE@ \
	p0_util.@OFILE@

HDRS = \
	${srcdir}/$(THREAD_MODULE).h \
	${srcdir}/$(THREAD_MODULE)_i.h \
	ports0_config.h \
	${srcdir}/p0_defs.h \
	${srcdir}/p0_funcs.h \
	${srcdir}/p0_globals.h \
	${srcdir}/p0_internal.h \
	${srcdir}/p0_macros.h \
	${srcdir}/p0_types.h \
	${srcdir}/ports0.h 

INSTALL_HDRS = \
	${srcdir}/$(THREAD_MODULE).h \
	ports0_config.h \
	$(srcdir)/ports0_config_md.h \
	${srcdir}/ports0.h 

rel_to_build_dir=../ports0

all: $(OBJS) build_dir_headers

lib: @lib_target@

force:

static_lib: $(STATIC_LIB)

shared_lib: $(SHARED_LIB)

build_dir: build_dir_lib build_dir_inc

build_dir_lib: force
	@if  test ! -d "${build_dir_lib}"; then \
	   mkdir ${build_dir_lib}; \
	fi

build_dir_inc: force
	@if  test ! -d "${build_dir_inc}"; then \
	   mkdir ${build_dir_inc}; \
	fi

$(STATIC_LIB): build_dir_lib $(OBJS)
	$(RM) -f $(LIB)
	$(AR) $(ARFLAGS) $(LIB) $(OBJECTS)
	$(RANLIB) $(LIB)

@link_makefile@

install:

#install: install_lib install_headers

install_headers: force
	for hdr in $(INSTALL_HDRS) ; do \
	  if [ -f $${hdr} ] ; then \
	    cp $${hdr} $(INSTALL_INC_DIR)/. ; \
	  fi \
	done

# This is not correct, but will work for now.  
# Assumes that relative path from srdir to include directory is
# the same as the relative path from current directory to include
# directory.  Assume that include directory is one above. 

build_dir_headers: build_dir_inc
	@ for hdr in $(INSTALL_HDRS) ; do \
           if [ -f $${hdr} ] ; then \
	     lnk_file=$(build_dir_inc)/`echo $${hdr} | ${SED} -e 's|.*/||'`; \
             if test ! \( -f $$lnk_file \) ; then \
                case "$${hdr}" in \
                   /* ) $(LN_S) $${hdr} $$lnk_file ;; \
                   ../* ) $(LN_S) $${hdr} $$lnk_file ;; \
                   * ) $(LN_S) $(rel_to_build_dir)/$${hdr} $$lnk_file ;; \
                esac ; \
	     fi; \
	  fi \
	done

print-shared-objs:
	@ for obj in $(OBJS) ; do \
	    relobjs="$(rel_to_build_dir)/$$obj $$relobjs"; \
          done; \
          echo $$relobjs

print-static-objs:
	@ echo ""

p0_args.@OFILE@: $(srcdir)/p0_args.c $(HDRS)
	$(CC) $(CPPFLAGS) -c $(PORTS0_CFLAGS) $(srcdir)/p0_args.c
p0_error.@OFILE@: $(srcdir)/p0_error.c $(HDRS)
	$(CC) $(CPPFLAGS) -c $(PORTS0_CFLAGS) $(srcdir)/p0_error.c
p0_fileio.@OFILE@: $(srcdir)/p0_fileio.c $(HDRS)
	$(CC) $(CPPFLAGS) -c $(PORTS0_CFLAGS) $(srcdir)/p0_fileio.c
p0_init.@OFILE@: $(srcdir)/p0_init.c $(HDRS)
	$(CC) $(CPPFLAGS) -c $(PORTS0_CFLAGS) $(srcdir)/p0_init.c
p0_mac_func.@OFILE@: $(srcdir)/p0_mac_func.c $(HDRS)
	$(CC) $(CPPFLAGS) -c $(PORTS0_CFLAGS) $(srcdir)/p0_mac_func.c
p0_malloc.@OFILE@: $(srcdir)/p0_malloc.c $(HDRS)
	$(CC) $(CPPFLAGS) -c $(PORTS0_CFLAGS) $(srcdir)/p0_malloc.c
p0_sanity.@OFILE@: $(srcdir)/p0_sanity.c $(HDRS)
	$(CC) $(CPPFLAGS) -c $(PORTS0_CFLAGS) $(srcdir)/p0_sanity.c
p0_trace.@OFILE@: $(srcdir)/p0_trace.c $(HDRS)
	$(CC) $(CPPFLAGS) -c $(PORTS0_CFLAGS) $(srcdir)/p0_trace.c
p0_util.@OFILE@: $(srcdir)/p0_util.c $(HDRS)
	$(CC) $(CPPFLAGS) -c $(PORTS0_CFLAGS) $(srcdir)/p0_util.c
$(THREAD_MODULE).@OFILE@: $(srcdir)/$(THREAD_MODULE).c $(HDRS)
	$(CC) $(CPPFLAGS) -c $(PORTS0_CFLAGS) $(srcdir)/$(THREAD_MODULE).c
p0_test.@OFILE@: $(srcdir)/p0_test.c $(srcdir)/ports0.h
	$(CC) $(CPPFLAGS) -c $(PORTS0_CFLAGS) $(srcdir)/p0_test.c

p0_test: @lib_target@ p0_test.@OFILE@
	$(RM) -f p0_test
	$(CC) -o p0_test p0_test.@OFILE@ \
		$(LDFLAGS) $(LIB) $(CLIBS) $(THREADSAFE_LDFLAGS) 

ports0.tar: force
	tar cf ports0.tar *.c *.h makefile.bas

ports0.tar.Z: force
	tar cf - *.c *.h makefile.bas | compress > ports0.tar.Z

clean:	force
	${RM} -rf *.@OFILE@ p0_test

distclean: clean
	${RM} -f config.* Makefile ports0_config.h makefile_header stamp-h 

