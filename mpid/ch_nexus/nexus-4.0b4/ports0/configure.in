dnl
dnl rcsid = $Header
dnl
dnl AC_REVISION($Revision: 1.42 $)dnl
AC_INIT(ports0.h)
AC_CONFIG_HEADER(ports0_config.h)
AC_PREREQ(2.10)

LAC_INIT
LAC_NEXUS_INIT
LAC_BUILD_LIBDIR
AC_CONFIG_SUBDIRS(docs)

LAC_PATH_THREADS
LAC_PROG_CC
AC_C_CROSS
AC_PROG_CPP

if test "$GCC" = yes -a "$ac_cv_prog_gcc_shared" = no; then
  lac_build_shared="no"
fi

if test "$lac_build_shared" = yes; then
  LAC_SHARED_LIB
  lib_target=shared_lib
  LIBEXT=$SOEXT
else
  lib_target=static_lib
  LIBEXT=a
fi
AC_SUBST(lib_target)
AC_SUBST(LIBEXT)

AC_PREFIX_DEFAULT(/usr/local/nexus)

dnl --Check for programs

AC_PATH_PROG(MKDIR,"mkdir")

dnl --Check for libraries
dnl --Check for header files
AC_CHECK_HEADERS(libc.h)
AC_CHECK_HEADERS(malloc.h)
AC_CHECK_HEADERS(unistd.h)
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/types.h sys/param.h sys/access.h sys/errno.h)
AC_CHECK_HEADERS(sys/sysmp.h sys/lwp.h sys/stat.h sys/file.h)
dnl --Check for typedefs
dnl --Check for structures
dnl --Check for compiler characteristics
dnl --Check for library functions
AC_CHECK_FUNCS(getwd)
AC_CHECK_FUNCS(getcwd)
AC_CHECK_FUNCS(memmove)
dnl --Check for system services

AC_MSG_CHECKING(malloc debugging)
AC_CACHE_VAL(lac_cv_malloc_debugging, [dnl
AC_ARG_ENABLE(malloc-debugging,
	[  --enable-malloc-debugging     use debugging malloc],
	[lac_cv_malloc_debugging="$enableval"],
	[lac_cv_malloc_debugging="no"])
])
AC_MSG_RESULT($lac_cv_malloc_debugging)
if test "$lac_cv_malloc_debugging" = "yes"; then
  AC_DEFINE(PORTS0_MALLOC_DEBUG)
fi

AC_MSG_CHECKING(malloc padding)
AC_CACHE_VAL(lac_cv_malloc-padding, [dnl
AC_ARG_ENABLE(malloc-padding,
	[  --enable-malloc-padding       pad mallocs for debugging],
	[lac_cv_malloc_padding="$enableval"],
	[lac_cv_malloc_padding="no"])
])

AC_MSG_RESULT($lac_cv_malloc_padding)
if test "$lac_cv_malloc_padding" = "yes"; then
  AC_DEFINE(PORTS0_MALLOC_PAD)
fi

LAC_MAKEFILES(makefile_header, Makefile docs/Makefile)

AC_OUTPUT($lac_makefiles $lac_makefile_headers, 
  LAC_INSERT_MAKEFILE_HEADERS echo timestamp > stamp-h,
  [lac_makefiles="$lac_makefiles"]
)
