#ifndef LINT
static char vcid[] = "$Id$";
#endif

/* 
   This file contains the top-level routines for packing and unpacking general
   datatypes.  

   This is implemented by a routine that walks through the datatypes, 
   calling a pack/unpack routine for simple, contiguous datatypes (contiguous 
   in this sense means all bytes are in use between lb and ub; there are no
   holes).  This pack/unpack routine is passed as an argument; if the 
   argument is null, then memcpy is used.

   In addition, the pack/unpack routine returns the number of bytes 
   produced/consumed; this allows easier use of methods that change the size 
   of the data (e.g., XDR).  Also note that a routine that prints can be used;
   this makes it easier to provide debugging routines for the pack/unpack 
   codes. 

   The form of the contiguous pack routine is

   int packcontig( dest, src, datatype, num, packctx )
   num items of MPI type datatype are packed into dest from src, with the 
   number of bytes added to dest being returned.
   packctx is an anonymous pointer that can be used to hold any other state.

   The contiguous unpack routine is

   int unpackcontig( dest, src, datatype, num, inbytes, unpackctx )
   num items of MPI type datatype are unpacked from src into dest, with the
   number of bytes consumed from dest being returned.  inbytes is the 
   number of bytes available in dest, and is used for detecting buffer 
   overruns.
 */

#include "mpiimpl.h"
#ifdef HAS_XDR
#include "rpc/rpc.h"
int MPIR_Type_XDR_encode();
int MPIR_Type_XDR_decode();
#endif
#ifdef MPID_HAS_HETERO
int MPIR_Type_swap_copy();
#endif

/*
   This code assumes that we can use char * pointers (previous code 
   incremented pointers by considering them integers, which is even 
   less portable).  Systems that, for example, use word-oriented pointers
   may want to use different code.

   This code is used in dmpi/dmpipk.c to pack data for a device that
   only supports contiguous messages.

   In addition, XDR has an initial header that this does not handle.

   The same would be true for code that truncated 8 byte longs to 4 bytes.
 */

/* 
    A point-to-point version can also use the general pack2 by also detecting

	packcontig = MPIR_Type_swap_copy;
 */
int MPIR_Pack ( comm, buf, count, type, dest, destsize, totlen )
MPI_Comm comm;
void *buf;
int count, destsize;
MPI_Datatype type;
void *dest;
int  *totlen;
{
int (*packcontig)() = 0;
void *packctx = 0;
int err;
int outlen;
#ifdef HAS_XDR
XDR xdr_ctx;
#endif

#ifdef MPID_HAS_HETERO
    if (MPID_IS_HETERO == 1 &&
	MPIR_Comm_needs_conversion(comm)) {
#if HAS_XDR
	/* Need to initialize xdr buffer */
	MPIR_Mem_XDR_Init( dest, destsize, XDR_ENCODE, &xdr_ctx );
	packctx	   = (void *)&xdr_ctx;
	packcontig = MPIR_Type_XDR_encode;
	/* Could set a free function ... */
#else
    return MPIR_ERROR( comm, MPI_ERR_TYPE, 
"Conversion requires XDR which is not available" );
#endif
    }
#endif
outlen = 0;
*totlen = 0;
err = MPIR_Pack2( buf, count, type, packcontig, packctx, dest, 
		  &outlen, totlen );
#if HAS_XDR
if (packcontig == MPIR_Type_XDR_encode) 
    MPIR_Mem_XDR_Free( &xdr_ctx ); 
#endif
return err;
}

/* Unpack may need to know more about whether the buffer is packed in some
   particular format.
   act_len is actual len on input and final len out output.  
   Normally unchanged; if on input it does not specify enough data 
   for (count,type), then it may less than count*(size)
*/
int MPIR_Unpack ( comm, src, srcsize, count, type, msgrep, dest, act_len )
MPI_Comm     comm;
void         *src, *dest;
int          srcsize, count;
MPI_Datatype type;
int          *act_len;
{
int (*unpackcontig)() = 0;
void *unpackctx = 0;
int err, dest_len;
#ifdef HAS_XDR
XDR xdr_ctx;
#endif

#ifdef MPID_HAS_HETERO
    if (msgrep == MPIR_MSGREP_XDR || (MPID_IS_HETERO == 1 &&
	MPIR_Comm_needs_conversion(comm))) {
#if HAS_XDR
	/* MPIR_Mem_XDR_Init( src, ?, XDR_DECODE, &xdr_ctx ); */
	MPIR_Mem_XDR_Init( src, srcsize, XDR_DECODE, &xdr_ctx );
 	unpackctx    = (void *)&xdr_ctx;
	unpackcontig = MPIR_Type_XDR_decode;
#else
    return MPIR_ERROR( comm, MPI_ERR_TYPE, 
"Conversion requires XDR which is not available" );
#endif
    }
#endif
dest_len = 0;
err = MPIR_Unpack2( (char *)src, count, type, unpackcontig, unpackctx, 
		    (char *)dest, act_len, &dest_len );
*act_len = dest_len;
#ifdef HAS_XDR
if (unpackcontig == MPIR_Type_XDR_decode) 
    MPIR_Mem_XDR_Free( &xdr_ctx ); 
#endif
return err;
}

#ifdef MPID_HAS_HETERO
int 
MPIR_Type_convert_copy2(comm, dbuf, sbuf, type, count, dest, decode)
MPI_Comm     comm;
char         *dbuf, *sbuf;
MPI_Datatype type;
int          count, dest, *decode;
{
  int len, outlen, totlen;
  int (*packcontig)() = 0;
  void *packctx = 0;

  /* The encoding routines will take care of the copying */
  if ((MPID_Dest_byte_order(MPIR_tid) == MPID_H_XDR) ||
      (MPID_Dest_byte_order(dest) == MPID_H_XDR) ||
      (type == MPI_PACKED)) {
#ifdef HAS_XDR
    *decode = MPIR_MSGREP_XDR;
    packcontig = MPIR_Type_XDR_encode;
#else
    MPIR_ERROR( comm, MPI_ERR_TYPE, 
"Conversion requires XDR which is not available" );
#endif
  } else {
    *decode = MPIR_MSGREP_RECEIVER;
    packcontig = MPIR_Type_swap_copy;
  }
return MPIR_Pack2( sbuf, count, type, packcontig, packctx, dbuf, &outlen, &totlen );
}
#endif

/*+
    MPIR_Pack_size - Returns the exact amount of space needed to 
	                 pack a message (well, almost; returns
			 the space the will be enough)
+*/
int MPIR_Pack_size ( incount, type, comm, size )
int           incount;
MPI_Datatype  type;
MPI_Comm      comm;
int          *size;
{
int desttype = 0;
  /* Figure out size needed to pack type.  This uses the same logic as
     MPIR_Pack */
#ifdef MPID_HAS_HETERO
    if (MPID_IS_HETERO == 1 &&
	MPIR_Comm_needs_conversion(comm)) {
#if HAS_XDR
	desttype = 2;
#endif
    }
  (*size) = MPIR_Mem_convert_len( desttype, type, incount );
#else
  (*size) = type->size * incount;
#endif
return MPI_SUCCESS;
}

/* 
   Input Parameters:
   buf - Source of data
   count - number of items to pack
   type - MPI datatype of item
   packcontig - function to perform packing of contiguous data.  If null,
   use memcpy.
   packctx - context for packcontig
   
   Output parameters:
   dest - Destination buffer
   outlen - number of bytes used in dest (for each call)
   totlen - total number of bytes used in dest (cumulative)
   
   Returns:
   MPI error code

   Previous versions of this tried to maintain the source padding in the
   destination.  This is incompatible with XDR encoding, and isn't really 
   necessary.
 */
int MPIR_Pack2 ( buf, count, type, packcontig, packctx, dest, outlen, totlen )
char         *buf;
int          count;
MPI_Datatype type;
char         *dest;
int          (*packcontig)();
void         *packctx;
int          *outlen, *totlen;
{
  int i,j;
  int mpi_errno = MPI_SUCCESS;
  char *tmp_buf;
  int  len;
  int  myoutlen = 0;

  /* Pack contiguous data */
  if (type->is_contig) {
      len = type->size * count;
      if (buf == 0 && len > 0)
	  return MPI_ERR_BUFFER;
      if (!packcontig) {
	  memcpy( dest, buf, len );
	  *outlen = len;
	  *totlen += len;
	  return MPI_SUCCESS;
	  }
      else if (type->basic) {
	  len = (*packcontig)( dest, buf, type, count, packctx );
	  *outlen = len;
	  *totlen += len;
	  return MPI_SUCCESS;
	  }
      }

  /* For each of the count arguments, pack data */
  switch (type->dte_type) {

  /* Contiguous types */
  case MPIR_CONTIG:
	mpi_errno = 
	    MPIR_Pack2( buf, count * type->count, type->old_type, 
		        packcontig, packctx, dest, outlen, totlen );
	break;

  /* Vector types */
  case MPIR_VECTOR:
  case MPIR_HVECTOR:
	/* We want to be able to use the hvec copy here.... */
#ifdef MPID_HAS_HETERO
	if (!MPID_IS_HETERO) 
#endif
	    {
	    if (type->old_type->is_contig && !packcontig) {
		MPIR_Pack_Hvector( MPI_COMM_WORLD, buf, count, type, 
				   -1, dest );
	        *outlen = count * type->size;
	        *totlen += *outlen;
	        return MPI_SUCCESS;
		}
	    }
	tmp_buf = buf;
	for (i=0; i<count; i++) {
	  buf = tmp_buf;
	  for (j=0; j<type->count; j++) {
	      if (mpi_errno = MPIR_Pack2 ( buf, type->blocklen, 
					  type->old_type, packcontig, packctx,
					  dest, outlen, totlen )) break;
	      buf      += (type->stride);
	      dest     += *outlen;
	      myoutlen += *outlen;
	      }
	  tmp_buf += type->extent;
	  }
	*outlen = myoutlen;
	break;

  /* Indexed types */
  case MPIR_INDEXED:
  case MPIR_HINDEXED:
	for (i=0; i<count; i++) {
	    for (j=0;j<type->count; j++) {
		tmp_buf  = buf + type->indices[j];
		if (mpi_errno = MPIR_Pack2 (tmp_buf, type->blocklens[j], 
					    type->old_type, 
					    packcontig, packctx, 
					    dest, outlen, totlen)) break;
		dest	 += *outlen;
		myoutlen += *outlen;
	  }
	  buf += type->extent;
	}
	*outlen = myoutlen;
	break;

  /* Struct type */
  case MPIR_STRUCT:
	for (i=0; i<count; i++) {
	  for (j=0;j<type->count; j++) {
		tmp_buf  = buf + type->indices[j];
		if (mpi_errno = MPIR_Pack2(tmp_buf,type->blocklens[j],
					   type->old_types[j], 
					   packcontig, packctx, 
					   dest, outlen, totlen)) break;
		dest	 += *outlen;
		myoutlen += *outlen;
	  }
	  buf  += type->extent;
	}
	*outlen = myoutlen;
	break;

  default:
	mpi_errno = MPI_ERR_TYPE;
	break;
  }

  /* Everything fell through, must have been successful */
  return mpi_errno;
}

/*
   This code assumes that we can use char * pointers (previous code 
   incremented pointers by considering them integers, which is even 
   less portable).  Systems that, for example, use word-oriented pointers
   may want to use different code.

   This code is used in dmpi/dmpipk.c to unpack data from a device that
   only supports contiguous messages.

   Input Parameters:
   src - source buffer
   srclen - size of input buffer
   count,type - number of items of type to be read
   unpackcontig,unpackctx - routine to move data from src to dest.  If null,
        memcpy is used 
   dest - destination buffer
   
   Output Parameters:
   dest_len - Number of bytes written to dest.  
   used_len - Number of bytes consumed in src
 */
int MPIR_Unpack2 ( src, count, type, unpackcontig, unpackctx, dest, srclen, 
		   dest_len )
char         *src, *dest;
int          count, *srclen;
int          (*unpackcontig)();
void         *unpackctx;
MPI_Datatype type;
int          *dest_len;
{
  int i,j;
  int mpi_errno = MPI_SUCCESS;
  char *tmp_buf;
  int  len;
  int  mysrclen = 0;

  if (MPIR_TEST_IS_DATATYPE(MPI_COMM_WORLD,type))
	return MPIR_ERROR(MPI_COMM_WORLD, mpi_errno, 
			  "Internal Error in MPIR_UNPACK");

  /* Unpack contiguous data */
  if (type->is_contig) {
      if (!unpackcontig) {
	  len	     = type->size * count;
#ifdef FOO
	  /* If the length is greater than supplied, process only what is
	     available */
	  if (len > *srclen) len = *srclen;
	  else
#endif
	  *srclen    = len;
	  *dest_len += len;
	  if (len == 0) {
	      return mpi_errno;
	      }
	  if (dest == 0) 
	      return MPI_ERR_BUFFER;
	  memcpy ( dest, src, len );
	  return MPI_SUCCESS;
	  }
      else if (type->basic) {
	  /* This requires a basic type so that the size is correct */
	  /* Need to check the element size argument... */
	  *srclen = (*unpackcontig)( src, count, type, type->size, dest, 
				     unpackctx );
	  *dest_len += *srclen;
	  return MPI_SUCCESS;
	  }
      }

  /* For each of the count arguments, unpack data */
  switch (type->dte_type) {

  /* Contiguous types */
  case MPIR_CONTIG:
	mpi_errno = MPIR_Unpack2 ( src, count * type->count, type->old_type, 
				   unpackcontig, unpackctx, dest, srclen, 
				   dest_len  );
	break;

  /* Vector types */
  case MPIR_VECTOR:
  case MPIR_HVECTOR:
#ifdef MPID_HAS_HETERO
	if (!MPID_IS_HETERO) 
#endif
	    {
	    if (type->old_type->is_contig && !unpackcontig) {
		MPIR_UnPack_Hvector( src, count, type, -1, dest );
		*srclen	   = count * type->size;
		*dest_len += *srclen;
	        return MPI_SUCCESS;
		}
	    }
	tmp_buf = dest;
	for (i=0; i<count; i++) {
	  dest = tmp_buf;
	  for (j=0; j<type->count; j++) {
		if (mpi_errno = MPIR_Unpack2 (src, type->blocklen, 
					      type->old_type, 
					      unpackcontig, unpackctx, 
					      dest, srclen, dest_len )) 
		    return mpi_errno;
		dest	 += (type->stride);
		src	 += *srclen;
		mysrclen += *srclen;
	  }
	  tmp_buf += type->extent;
	}
	*srclen = mysrclen;
	break;

  /* Indexed types */
  case MPIR_INDEXED:
  case MPIR_HINDEXED:
	for (i=0; i<count; i++) {
	    for (j=0;j<type->count; j++) {
		tmp_buf  = dest + type->indices[j];
		if (mpi_errno = MPIR_Unpack2 (src, type->blocklens[j], 
					      type->old_type, 
					      unpackcontig, unpackctx,
					      tmp_buf, srclen, dest_len )) 
		    return mpi_errno;
		src	 += *srclen;
		mysrclen += *srclen;
		}
	    dest += type->extent;
	    }
	*srclen = mysrclen;
	break;

  /* Struct type */
  case MPIR_STRUCT:
	for (i=0; i<count; i++) {
	    /* printf( ".struct.[%d]\n", i ); */
	  for (j=0;j<type->count; j++) {
		tmp_buf  = dest + type->indices[j];
		if (mpi_errno = MPIR_Unpack2(src,type->blocklens[j],
					     type->old_types[j], 
					     unpackcontig, unpackctx, 
					     tmp_buf, srclen, dest_len )) {
		    /* printf( ".!error return %d\n", mpi_errno ); */
		    return mpi_errno;
		    }
		src	 += *srclen;
		mysrclen += *srclen;
	  }
	  dest += type->extent;
	}
	*srclen = mysrclen;
	break;

  default:
	mpi_errno = MPI_ERR_TYPE;
	break;
  }

  /* Everything fell through, must have been successful */
  return mpi_errno;
}

/*
   These routines allow a single thread to writeout the memory move operations
   that will be performed with a given MPI datatype.

   If one of the offests is 0, then we use a fake value.
 */
static FILE *datatype_fp = 0;
static char *i_offset, *o_offset;
static char i_dummy;

int MPIR_Printcontig( dest, src, datatype, num, ctx )
char         *dest, *src;
MPI_Datatype datatype;
int          num;
void         *ctx;
{
int len = datatype->size * num;

fprintf( datatype_fp, "Copy %x <- %x for %d bytes\n", 
	 dest-o_offset, src-i_offset, len );
return len;
}

int MPIR_Printcontig2( src, num, datatype, inbytes, dest, ctx )
char         *dest, *src;
MPI_Datatype datatype;
int          num, inbytes;
void         *ctx;
{
int len = datatype->size * num;

fprintf( datatype_fp, "Copy %x <- %x for %d bytes\n", 
	 dest-o_offset, src-i_offset, len );
return len;
}

int MPIR_PrintDatatypePack( fp, count, type, in_offset, out_offset )
FILE         *fp;
int          count;
MPI_Datatype type;
int          in_offset, out_offset;
{
int outlen, totlen;
char *src, *dest;

datatype_fp = fp ? fp : stdout;
i_offset = (char *)0;
o_offset = (char *)0;
src      = (char *)in_offset;
dest     = (char *)out_offset;
if (!in_offset) {
    i_offset = &i_dummy;
    src      = i_offset;
    }
if (!out_offset) {
    o_offset = &i_dummy;
    dest     = o_offset;
    }
MPIR_Pack2( src, count, type, MPIR_Printcontig, (void *)0, dest, 
	    &outlen, &totlen );
}

int MPIR_PrintDatatypeUnpack( fp, count, type, in_offset, out_offset )
FILE         *fp;
int          count;
MPI_Datatype type;
int          in_offset, out_offset;
{
int srclen, destlen;
char *src, *dest;

datatype_fp = fp ? fp : stdout;
i_offset = (char *)0;
o_offset = (char *)0;
src      = (char *)in_offset;
dest     = (char *)out_offset;
if (!in_offset) {
    i_offset = &i_dummy;
    src      = i_offset;
    }
if (!out_offset) {
    o_offset = &i_dummy;
    dest     = o_offset;
    }
MPIR_Unpack2( src, count, type, MPIR_Printcontig2, (void *)0, dest, 
	      &srclen, &destlen );
}
