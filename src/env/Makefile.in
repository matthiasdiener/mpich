#  (C) 1993 by Argonne National Laboratory and Mississipi State University.
#      All rights reserved.  See COPYRIGHT in top-level directory.
#

##### User configurable options #####

ARCH        = @ARCH@
DEVICE      = @DEVICE@
MPIR_HOME   = @MPIR_HOME@
PREFIX      = @PREFIX@
CC          = @CC@
F77         = @F77@
AR          = @AR@
RANLIB      = @RANLIB@
INCLUDE_DIR = @INCLUDE_PATH@ -I../../mpid/$(DEVICE) -I../../include
DEVICE      = @DEVICE@
OPTFLAGS    = @OPTFLAGS@

### End User configurable options ###

SHELL = /bin/sh

MPI_INCLUDE    = ../../include/mpi.h
DEVICE_LIB = 
CFLAGS = @CFLAGS@ $(OPTFLAGS) @OPTFLAGSC@ $(INCLUDE_DIR) -DMPI_$(ARCH) \
	$(MPIPROFILE)
FFLAGS = @FFLAGS@ $(OPTFLAGS) @OPTFLAGSF@
LIBS = ../../build/$(ARCH)/$(DEVICE)/lib/lib@MPILIBNAME@.a $(DEVICE_LIB)
MPI_FOBJECTS = farg.o initfcmn.o initfdte.o
MPI_COBJECTS = abort.o debugutil.o init.o initutil.o finalize.o initialize.o \
	errorstring.o fstrutils.o initdte.o \
	getpname.o errcreate.o errset.o errget.o errfree.o errclass.o \
	wtime.o wtick.o errmsg.o getversion.o msgqdllloc.o
MPI_FSOURCES = farg.f initfcmn.f initfdte.f
MPI_CSOURCES = abort.c debugutil.c init.c initutil.c \
	finalize.c fstrutils.c initialize.c errorstring.c initdte.c \
	getpname.c errcreate.c errset.c errget.c errfree.c errclass.c \
	wtime.c wtick.c errmsg.c getversion.c msgqdllloc.c
MPI_TSOURCES = errclass.c 
MPI_WSOURCES = abortf.c finalizef.c errclassf.c
MPI_WOBJECTS = initializef.o abortf.o initf.o finalizef.o errorstringf.o \
	getpnamef.o errcreatef.o errsetf.o errgetf.o errfreef.o errclassf.o \
	wtimef.o wtickf.o getversionf.o

MPI_SOURCES = $(MPI_CSOURCES) $(MPI_WSOURCES)
MPI_OBJECTS = $(MPI_COBJECTS) $(MPI_WOBJECTS)

default: setlinks ../../build/$(ARCH)/$(DEVICE)/lib/lib@MPILIBNAME@.a

profile: ../../build/$(ARCH)/$(DEVICE)/lib/libp@MPILIBNAME@.a

wrapperlib: $(MPI_WOBJECTS)
	$(AR) ../../build/$(ARCH)/$(DEVICE)/lib/libf@MPILIBNAME@.a $?	

# default_all is the same as default, but without the RANLIB.  This
# can speed up the build (ranlibs can take a LONG time).  profile_all 
# is the same, but for the profile library
default_all: setlinks default_objs
default_objs: $(MPI_OBJECTS) @MPI_FOBJECTS@ @MPE_MPI_EXT_O@
	$(AR) ../../build/$(ARCH)/$(DEVICE)/lib/lib@MPILIBNAME@.a $?
profile_all: $(MPI_OBJECTS) @MPI_FOBJECTS@
	$(AR) ../../build/$(ARCH)/$(DEVICE)/lib/libp@MPILIBNAME@.a $?

$(MPI_OBJECTS) :  $(MPI_INCLUDE)
$(MPI_FOBJECTS) :  $(MPI_INCLUDE)

# 
# This is needed for initutil.c
setlinks:
	if [ ! -s ../../include/mpeexten.h ] ; then \
	    (cd ../../include ; ln -s ../mpe/mpeexten.h mpeexten.h ) ; fi
	if [ ! -s mpehname.c ] ; then \
	    ln -s ../../mpe/mpehname.c mpehname.c ; fi
#	if [ ! -s dbxerr.c ] ; then \
#	    ln -s ../../mpe/dbxerr.c dbxerr.c ; fi
#wrappers:
#	-/bin/rm -f $(MPI_WSOURCES)
#	../../util/bfort -ferr -mpi -mnative -mapptr -ptrprefix MPIR_ \
#		-anyname -I pubinc $(MPI_TSOURCES)	

source_names:
	@echo $(MPI_CSOURCES)

#
# This gives -mpiversion the ability to echo the configuration arguments.
initutil.o: initutil.c
	$(CC) $(CFLAGS) -c -DCONFIGURE_ARGS_CLEAN='"@CONFIGURE_ARGS_CLEAN@"' \
	-DMPIRUN_MACHINE='"@DEFAULT_MACHINE@"' \
	-DMPIRUN_DEVICE='"@DEVICE@"' \
	initutil.c
#
# We should really put this entire directory AFTER src/infoexport; then we
# can test on the existance of the library.  
# We use PREFIX instead of MPIR_HOME so that the result of installing
# the MPI libraries will work
msgqdllloc.o: msgqdllloc.c
	if test -n "@SHAREDKIND_FOR_TV@" -a "@SHAREDKIND_FOR_TV@" != "ignore" ; then \
	  if test -n "@PREFIX@" ; then \
	      $(CC) $(CFLAGS) @CC_SHARED_OPT_FOR_TV@ -c \
	  -DMPICH_INFODLL_LOC='"@PREFIX@/build/$(ARCH)/$(DEVICE)/lib/libtvmpich.so"' \
		  msgqdllloc.c ; \
	  else \
	      $(CC) $(CFLAGS) -c @CC_SHARED_OPT_FOR_TV@ \
	  -DMPICH_INFODLL_LOC='"@MPIR_HOME@/build/$(ARCH)/$(DEVICE)/lib/libtvmpich.so"' \
		  msgqdllloc.c ; \
	  fi \
	else \
	    $(CC) $(CFLAGS) -c msgqdllloc.c ; \
	fi
.c.o:
	$(CC) $(CFLAGS) -c $*.c
.f.o:
	$(F77) $(FFLAGS) -c $*.f

# Always compile this with -g
# Warning: some systems might not support -g.  We'll deal with that when
# we have to.  We use the part of CFLAGS that does not include the
# optimization switches.
debugutil.o: debugutil.c
	$(CC) -g @CFLAGS@ $(INCLUDE_DIR) -DMPI_$(ARCH) $(MPIPROFILE) -c \
		debugutil.c

# GETNAME_DEFS are needed by mpehname.c; these need mpe includes
mpehname.o: mpehname.c
	$(CC) $(CFLAGS) @GETNAME_DEFS@ -c -I../../mpe mpehname.c 
# Note that we remove the link after we use it.
#dbxerr.o: dbxerr.c
#	$(CC) $(CFLAGS) @GETNAME_DEFS@ -c -I../../mpe dbxerr.c 
#	rm -f dbxerr.c
# errmsg needs to know about NLS definitions.
errmsg.o: errmsg.c
	$(CC) $(CFLAGS) @NLS_DEFS@ -c errmsg.c

../../build/$(ARCH)/$(DEVICE)/lib/lib@MPILIBNAME@.a: \
		$(MPI_OBJECTS) @MPI_FOBJECTS@ @MPE_MPI_EXT_O@
	$(AR) $@ $?
	$(RANLIB) $@

../../build/$(ARCH)/$(DEVICE)/lib/libp@MPILIBNAME@.a: $(MPI_OBJECTS) @MPI_FOBJECTS@
	$(AR) $@ $?
	$(RANLIB) $@
tstmsg:
	$(CC) $(CFLAGS) -DTEST_MSGS @NSL_DEFS@ -c errmsg.c
	@CLINKER@ -o errmsg errmsg.o \
		../../build/$(ARCH)/$(DEVICE)/lib/lib@MPILIBNAME@.a
	/bin/rm -f errmsg.o
clean:
	/bin/rm -f *.o *~ errmsg
