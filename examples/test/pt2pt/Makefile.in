ALL: default
##### User configurable options #####

ARCH        = @ARCH@
COMM        = @COMM@
BOPT        = @BOPT@
P4_DIR      = @P4_DIR@
TOOLS_DIR   = @TOOLS_DIR@
MPIR_HOME   = @MPIR_HOME@
CC          = @CC@
CLINKER     = @CLINKER@
CCC         = @CPP_COMPILER@
CCLINKER    = $(CCC)
F77         = @F77@
FLINKER     = @FLINKER@
AR          = @AR@
RANLIB      = @RANLIB@
PROFILING   = $(PMPILIB)
OPTFLAGS    = @OPTFLAGS@
LIB_PATH    = @LIB_PATH@
FLIB_PATH   = @FLIB_PATH@
LIB_LIST    = @LIB_LIST@
#
INCLUDE_DIR = @USER_INCLUDE_PATH@ -I$(MPIR_HOME)/include 
DEVICE      = @DEVICE@

### End User configurable options ###

SHELL = /bin/sh

PROFLIB =
CFLAGS  = @USER_CFLAGS@ $(OPTFLAGS) $(INCLUDE_DIR) -DMPI_$(ARCH)
CCFLAGS = $(CFLAGS)
FFLAGS = @FFLAGS@ $(OPTFLAGS)
MPILIB = $(MPIR_HOME)/lib/$(ARCH)/$(COMM)/libmpi.a 
MPIPPLIB = $(MPIR_HOME)/lib/$(ARCH)/$(COMM)/libmpi++.a
LIBS = $(LIB_PATH) $(PROFLIB) $(LIB_LIST)
FLIBS = $(FLIB_PATH) $(LIB_LIST)
LIBSPP = $(MPIPPLIB) $(LIBS)
EXECS = overtake sendrecv isndrcv third fourth fifth sixth hvectest \
	hvectest2 probe probe1 testtest1 testtypes ssendtest typetest\
	dtypelife issendtest relrank inull typeub irecvtest htmsg \
	isendtest self sendrecv2 sendrecv3 sendrecv4 persistent waitall \
	pack bsendtest
default: $(EXECS)

#
# Note that runtests builds the executables as required
testing: $(MPIR_HOME)/util/mpirun
	  -./runtests $(TESTARGS)

linktest: overtake secondf clean

all: testing

fortran_tests: secondf allpair allpair2 structf

overtake: overtake.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o overtake overtake.o test.o $(LIBS)

bsendtest: bsendtest.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o bsendtest bsendtest.o test.o $(LIBS)

relrank: relrank.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o relrank relrank.o test.o $(LIBS)

sendrecv: sendrecv.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o sendrecv sendrecv.o test.o $(LIBS)

persistent: persistent.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o persistent persistent.o $(LIBS)

sendrecv2: sendrecv2.o dtypes.o gcomm.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o sendrecv2 sendrecv2.o dtypes.o gcomm.o \
		 $(LIBS)

sendrecv3: sendrecv3.o dtypes.o gcomm.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o sendrecv3 sendrecv3.o dtypes.o gcomm.o \
		 $(LIBS)

sendrecv4: sendrecv4.o dtypes.o gcomm.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o sendrecv4 sendrecv4.o dtypes.o gcomm.o \
		 $(LIBS)

self: self.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o self self.o test.o $(LIBS)

typeub: typeub.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o typeub typeub.o $(LIBS)

isndrcv: isndrcv.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o isndrcv isndrcv.o test.o $(LIBS)

inull: inull.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o inull inull.o test.o $(LIBS)

typetest: typetest.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o typetest typetest.o test.o $(LIBS)

ssendtest: ssendtest.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o ssendtest ssendtest.o test.o $(LIBS)

issendtest: issendtest.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o issendtest issendtest.o test.o $(LIBS)

testtypes: testtypes.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o testtypes testtypes.o test.o $(LIBS)

dtypelife: dtypelife.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o dtypelife dtypelife.o test.o $(LIBS)

htmsg: htmsg.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o htmsg htmsg.o $(LIBS)

isendtest: isendtest.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o isendtest isendtest.o $(LIBS)

third: third.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o third third.o test.o $(LIBS)

fourth: fourth.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o fourth fourth.o test.o $(LIBS)

fifth: fifth.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o fifth fifth.o test.o $(LIBS)

sixth: sixth.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o sixth sixth.o test.o $(LIBS)

probe: probe.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o probe probe.o test.o $(LIBS)

nblock: nblock.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o nblock nblock.o $(LIBS)

pack: pack.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o pack pack.o $(LIBS)

probe1: probe1.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o probe1 probe1.o test.o $(LIBS)

testtest1: testtest1.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o testtest1 testtest1.o test.o $(LIBS)

hvectest: hvectest.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o hvectest hvectest.o test.o $(LIBS)

hvectest2: hvectest2.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o hvectest2 hvectest2.o test.o $(LIBS)

irecvtest: irecvtest.o test.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o irecvtest irecvtest.o test.o $(LIBS)

nbtest: nbtest.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o nbtest nbtest.o $(LIBS)

waitall: waitall.o $(MPILIB)
	$(CLINKER) $(OPTFLAGS) -o waitall waitall.o $(LIBS)

secondf: mpif.h secondf.o
	$(FLINKER) $(OPTFLAGS) -o secondf secondf.o $(FLIBS)
allpair: mpif.h allpair.o
	$(FLINKER) $(OPTFLAGS) -o allpair allpair.o $(FLIBS)
allpair2: mpif.h allpair2.o
	$(FLINKER) $(OPTFLAGS) -o allpair2 allpair2.o $(FLIBS)
structf: mpif.h structf.o
	$(FLINKER) $(OPTFLAGS) -o structf structf.o $(FLIBS)

#
# Some systems have no test for a symbolic link and return false for
# a link that exists
mpif.h: $(MPIR_HOME)/include/mpif.h
	if test \! -f mpif.h ; then \
	    /bin/rm -f mpif.h ; \
	    ln -s $(MPIR_HOME)/include/mpif.h . ; \
	fi

#
# Make sure that we remove executables for specific architectures
clean:
	/bin/rm -f *.o *~ PI* $(EXECS) *.out secondf allpair core systest \
		systest1 allpair2 bsendtest pt2pt.diff nbtest nblock \
	        structf
	for file in $(EXECS) Makefile ; do \
	   /bin/rm -f $$file.sun4 $$file.alpha $$file.IRIX $$file.freebsd ;\
	done

.c.o:
	$(CC) $(CFLAGS) -c $*.c
.f.o:
	$(F77) $(FFLAGS) -c $*.f

$(MPIR_HOME)/util/mpirun:
	(cd $(MPIR_HOME) ; make mpirun )
