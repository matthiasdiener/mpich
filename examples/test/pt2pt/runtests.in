#! /bin/sh
#
# Run some of the tests.  If any arguments are provided, pass them to the
# test programs.
#
# -mvhome is needed for the ANL SP, and is ignored by others
args="-pg -mvhome"
#
# If the programs are not available, run make.
runtests=1
makeeach=0
for arg in "$@" ; do
    case $arg in 
	-checkonly)
	runtests=0
	;;
        -margs=*)
	margs=`echo $arg | sed 's/-margs=//'`
	args="$args $margs"
	;;
	-echo)
	set -x
	;;
	-small)
	makeeach=1
	;;
	-help|-u)
	echo "runtests [-checkonly] [-margs='...']"
	echo "run tests in this directory.  If -checkonly set, just run"
	echo "the differences check (do NO rerun the test programs)."
	echo "If -margs is used, these options are passed to mpirun."
	echo "If -small is used, the examples are built, run, and deleted."
	exit 1
	;;
	*)
	if test -n "$arg" ; then
	    echo "Passing remaining arguments to programs ($*)"
	    break
        fi
	;;
    esac
done

MakeExe() {
    if [ ! -x $1 ] ; then
	make $1
    fi
}
CleanExe() {
    if [ $makeeach = 1 ] ; then
	/bin/rm -f $1 $1.o
    fi
}

# If the programs are not available, run make.
if [ ! -x sendrecv -a $makeeach = 0 ] ; then
    make default
fi

testfiles=""
if [ $runtests = 1 ] ; then
echo '**** Testing MPI Point-to-point routines ****'

testfiles="$testfiles sendrecv.out"
/bin/rm -f sendrecv.out
MakeExe sendrecv
echo '**** Testing MPI_Send and MPI_Recv ****' >> sendrecv.out
echo '**** Testing MPI_Send and MPI_Recv ****' 
/bin/rm -f sendrecv-[012].out
mpirun $args -np 2 -mvback "sendrecv-0.out sendrecv-1.out" sendrecv "$@" >> sendrecv-2.out 2>&1
cat sendrecv-[012].out >> sendrecv.out
/bin/rm -f sendrecv-[012].out
echo '**** Testing MPI_Send and MPI_Recv ****' >> sendrecv.out
CleanExe sendrecv
#
testfiles="$testfiles sendrecv2.out"
/bin/rm -f sendrecv2.out
MakeExe sendrecv2
echo '**** Testing MPI_Send and MPI_Recv (2) ****' >> sendrecv2.out
echo '**** Testing MPI_Send and MPI_Recv (2) ****' 
mpirun $args -np 2 sendrecv2 "$@" >> sendrecv2.out 2>&1
echo '**** Testing MPI_Send and MPI_Recv (2) ****' >> sendrecv2.out
CleanExe sendrecv2
#
testfiles="$testfiles sendrecv3.out"
/bin/rm -f sendrecv3.out
MakeExe sendrecv3
echo '**** Testing MPI_Send and MPI_Recv (3) ****' >> sendrecv3.out
echo '**** Testing MPI_Send and MPI_Recv (3) ****' 
mpirun $args -np 2 sendrecv3 "$@" >> sendrecv3.out 2>&1
echo '**** Testing MPI_Send and MPI_Recv (3) ****' >> sendrecv3.out
CleanExe sendrecv3
#
testfiles="$testfiles sendrecv4.out"
/bin/rm -f sendrecv4.out
MakeExe sendrecv4
echo '**** Testing MPI_Send and MPI_Recv (4) ****' >> sendrecv4.out
echo '**** Testing MPI_Send and MPI_Recv (4) ****' 
mpirun $args -np 2 sendrecv4 "$@" >> sendrecv4.out 2>&1
echo '**** Testing MPI_Send and MPI_Recv (4) ****' >> sendrecv4.out
CleanExe sendrecv4
#
testfiles="$testfiles isndrcv.out"
/bin/rm -f isndrcv.out
MakeExe isndrcv
echo '**** Testing MPI_Isend and MPI_Irecv ****'
echo '**** Testing MPI_Isend and MPI_Irecv ****' >> isndrcv.out
/bin/rm -f isndrcv-[012].out
mpirun $args -np 2 -mvback "isndrcv-0.out isndrcv-1.out" isndrcv "$@" > isndrcv-2.out 2>&1 
cat isndrcv-[012].out >> isndrcv.out
/bin/rm -f isndrcv-[012].out
echo '**** Testing MPI_Isend and MPI_Irecv ****' >> isndrcv.out
CleanExe isndrcv
#
testfiles="$testfiles overtake.out"
/bin/rm -f overtake.out
MakeExe overtake
echo '**** Verifying that messages are non-overtaking ****'
echo '**** Verifying that messages are non-overtaking ****' >> overtake.out
/bin/rm -f overtake-[01].out
mpirun $args -np 2 -mvback "overtake-0.out overtake-1.out" overtake "$@" >> overtake.out 2>&1
cat overtake-[01].out >> overtake.out
/bin/rm -f overtake-[01].out
echo '**** Verifying that messages are non-overtaking ****' >> overtake.out
CleanExe overtake
#
testfiles="$testfiles ssendtest.out"
/bin/rm -f ssendtest.out
MakeExe ssendtest
echo '**** Verifying ssend ****'
echo '**** Verifying ssend ****' >> ssendtest.out
mpirun $args -np 2 ssendtest "$@" >> ssendtest.out 2>&1
echo '**** Verifying ssend ****' >> ssendtest.out
CleanExe ssendtest
#
testfiles="$testfiles typetest.out"
/bin/rm -f typetest.out
MakeExe typetest
echo '**** Checking the type routines ****'
echo '**** Checking the type routines ****' >> typetest.out
/bin/rm -f typetest-[01].out
mpirun $args -np 2 -mvback typetest-0.out typetest "$@" >> typetest.out 2>&1
cat typetest-0.out >> typetest.out
/bin/rm -f typetest-[01].out
echo '**** Checking the type routines ****' >> typetest.out
CleanExe typetest
#
testfiles="$testfiles typeub.out"
/bin/rm -f typeub.out
MakeExe typeub
echo '**** Checking the type routines: MPI_UB ****'
echo '**** Checking the type routines: MPI_UB ****' >> typeub.out
mpirun $args -np 2 typeub "$@" >> typeub.out 2>&1
echo '**** Checking the type routines: MPI_UB ****' >> typeub.out
CleanExe typeub
#
testfiles="$testfiles third.out"
/bin/rm -f third.out
MakeExe third
echo '*** Testing Unexpected messages ***'
echo '*** Testing Unexpected messages ***' >> third.out
mpirun $args -np 2 third "$@" >> pt2pt.out >> third.out 2>&1
echo '*** Testing Unexpected messages ***' >> third.out
CleanExe third
#
testfiles="$testfiles fourth.out"
/bin/rm -f fourth.out
MakeExe fourth
echo '*** Testing Irecv/Isend/Wait ***'
echo '*** Testing Irecv/Isend/Wait ***' >> fourth.out
mpirun $args -np 4 fourth "$@" >> fourth.out 2>&1
echo '*** Testing Irecv/Isend/Wait ***' >> fourth.out
CleanExe fourth
#
testfiles="$testfiles fifth.out"
/bin/rm -f fifth.out
MakeExe fifth
echo '*** Testing Irecv/Isend/Waitall ***'
echo '*** Testing Irecv/Isend/Waitall ***' >> fifth.out
mpirun $args -np 4 fifth "$@" >> fifth.out 2>&1
echo '*** Testing Irecv/Isend/Waitall ***' >> fifth.out
CleanExe fifth
#
testfiles="$testfiles sixth.out"
/bin/rm -f sixth.out
MakeExe sixth
echo '*** Testing attribute manipulation ***'
echo '*** Testing attribute manipulation ***' >> sixth.out
mpirun $args -np 2 sixth "$@" >> sixth.out 2>&1
echo '*** Testing attribute manipulation ***' >> sixth.out
CleanExe sixth
#
testfiles="$testfiles hvectest.out"
/bin/rm -f hvectest.out
MakeExe hvectest
echo '*** Testing Vector type ***'
echo '*** Testing Vector type ***' >> hvectest.out
mpirun $args -np 2 hvectest "$@" >> hvectest.out 2>&1
echo '*** Testing Vector type ***' >> hvectest.out
CleanExe hvectest
#
testfiles="$testfiles hvectest2.out"
/bin/rm -f hvectest2.out
MakeExe hvectest2
echo '*** Testing struct type for vectors (MPI_UB) ***'
echo '*** Testing struct type for vectors (MPI_UB) ***' >> hvectest2.out
mpirun $args -np 2 hvectest2 "$@" >> hvectest2.out 2>&1
echo '*** Testing struct type for vectors (MPI_UB) ***' >> hvectest2.out
CleanExe hvectest2
#
testfiles="$testfiles probe.out"
/bin/rm -f probe.out
MakeExe probe
echo '*** Testing Probe and Get_count ***'
echo '*** Testing Probe and Get_count ***' >> probe.out
mpirun $args -np 2 probe "$@" >> probe.out 2>&1
echo '*** Testing Probe and Get_count ***' >> probe.out
CleanExe probe
#
testfiles="$testfiles probe1.out"
/bin/rm -f probe1.out
MakeExe probe1
echo '*** Testing Iprobe and Get_count ***'
echo '*** Testing Iprobe and Get_count ***' >> probe1.out
mpirun $args -np 2 probe1 "$@" >> probe1.out 2>&1
echo '*** Testing Iprobe and Get_count ***' >> probe1.out
CleanExe probe1
#
testfiles="$testfiles self.out"
/bin/rm -f self.out
MakeExe self
echo '*** Testing send to self ***' 
echo '*** Testing send to self ***' >> self.out
mpirun $args -np 1 self "$@" >> self.out 2>&1
echo '*** Testing send to self  ***' >> self.out
CleanExe self
#
#
testfiles="$testfiles testtest1.out"
/bin/rm -f testtest1.out
MakeExe testtest1
echo '*** Testing MPI_Test ***' 
echo '*** Testing MPI_Test ***' >> testtest1.out
mpirun $args -np 2 testtest1 "$@" >> testtest1.out 2>&1
echo '*** Testing MPI_Test ***' >> testtest1.out
CleanExe testtest1
#
testfiles="$testfiles persistent.out"
/bin/rm -f persistent.out
MakeExe persistent
echo '*** Testing MPI_Recv_init ***' 
echo '*** Testing MPI_Recv_init ***' >> persistent.out
mpirun $args -np 4 persistent "$@" >> persistent.out 2>&1
echo '*** Testing MPI_Recv_init ***' >> persistent.out
CleanExe persistent
#
testfiles="$testfiles waitall.out"
/bin/rm -f waitall.out
MakeExe waitall
echo '*** Testing MPI_Waitall ***' 
echo '*** Testing MPI_Waitall ***' >> waitall.out
mpirun $args -np 4 waitall "$@" >> waitall.out 2>&1
echo '*** Testing MPI_Waitall ***' >> waitall.out
CleanExe waitall
#
# Run Fortran tests ONLY if Fortran available
if [ @HAS_FORTRAN@ = 1 ] ; then 
    echo "FORTRAN TESTS"
    #
    #echo "*** secondf ***" >> pt2pt.out
    #mpirun $args -np 2 secondf "$@" >> pt2pt.out 2>&1
    #
    testfiles="$testfiles allpair.out"
    /bin/rm -f allpair.out
    MakeExe allpair
    echo '*** Testing pt-2-pt from Fortran ***'
    echo '*** Testing pt-2-pt from Fortran ***' >> allpair.out
    mpirun $args -np 2 allpair "$@" >> allpair.out 2>&1
    echo '*** Testing pt-2-pt from Fortran ***' >> allpair.out
    CleanExe allpair
    #
    testfiles="$testfiles allpair2.out"
    /bin/rm -f allpair2.out
    MakeExe allpair2
    echo '*** Testing pt-2-pt from Fortran (many calls) ***'
    echo '*** Testing pt-2-pt from Fortran  (many calls) ***' >> allpair2.out
    mpirun $args -np 2 allpair2 "$@" >> allpair2.out 2>&1
    echo '*** Testing pt-2-pt from Fortran  (many calls) ***' >> allpair2.out
    CleanExe allpair2
    echo "END OF FORTRAN TESTS"
fi
#
else
    # Just run checks
    testfiles=`echo *.out`
    if test "$testfiles" = "*.out" ; then
	echo "No output files remain from previous test!"
	exit 1
    fi
fi
#
echo '*** Differences from expected output ***'
/bin/rm -f pt2pt.diff
for file in $testfiles ; do
    stdfile=`basename $file .out`.std
    # if basename is sendrecv or isndrcv, then we may want to test 
    # with .std2 as well.  We should really separate out the long double
    # tests ...
    if [ -s $stdfile ] ; then
	stdfile2=${stdfile}2
        if diff -b $file $stdfile > /dev/null ; then
	    true
	elif [ -s $stdfile2 ] ; then 
	    # check for alternate in case configuration has fewer datatypes
	    if diff -b $file $stdfile2 > /dev/null ; then
	        true
            else
	        echo "Differences in `basename $file .out`" >> pt2pt.diff
	        diff -b $file $stdfile >> pt2pt.diff
	    fi
        else
	    echo "Differences in `basename $file .out`" >> pt2pt.diff
	    diff -b $file $stdfile >> pt2pt.diff
	fi
    else
        echo "Can not find file $stdfile to compare against for test `basename $file .out`"
    fi
done
if [ -s pt2pt.diff ] ; then
   cat pt2pt.diff
fi
exit 0
