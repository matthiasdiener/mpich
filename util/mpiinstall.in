#! /bin/sh
#
# This is a script to install mpi.  It can be called from the top-level 
# Makefile or directly.  Note that this script needs to be built by configure.
#
# As the install takes place, it keeps a list of files that were installed
# in a form that allows their easy removal
#
# Bug: If there is an error before the install is finished, the mpiuninstall
# file will not contain the directories to remove.
# Possible fix: add a routine that appends these to the uninstall file
# that can be called before any exit
#
# *CHANGE*
# In previous versions, files were not overwritten.  This caused mysterious
# problems for users that did a reinstall over a damaged or incorrect 
# installation (for example, installing a correction produced by a patch).
# The previous behavior is available with the -noreplace option
CPP_DIR=@CPP_DIR@
buildcpp=@buildcpp@
CPPFLAGS="@CPPFLAGS@"
CCFLAGS="@CCFLAGS@"
ARCH=@ARCH@
COMM=@COMM@
PREFIX=@PREFIX@
DEVICE=@DEVICE@
CPRP="@CPRP@"
MAKE="@MAKE@"
RSHCOMMAND="@RSHCOMMAND@"
DEFAULT_MACHINE=@DEFAULT_MACHINE@
# File access mode
MODE=0664
XMODE=0775
# Uninstall filename
UNINSTALLFILE="util/mpiuninstall"
replace=1
# If we're doing -libonly, we may want a different file....
#
# dirlist is used to uninstall empty directories at the end
dirlist=""
#
inlib=0
#
errs=0
#
# set failmode to soft to let failures accumulate
failmode="hard"
# chmod can fail for various reasons.  Let it?
chmodfailmode="hard"
Show=eval
# set verbose to 0 to suppress success output
verbose=0
just_testing=0
for arg in "$@" ; do
    case "$arg" in 
	-echo) set -x ;;
	-mode=*) MODE=`echo $arg | sed -e 's/-mode=//g'` ;;
	-xmode=*)XMODE=`echo $arg | sed -e 's/-xmode=//g'` ;;
	-prefix=*)PREFIX=`echo $arg | sed -e 's/-prefix=//g'` ;;
	-aprefix=*)APREFIX=`echo $arg | sed -e 's/-aprefix=//g'` ;;
	-nonupshot)nonupshot=1 ;;
	-noreplace|-no_replace) replace=0 ;;
	-replace) replace=1 ;;
	-cpnupshot)cpnupshot=1 ;;
	-noman) noman=1 ;;
	-device=*) DEVICE=`echo A$arg | sed -e 's/A-device=//g'` 
	           COMM=$DEVICE ;;
	-manpath=*)MPIMANPATH=`echo $arg | sed -e 's/-manpath=//g'` ;;
	-libonly) libonly=1 ;;
	# -inlib is a private option
	-inlib) inlib=1 ;;
	#-arch=*)  ARCH=`echo A$arg | sed -e 's/A-arch=//g'` ;;
        -no_verbose|-noverbose)  verbose=0 ;;
	-verbose)                verbose=1 ;;
	-soft) failmode="soft" ; chmodfailmode="soft" ;;
	-hard) failmode="hard" ; chmodfailmode="hard" ;;
	-softchmod) chmodfailmode="soft" ;;
	-t) Show=echo
	    just_testing=1
	    failmode="soft"
	    ;;
	-help|-u|-usage|-h)
cat <<EOF
Install MPICH into $PREFIX.
-mode=nnnn   - mode for regular files.  Default is $MODE .
-xmode=nnnn  - mode for execuables and directories.  Default is $XMODE .
-prefix=path - Destination directory.
-aprefix=path- Path to use in sample files.  Default is same
               as prefix.
-t           - Try only; do no installation.
-libonly     - Install only the libraries; this is 
               appropriate for installing a second device.
-manpath=path- Set an alternate path for the man pages
-noman       - Do not install the man pages.
-nonupshot   - Do not try to build or install nupshot.
-cpnupshot   - Do not build nupshot; install the one in
               profiling/nupshot - WARNING - read the 
               installation manual first!
-device=name - Select a different device type to install
-noreplace   - Do not replace files that are found in the
               installation directory
-soft        - Do not abort on failure
-softchmod   - Do not abort on failure of chmod
EOF
	exit 1
	;;
	*)
	echo "Unrecognized argument $arg ."
	exit 1
	;;
    esac
done
if [ -z "$APREFIX" ] ; then
    APREFIX=$PREFIX
fi
#
# If libonly, we need to get the correct default machine etc.  We could 
# get this from the config.status for the device, but the problem is that
# there are MANY items to restore.  A better approach is to use an install
# script from the library directory itself.
if [ -n "$libonly" ] ; then
#   trialname=`sed -n -e "s/DEFAULT_MACHINE='\(.*\)'/\1/p" \
#	lib/$ARCH/$COMM/config.status`
#   if [ -n "$trialname" ] ; then 
#	DEFAULT_MACHINE="$trialname"
#   fi
    if [ $inlib = 0 -a -x lib/$ARCH/$COMM/mpiinstall ] ; then
        ./lib/$ARCH/$COMM/mpiinstall -inlib "$@"
        exit $?
    fi
fi
#
# Update some fields that contain the build root directory
# These work by extracting the syntax for specifying the library, and then
# adding the correct destination to it.
NFLIB_PATH=`echo "@FLIB_PATH@" | \
	sed -e "s%^\([^/ ]*\)/[^ ]*%\1$PREFIX/lib/$ARCH/$COMM%g"`
NF90LIB_PATH=`echo "@F90LIB_PATH@" | \
	sed -e "s%^\([^/ ]*\)/[^ ]*%\1$PREFIX/lib/$ARCH/$COMM%g"`
NF90INC=`echo "@F90INC@" | \
	sed -e "s%^\([^/ ]*\)/[^ ]*%\1$PREFIX/include%g"`
# This one is especially tricky because the default include path goes to the
# source directory for the C++ interface
NCPPFLAGS=`echo "A$CPPFLAGS" | \
    sed -e "s%-I.*/MPI-2-C++/src%-I$PREFIX/lib/$ARCH/$COMM/c++%g" \
        -e "s/^A//g"`
#
# Remove old uninstall file
/bin/rm -f $UNINSTALLFILE
cat > $UNINSTALLFILE <<EOF
#! /bin/sh
set -x
EOF
chmod +x $UNINSTALLFILE
#
#
# We could use install, but install is too different and too hard to 
# test.  So here are the routines to copy file, make directories, and 
# replace #...# and @...@ in files
CP=cp
#
CopyFile() {
if [ -z "$3" ] ; then
    mode=$MODE
else
    mode=$3
fi
if [ -d $2 ] ; then
    dest=$2/`basename $1`
else
    dest=$2
fi
if [ $replace = 0 -a -f $dest ] ; then
    if [ $verbose = 1 ] ; then echo "$dest exists; not changed" ; fi
elif [ -d $1 ] ; then
    echo ">>> $1 is a directory; not copied <<<"
    errs=`expr $errs + 1`
    if [ $failmode = "hard" ] ; then exit 1 ; fi
elif [ ! -f $1 ] ; then 
    echo "**File $1 does not exist (or is not a regular file)!"
    errs=`expr $errs + 1`
    if [ $failmode = "hard" ] ; then exit 1 ; fi
else
    if [ $verbose = 1 ] ; then echo "Copying $1 to $dest" ; fi
    if [ -f $dest ] ; then $Show /bin/rm -f $dest ; fi
    $Show $CP $1 $dest
    rc=$?
    if [ $rc != 0 ] ; then
	echo "**Error copying file $1 to $dest **"
        errs=`expr $errs + 1`
        if [ $failmode = "hard" ] ; then exit $rc ; fi
    else
	echo "/bin/rm -f $dest" >> $UNINSTALLFILE
    fi
    $Show chmod $mode $dest
    rc=$?
    if [ $rc != 0 ] ; then
	echo "**Error setting mode on file $dest**"
        errs=`expr $errs + 1`
        if [ $chmodefailmode = "hard" ] ; then exit $rc ; fi
    fi
fi
}

#
# A version of copy file that preserves file dates
CopyFileP() {
    CP="$CPRP -p"
    CopyFile $1 $2 $3
    CP=cp
}

MkDir() {
if [ ! -d $1 ] ; then
    # Eventually, we should implement mkdir -p by doing something like
    #IFS=/
    #base=""
    #for dir in $1 ; do
    #    base="$base/$dir"
    #    if [ ! -d $base ] ; then 
    #        $Show mkdir $base
    #        rc=$?
    #        same test code as below
    #    fi
    #done
    if [ $verbose = 1 ] ; then echo "Creating directory $1" ; fi
#    if [ $Show = "eval" ] ; then 
#        # try -p (should we try -p if regular mkdir fails?)
#        mkdir -p $1
#        rc=$?
#        if [ $rc != 0 ] ; then
#	    mkdir $1
#	    rc=$?
#        fi
#    fi
    $Show mkdir $1
    rc=$?
    if [ $rc != 0 ] ; then
	echo "**Error making directory $1**"
        errs=`expr $errs + 1`
        if [ $failmode = "hard" ] ; then exit $rc ; fi
    else
	# Note that we store in inverse order
	dirlist="$1 $dirlist"
    fi
    $Show chmod $XMODE $1
    rc=$?
    if [ $rc != 0 ] ; then
	echo "**Error setting mode on directory $1**"
        errs=`expr $errs + 1`
        if [ $chmodfailmode = "hard" ] ; then exit $rc ; fi
    fi
fi
}
#
# Fixup files that need #...# replaced
#
FixupFile() {
if [ -d $2 ] ; then
    dest=$2/`basename $1`
else
    dest=$2
fi
if [ $replace = 0 -a -f $dest ] ; then
    if [ $verbose = 1 ] ; then echo "$dest exists; not changed" ; fi
elif [ -d $1 ] ; then
    echo "$1 is a directory; not copied"
else
    if [ -f $dest ] ; then $Show /bin/rm -f $dest ; fi
    if [ $just_testing = 0 ] ; then
        sed \
	-e "s%\#ARCH\#%$ARCH%g" \
	-e "s%\#AUTOMOUNTFIX\#%@AUTOMOUNTFIX@%g" \
        -e "s%\#BITMAP_DIR\#%$PREFIX/lib/bitmaps%g" \
	-e "s%\#CC\#%@CC@%g" \
	-e "s%\#CFLAGS\#%@CFLAGS@%g" \
	-e "s%\#USER_CFLAGS\#%@USER_CFLAGS@%g" \
	-e "s%\#CLINKER\#%@CLINKER@%g" \
	-e "s%\#COMM\#%$COMM%g" \
	-e "s%\#DEFAULT_ARCH\#%$ARCH%g" \
	-e "s%\#DEFAULT_DEVICE\#%$DEVICE%g" \
	-e "s%\#DEFAULT_MACHINE\#%$DEFAULT_MACHINE%g" \
       	-e "s%\#EXECER_DIR\#%$PREFIX/util%g" \
	-e "s%\#F77\#%@F77@%g" \
	-e "s%\#FFLAGS\#%@FFLAGS@%g" \
	-e "s%\#FLIB_PATH_LEADER\#%@FLIB_PATH_LEADER@%g" \
	-e "s%\#FLIB_LIST\#%@FLIB_LIST@%g" \
	-e "s%\#FLINKER\#%@FLINKER@%g" \
	-e "s%\#F90\#%@F90@%g" \
	-e "s%\#F90FLAGS\#%@F90FLAGS@%g" \
	-e "s%\#F90LIB_PATH_LEADER\#%@F90LIB_PATH_LEADER@%g" \
	-e "s%\#F90LIB_PATH\#%$NF90LIB_PATH%g" \
	-e "s%\#F90LINKER\#%@F90LINKER@%g" \
	-e "s%\#INCLUDE_PATH\#%@INCLUDE_PATH@%g" \
	-e "s%\#INSTALL_DIR\#%$PREFIX%g" \
	-e "s%\#LIB_LIST\#%@LIB_LIST@%g" \
	-e "s%\#MPIRUN_BIN\#%lib/$ARCH/$COMM%g" \
        -e "s%\#MPIR_HOME\#%$PREFIX%g" \
	-e "s%\#OPTFLAGS\#%@OPTFLAGS@%g" \
	-e "s%\#PREFIX\#%$PREFIX%g" \
	-e "s%\#RSHCOMMAND\#%$RSHCOMMAND%g" \
	-e "s%\#SYNCLOC\#%@SYNCLOC@%g" \
	-e "s%\#TK_VERSION\#%@TK_VERSION@%g" \
	-e "s%\#MPILIBNAME\#%@MPILIBNAME@%g" \
	-e "s%\#wishloc\#%@wishloc@%g" \
	$1 > $dest
        rc=$?
        if [ $rc != 0 ] ; then
	    echo "**Error fixing up file $dest**"
            errs=`expr $errs + 1`
            if [ $failmode = "hard" ] ; then exit $rc ; fi
        else
	    echo "/bin/rm -f $dest" >> $UNINSTALLFILE
        fi
    else
	if [ $verbose = 1 ] ; then echo "Fixup $1.in and copy to $dest" ; fi
    fi
fi
if [ -z "$3" ] ; then
    mode=$MODE
else
    mode=$3
fi
$Show chmod $mode $2
rc=$?
if [ $rc != 0 ] ; then
    echo "**Error setting mode on file $2**"
    errs=`expr $errs + 1`
    if [ $failmode = "hard" ] ; then exit $rc ; fi
fi
}

#
# This is a version of FixupFile that handles @...@ instead of #...#.
# This is a little trickier, since this file itself is processed by
# with @...@ replacements.  We take advantage of the fact that [char] 
# matches the same things as char.
# This has a few more fields than FixupFile
#
FixupFileWithAt() {
    # Change the FIRST libpath to the new form.  This allows 
    # the LIB_PATH to contain multiple names, as long as the MPICH libpath
    # is first
    NLIBPATH=`echo "@LIB_PATH@" | \
	sed -e "s%^\([^/ ]*\)/[^ ]*%\1$PREFIX/lib/$ARCH/$COMM%g"`
if [ -d $2 ] ; then
    dest=$2/`basename $1`
else
    dest=$2
fi
if [ $replace = 0 -a -f $dest ] ; then
    if [ $verbose = 1 ] ; then echo "$dest exists; not changed" ; fi
elif [ -d $1 ] ; then
    echo "$1 is a directory; not copied"
else
    if [ -f $dest ] ; then $Show /bin/rm -f $dest ; fi
    if [ $just_testing = 0 ] ; then
        sed \
	-e "s%[@]ARCH[@]%$ARCH%g" \
	-e "s%[@]AUTOMOUNTFIX[@]%@AUTOMOUNTFIX@%g" \
	-e "s%[@]FINC[@]%$NFINC%g" \
	-e "s%[@]F90INC[@]%$NF90INC%g" \
        -e "s%[@]BITMAP_DIR[@]%$PREFIX/lib/bitmaps%g" \
	-e "s%[@]CC[@]%@CC@%g" \
	-e "s%[@]CCC[@]%@CCC@%g" \
	-e "s%[@]CPP_COMPILER[@]%@CPP_COMPILER@%g" \
	-e "s%[@]CFLAGS[@]%@CFLAGS@%g" \
	-e "s%[@]CCFLAGS[@]%$CCFLAGS%g" \
	-e "s%[@]CPPFLAGS[@]%$NCPPFLAGS%g" \
	-e "s%[@]LDFLAGS[@]%$LDFLAGS%g" \
	-e "s%[@]USER_CFLAGS[@]%@USER_CFLAGS@%g" \
	-e "s%[@]CLINKER[@]%@CLINKER@%g" \
	-e "s%[@]CCLINKER[@]%@CCLINKER@%g" \
	-e "s%[@]COMM[@]%$COMM%g" \
	-e "s%[@]DEFAULT_ARCH[@]%$ARCH%g" \
	-e "s%[@]DEFAULT_DEVICE[@]%$DEVICE%g" \
	-e "s%[@]DEFAULT_MACHINE[@]%$DEFAULT_MACHINE%g" \
       	-e "s%[@]EXECER_DIR[@]%$PREFIX/util%g" \
	-e "s%[@]F77[@]%@F77@%g" \
	-e "s%[@]FFLAGS[@]%@FFLAGS@%g" \
	-e "s%[@]FLIB_PATH_LEADER[@]%@FLIB_PATH_LEADER@%g" \
	-e "s%[@]FLIB_PATH[@]%$NFLIB_PATH%g" \
	-e "s%[@]FLIB_LIST[@]%@FLIB_LIST@%g" \
	-e "s%[@]FLINKER[@]%@FLINKER@%g" \
	-e "s%[@]F90[@]%@F90@%g" \
	-e "s%[@]F90FLAGS[@]%@F90FLAGS@%g" \
	-e "s%[@]F90LIB_PATH_LEADER[@]%@F90LIB_PATH_LEADER@%g" \
	-e "s%[@]F90LIB_PATH[@]%$NF90LIB_PATH%g" \
	-e "s%[@]F90LINKER[@]%@F90LINKER@%g" \
	-e "s%[@]INCLUDE_PATH[@]%@INCLUDE_PATH@%g" \
	-e "s%[@]INSTALL_DIR[@]%$PREFIX%g" \
	-e "s%[@]LIB_PATH[@]%$NLIBPATH%g" \
	-e "s%[@]LIB_LIST[@]%@LIB_LIST@%g" \
	-e "s%[@]MPE_LIBS[@]%@MPE_LIBS@%g" \
        -e "s%[@]MPIR_HOME[@]%$PREFIX%g" \
        -e "s%[@]MPILIBNAME[@]%@MPILIBNAME@%g" \
	-e "s%[@]OPTFLAGS[@]%@OPTFLAGS@%g" \
	-e "s%[@]PREFIX[@]%$PREFIX%g" \
	-e "s%[@]ROMIO_LFLAGS[@]%@ROMIO_LFLAGS@%g" \
	-e "s%[@]ROMIO_TCFLAGS[@]%@ROMIO_TCFLAGS@%g" \
	-e "s%[@]ROMIO_TCPPFLAGS[@]%@ROMIO_TCPPFLAGS@%g" \
	-e "s%[@]ROMIO_TFFLAGS[@]%@ROMIO_TFFLAGS@%g" \
	-e "s%[@]RSHCOMMAND[@]%$RSHCOMMAND%g" \
	-e "s%[@]SYNCLOC[@]%@SYNCLOC@%g" \
	-e "s%[@]wishloc[@]%@wishloc@%g" \
	-e "s%[@]X_LIB[@]%@X_LIB@%g" \
	$1 > $dest
        rc=$?
        if [ $rc != 0 ] ; then
	    echo "**Error fixing up file $dest**"
            errs=`expr $errs + 1`
            if [ $failmode = "hard" ] ; then exit $rc ; fi
        else
	    echo "/bin/rm -f $dest" >> $UNINSTALLFILE
        fi
    else
	if [ $verbose = 1 ] ; then echo "Fixup $1.in and copy to $dest" ; fi
    fi
fi
if [ -z "$3" ] ; then
    mode=$MODE
else
    mode=$3
fi
$Show chmod $mode $2
rc=$?
if [ $rc != 0 ] ; then
    echo "**Error setting mode on file $2**"
    errs=`expr $errs + 1`
    if [ $failmode = "hard" ] ; then exit $rc ; fi
fi
}

##############################################################################
#
# End of routines
#
##############################################################################
if [ ! -s lib/$ARCH/$COMM/lib@MPILIBNAME@.a ] ; then 
    echo "You must make MPI before installing it!"
    echo "Could not find lib/$ARCH/$COMM/lib@MPILIBNAME@.a !"
    exit 1
fi
if [ ! -n "$PREFIX" ] ; then 
  echo "Set an installation location with -prefix=<location> ."
  exit 1
fi
if [ $verbose = 1 ] ; then 
    echo "Install into $PREFIX on the $ARCH with $COMM"
fi

if [ -d $PREFIX ] ; then
    if [ $verbose = 1 ] ; then echo "using existing directory $PREFIX" ; fi
else
    MkDir $PREFIX 
fi

MkDir $PREFIX/lib
MkDir $PREFIX/lib/$ARCH
MkDir $PREFIX/lib/$ARCH/$COMM
MkDir $PREFIX/lib/bitmaps
if [ -n "$CPP_DIR" -a "$buildcpp" = 1 ] ; then 
    MkDir $PREFIX/$CPP_DIR
    MkDir $PREFIX/$CPP_DIR/examples
    MkDir $PREFIX/lib/$ARCH/$COMM/c++
fi
MkDir $PREFIX/util
MkDir $PREFIX/util/machines
MkDir $PREFIX/include
MkDir $PREFIX/examples
MkDir $PREFIX/bin
MkDir $PREFIX/man
MkDir $PREFIX/doc
if [ -z "$libonly" ] ; then
    CopyFile bin/tarch $PREFIX/bin $XMODE
    CopyFile bin/tdevice $PREFIX/bin $XMODE
    #
    # mpiman
    $Show /bin/rm -f $PREFIX/bin/mpiman
    FixupFile util/mpiman.in $PREFIX/bin/mpiman $XMODE
    CopyFile $PREFIX/bin/mpiman $PREFIX/lib/$ARCH/$COMM $XMODE
    #
    # Upshot and Nupshot
    # Do Upshot/Nupshot early in case there is a problem.
    if [ -z "$nonupshot" ] ; then 
        $Show /bin/rm -f $PREFIX/bin/upshot
        FixupFile mpe/profiling/upshot/bin/upshot.in $PREFIX/bin/upshot $XMODE
        #
        # Should clean nupshot sources  (*.c/h) 
        if [ -n "@TCL_DIR@" -a -z "$cpnupshot" -a -n "@TK_DIR@" -a \
	   "@TK_VERSION@" = "3.6" ] ; then 
            echo "Attempting to build nupshot... "
            $Show $CPRP -r mpe/profiling/nupshot $PREFIX
	    echo "/bin/rm -rf $PREFIX/nupshot" >> $UNINSTALLFILE
            $Show "(cd $PREFIX/nupshot ; \
	        if configure -tcldir=@TCL_DIR@ -tkdir=@TK_DIR@ ; then \
	        $MAKE clean ; $MAKE ; \
    	        mv nupshot ../bin ; $MAKE clean ; fi )"
	    echo "/bin/rm -f $PREFIX/bin/nupshot" >> $UNINSTALLFILE
	elif [ -n "$cpnupshot" -a -f mpe/profiling/nupshot ] ; then 
            $Show $CPRP -r mpe/profiling/nupshot $PREFIX
	    echo "/bin/rm -rf $PREFIX/nupshot" >> $UNINSTALLFILE
            $Show "(cd $PREFIX/nupshot ; \
	        mv nupshot ../bin ; $MAKE clean )"
	    echo "/bin/rm -f $PREFIX/bin/nupshot" >> $UNINSTALLFILE
        fi
    fi
    #
    # mpirun et al.  This would be a good place to identify 
    # "partial" mpirun installations
    # mpirun.sh.in requires:
    #     mpirun.args.in
    #     mpirun.<device>.in (some variations are mapped to different
    #                         devices)
    # ch_p4, execer also use
    #     mpirun.pg.in
    # This needs to be modified to simply move the needed files, not 
    # all of them.
    for file in util/mpirun.sh.in util/mpirun.args.in util/mpirun.pg.in \
	util/mpirun.$COMM.in util/tstmachines.in ; do
        bfile=`basename $file .in`
	if test $bfile = "mpirun.pg" -a $COMM != "ch_p4" ; then 
	    continue
	fi
        if [ $verbose = 1 ] ; then 
            echo "Creating $PREFIX/bin/$bfile from $file"
        fi
        FixupFile $file $PREFIX/bin/$bfile $XMODE
        $Show /bin/rm -f $PREFIX/lib/$ARCH/$COMM/$bfile 
        CopyFile $PREFIX/bin/$bfile $PREFIX/lib/$ARCH/$COMM $XMODE
    done
    $Show mv $PREFIX/bin/mpirun.sh $PREFIX/bin/mpirun
    echo "/bin/rm -f $PREFIX/bin/mpirun" >> $UNINSTALLFILE
    $Show mv $PREFIX/lib/$ARCH/$COMM/mpirun.sh $PREFIX/lib/$ARCH/$COMM/mpirun
    echo "/bin/rm -f $PREFIX/lib/$ARCH/$COMM/mpirun" >> $UNINSTALLFILE
    if [ ! -r $PREFIX/lib/$ARCH/$COMM/tarch ] ; then
	( cd $PREFIX/lib/$ARCH/$COMM ; 	ln -s ../../../bin/tarch tarch )
        echo "/bin/rm -f $PREFIX/lib/$ARCH/$COMM/tarch" >> $UNINSTALLFILE
    fi
    #
    $Show /bin/rm -f $PREFIX/bin/mpireconfig
    if [ $verbose = 1 ] ; then 
        echo "Creating mpireconfig from util/mpireconfig.in"
    fi
    FixupFile util/mpireconfig.in $PREFIX/bin/mpireconfig $XMODE
    CopyFile $PREFIX/bin/mpireconfig $PREFIX/lib/$ARCH/$COMM $XMODE
    $Show /bin/rm -f $PREFIX/bin/execer
    CopyFile util/execer $PREFIX/bin/execer $XMODE
    #
    # mpicc, mpif77, mpif90
    FixupFileWithAt util/mpicc.in $PREFIX/bin/mpicc $XMODE
    CopyFile $PREFIX/bin/mpicc $PREFIX/lib/$ARCH/$COMM $XMODE
    FixupFileWithAt util/mpif77.in $PREFIX/bin/mpif77 $XMODE
    CopyFile $PREFIX/bin/mpif77 $PREFIX/lib/$ARCH/$COMM $XMODE
    FixupFileWithAt util/mpif90.in $PREFIX/bin/mpif90 $XMODE
    CopyFile $PREFIX/bin/mpif90 $PREFIX/lib/$ARCH/$COMM $XMODE
    #
    # mpiCC, if C++ selected
    if [ -n "@CPP_COMPILER@" ] ; then
	FixupFileWithAt util/mpiCC.in $PREFIX/bin/mpiCC $XMODE
        CopyFile $PREFIX/bin/mpiCC $PREFIX/lib/$ARCH/$COMM $XMODE
    fi
else
    # libonly
    #
    # mpirun et al.
    # Do only the needed ones
    for file in util/mpirun.*.in util/tstmachines.in ; do
        bfile=`basename $file .in`
        if [ $verbose = 1 ] ; then 
            echo "Creating $PREFIX/lib/$ARCH/$COMM/$bfile from $file"
	fi
        FixupFile $file $PREFIX/lib/$ARCH/$COMM/$bfile $XMODE
    done
    $Show mv $PREFIX/lib/$ARCH/$COMM/mpirun.sh $PREFIX/lib/$ARCH/$COMM/mpirun
    if [ ! -r $PREFIX/lib/$ARCH/$COMM/tarch ] ; then
	( cd $PREFIX/lib/$ARCH/$COMM ; 	ln -s ../../../bin/tarch tarch )
        echo "/bin/rm -f $PREFIX/lib/$ARCH/$COMM/tarch" >> $UNINSTALLFILE
    fi
    FixupFileWithAt util/mpicc.in $PREFIX/lib/$ARCH/$COMM/mpicc $XMODE
    if [ -n "@CPP_COMPILER@" ] ; then
        FixupFileWithAt util/mpiCC.in $PREFIX/lib/$ARCH/$COMM/mpiCC $XMODE
    fi
    FixupFileWithAt util/mpif77.in $PREFIX/lib/$ARCH/$COMM/mpif77 $XMODE
    FixupFileWithAt util/mpif90.in $PREFIX/lib/$ARCH/$COMM/mpif90 $XMODE
    FixupFile util/mpireconfig.in $PREFIX/lib/$ARCH/$COMM/mpireconfig $XMODE
    CopyFile lib/$ARCH/$COMM/mpichconf.h $PREFIX/lib/$ARCH/$COMM
    CopyFile lib/$ARCH/$COMM/mpidefs.h $PREFIX/lib/$ARCH/$COMM
    CopyFile lib/$ARCH/$COMM/mpif.h    $PREFIX/lib/$ARCH/$COMM
    if [ -s romio/include/mpio.h ] ; then
        CopyFile romio/include/mpio.h $PREFIX/lib/$ARCH/$COMM
        CopyFile romio/include/mpiof.h $PREFIX/lib/$ARCH/$COMM
    fi
fi
#
# 
# P4 server
if [ "$DEVICE" = "ch_p4" ] ; then 
    echo "Attempting to build ch_p4 secure server"
    $Show "( cd mpid/ch_p4/p4/servers ; $MAKE serv_p4 ; )" 
    CopyFile mpid/ch_p4/p4/bin/serv_p4 $PREFIX/bin $XMODE
    CopyFile $PREFIX/bin/serv_p4 $PREFIX/lib/$ARCH/$COMM $XMODE
    $Show /bin/rm -f util/chp4_servs
    FixupFile util/chp4_servs.in $PREFIX/util/chp4_servs $XMODE
    CopyFile $PREFIX/util/chp4_servs $PREFIX/lib/$ARCH/$COMM $XMODE
    CopyFile util/chkserv $PREFIX/util/chkserv $XMODE
    CopyFile $PREFIX/util/chkserv $PREFIX/lib/$ARCH/$COMM $XMODE
fi
#
# P4
if [ "$DEVICE" = "ch_p4" ] ; then
    if [ ! -x mpid/server/server ] ; then
	echo "Attempting to build alternate ch_p4 secure server"
	$Show "( cd mpid/server ; configure ; $MAKE server )"
    fi
    if [ -x mpid/server/server ] ; then 
	CopyFile mpid/server/server $PREFIX/bin $XMODE
        CopyFile mpid/server/server $PREFIX/lib/$ARCH/$COMM $XMODE
	$Show /bin/rm -f util/chp4_servs
	FixupFile util/chp4_servs.in $PREFIX/util/chp4_servs $XMODE
	CopyFile $PREFIX/util/chp4_servs $PREFIX/lib/$ARCH/$COMM $XMODE
	CopyFile util/chkserv $PREFIX/util/chkserv $XMODE
	CopyFile $PREFIX/util/chkserv $PREFIX/lib/$ARCH/$COMM $XMODE
    else
        echo "Server not available"
    fi
fi
#
if [ -z "$libonly" ] ; then
    #
    # Machines database
    #	if [ ! -d $PREFIX/util/machines.anl ] ; then \
    #	    mkdir $PREFIX/util/machines.anl ; fi
    #	$CPRP -r util/machines $PREFIX/util/machines.anl
    for file in util/machines/machines* ; do
        CopyFile $file $PREFIX/util/machines
    done
    for file in mpe/profiling/upshot/bitmaps/* ; do 
	if [ -f $file ] ; then 
            CopyFile $file $PREFIX/lib/bitmaps
	fi
    done
    #
    # Include files
    CopyFile include/mpi.h $PREFIX/include
    CopyFile include/mpif.h $PREFIX/include
    CopyFile include/mpi_errno.h $PREFIX/include
    CopyFile include/binding.h $PREFIX/include
    CopyFile include/protofix.h $PREFIX/include
    CopyFile include/mpeexten.h $PREFIX/include
    CopyFile include/patchlevel.h $PREFIX/include
    CopyFile lib/$ARCH/$COMM/mpichconf.h $PREFIX/lib/$ARCH/$COMM
    CopyFile lib/$ARCH/$COMM/mpidefs.h $PREFIX/lib/$ARCH/$COMM
    CopyFile mpe/mpe.h $PREFIX/include
    CopyFile mpe/mpe_graphics.h $PREFIX/include
    CopyFile mpe/mpe_log.h $PREFIX/include
    CopyFile mpe/mpetools.h $PREFIX/include
    CopyFile mpe/basex11.h $PREFIX/include
    if [ -s romio/include/mpio.h ] ; then
        CopyFile romio/include/mpio.h $PREFIX/lib/$ARCH/$COMM
        CopyFile romio/include/mpiof.h $PREFIX/lib/$ARCH/$COMM
    fi
fi
#
# Include files for C++
if [ -n "$CPP_DIR" -a "$buildcpp" = 1 ] ; then 
    if [ ! -d $PREFIX/lib/$ARCH/$COMM/c++ ] ; then
        MkDir $PREFIX/lib/$ARCH/$COMM/c++
    fi
    for file in `ls MPI-2-C++/src/*.h`; do 
        CopyFile $file $PREFIX/lib/$ARCH/$COMM/c++
    done
fi
#
# Libaries (includeing shared libraries)
for file in lib/$ARCH/$COMM/*.a lib/$ARCH/$COMM/*.so* ; do
    if [ -f $file ] ; then 
        CopyFileP $file $PREFIX/lib/$ARCH/$COMM
    fi
done
#
# Special programs (helper executeables)
# So far we have
#     spxcp - Executable copy program for IBM SP.
for file in spxcp ; do
    if [ -x lib/$ARCH/$COMM/$file ] ; then 
        CopyFileP lib/$ARCH/$COMM/$file $PREFIX/lib/$ARCH/$COMM
    fi
done
#
# Message files
if [ -z "$libonly" ] ; then 
    # Note that we need to get the mpich.*.m files for IRIX which has
    # a message file directory as well as the message file.
    for file in lib/$ARCH/mpich.* ; do
        if [ $file = "mpich.cat" ] ; then
	    # This is a link; it assumes that En_US is the default.
            if [ -f lib/$ARCH/mpich.En_US.cat ] ; then 
                $Show ln -s $PREFIX/lib/$ARCH/mpich.En_US.cat \
	   		    $PREFIX/lib/$ARCH/mpich.cat
            fi
        elif [ -s $file ] ; then 
	    # This will handle the case of no mpich.* matches
            CopyFile $file $PREFIX/lib/$ARCH
        fi
    done
fi
    
# Other files in lib need to be updated...
CopyFile lib/$ARCH/$COMM/mpidefs.h $PREFIX/lib/$ARCH/$COMM
#
# Documentation
# Note that we're not doing the www pages yet.
if [ -z "$noman" -a -z "$libonly" ] ; then 
    if [ -z "$MPIMANPATH" ] ; then
        MPIMANPATH=$PREFIX/man
    fi
    CopyFile man/mandesc $MPIMANPATH
    for dir in man1 man3 man4 man5 ; do
       MkDir $MPIMANPATH/$dir
        for file in man/$dir/* ; do 
	    # man5 in particular might be empty; be careful
            if [ -f "$file" -a -s "$file" ] ; then 
  	        CopyFile $file $MPIMANPATH/$dir
	    fi
        done
    done
    # do the Romio man pages, only man3
    for file in romio/man/man3/* ; do
        if [ -f "$file" -a -s "$file" ] ; then 
  	    CopyFile $file $MPIMANPATH/man3
	fi
    done
fi
if [ -z "$libonly" ] ; then
    for file in functions.ps.Z guide.ps.Z install.ps.Z ; do
	if [ -f $file ] ; then 
            CopyFile doc/$file $PREFIX/doc
	fi
    done
    #$Show $CPRP -r doc $PREFIX
    if [ -f ref/adiman.ps.Z ] ; then 
        CopyFile ref/adiman.ps.Z $PREFIX/doc
    fi
    if [ -f ref/mpiman.ps.Z ] ; then 
        CopyFile ref/mpiman.ps.Z $PREFIX/doc
    fi
fi
#
# Updating the config.status file is trickier, since we need to edit
# the directories that might have contained the original path.
# It is important to update the CORRECT file, in the case that we are doing
# a -libonly installation on a previously constructed version.
#
if [ $just_testing = 0 ] ; then
    cat lib/$ARCH/$COMM/config.status | \
	sed -e "s%MPIR_HOME=.*\$%MPIR_HOME='$PREFIX'%g" \
    -e "s%^LIB_PATH=\([^/ ]*\)/[^ ']*%LIB_PATH=\1$PREFIX/lib/$ARCH/$COMM%g" \
    -e "s%^FLIB_PATH=\([^/ ]*\)/[^ ']*%FLIB_PATH=\1$PREFIX/lib/$ARCH/$COMM%g" \
		-e "s%MPE_DIR=.*\$%MPE_DIR='$PREFIX/mpe'%g" \
    -e "s%^MPICC=\([^/ ]*\)/.*\$%MPICC=$PREFIX/lib/$ARCH/$COMM/mpicc%g" \
    -e "s%^MPIF77=\([^/ ]*\)/.*\$%MPIF77=$PREFIX/lib/$ARCH/$COMM/mpif77%g" \
    -e "s%^MPIF90=\([^/ ]*\)/.*\$%MPIF90=$PREFIX/lib/$ARCH/$COMM/mpif90%g" \
    -e "s%^MPICPLUSPLUS=\([^/ ]*\)/.*\$%MPICPLUSPLUS=$PREFIX/lib/$ARCH/$COMM/mpiCC%g" \
		        > $PREFIX/lib/$ARCH/$COMM/config.status 
    echo "/bin/rm -f $PREFIX/lib/$ARCH/$COMM/config.status" >> $UNINSTALLFILE
    chmod $XMODE $PREFIX/lib/$ARCH/$COMM/config.status 
else 
cat <<.
cat lib/$ARCH/$COMM/config.status | \
	sed -e "s%MPIR_HOME=.*\$%MPIR_HOME='$PREFIX'%g" \
    -e "s%^LIB_PATH=\([^/ ]*\)/[^ ']*%LIB_PATH=\1$PREFIX/lib/$ARCH/$COMM%g" \
    -e "s%^FLIB_PATH=\([^/ ]*\)/[^ ']*%FLIB_PATH=\1$PREFIX/lib/$ARCH/$COMM%g" \
		-e "s%MPE_DIR=.*\$%MPE_DIR='$PREFIX/mpe'%g" \
    -e "s%^MPICC=\([^/ ]*\)/.*\$%MPICC=$PREFIX/lib/$ARCH/$COMM/mpicc%g" \
    -e "s%^MPIF77=\([^/ ]*\)/.*\$%MPIF77=$PREFIX/lib/$ARCH/$COMM/mpif77%g" \
    -e "s%^MPIF90=\([^/ ]*\)/.*\$%MPIF90=$PREFIX/lib/$ARCH/$COMM/mpif90%g" \
    -e "s%^MPICPLUSPLUS=\([^/ ]*\)/.*\$%MPICPLUSPLUS=$PREFIX/lib/$ARCH/$COMM/mpiCC%g" \
		        > $PREFIX/lib/$ARCH/$COMM/config.status
    chmod $XMODE $PREFIX/lib/$ARCH/$COMM/config.status 
.
fi
if [ -z "$libonly" ] ; then
    #CopyFile $PREFIX/lib/$ARCH/$COMM/config.status $PREFIX
    #
    $Show /bin/rm -f $PREFIX/examples/mpif.h
    $Show ln -s $PREFIX/include/mpif.h $PREFIX/examples/mpif.h
    echo "/bin/rm -f $PREFIX/examples/mpif.h" >> $UNINSTALLFILE
fi
#
# Example programs
CopyFile installtest/Makefile.in $PREFIX/examples
#
# This SHOULD use mpireconfig...
Savevar=$PREFIX
PREFIX=$APREFIX
#FixupFile installtest/makefile.proto $PREFIX/examples/Makefile
(cd $PREFIX/examples ; $PREFIX/lib/$ARCH/$COMM/mpireconfig Makefile )
echo "(cd $PREFIX/examples ; $MAKE clean)" >> $UNINSTALLFILE
echo "/bin/rm -f $PREFIX/examples/Makefile" >> $UNINSTALLFILE
PREFIX=$Savevar
CopyFile $PREFIX/examples/Makefile $PREFIX/lib/$ARCH/$COMM/Makefile.sample
CopyFile installtest/cpi.c $PREFIX/examples
CopyFile installtest/pi3.f $PREFIX/examples
CopyFile installtest/cpilog.c $PREFIX/examples
CopyFile installtest/hello++.cc $PREFIX/examples
if [ -s romio/test/simple.c ] ; then 
    CopyFile romio/test/simple.c $PREFIX/examples/simpleio.c
fi
CopyFile installtest/README $PREFIX/examples
#
# Test build the examples
$Show "(cd $PREFIX/examples ; /bin/rm -f mpirun ; \
	  ln -s ../bin/mpirun mpirun )"
echo "/bin/rm -f $PREFIX/examples/mpirun" >> $UNINSTALLFILE
#
echo "About to run installation test..."
$Show "(cd $PREFIX/examples; $MAKE all )"
#
# This SHOULD use mpireconfig...
Savevar=$PREFIX
if [ -n "$CPP_DIR" -a "$buildcpp" = 1 ] ; then 
    # C++ Example programs 
    CopyFile installtest/mpi-2-c++/Makefile.in $PREFIX/$CPP_DIR/examples
    #
    PREFIX=$APREFIX
    (cd $PREFIX/$CPP_DIR/examples ; $PREFIX/lib/$ARCH/$COMM/mpireconfig Makefile )
    echo "(cd $PREFIX/$CPP_DIR/examples ; $MAKE clean)" >> $UNINSTALLFILE
    echo "/bin/rm -f $PREFIX/$CPP_DIR/examples/Makefile" >> $UNINSTALLFILE
    PREFIX=$Savevar
    CopyFile $CPP_DIR/contrib/examples/hello_world.cc $PREFIX/$CPP_DIR/examples
    CopyFile $CPP_DIR/contrib/examples/ring.cc $PREFIX/$CPP_DIR/examples
    CopyFile $CPP_DIR/contrib/examples/topology.cc $PREFIX/$CPP_DIR/examples
    CopyFile $CPP_DIR/contrib/examples/user_bcast.cc $PREFIX/$CPP_DIR/examples
    CopyFile $CPP_DIR/contrib/examples/chapter_10_mpi2.cc $PREFIX/$CPP_DIR/examples
    CopyFile $CPP_DIR/contrib/examples/pi.cc $PREFIX/$CPP_DIR/examples
    CopyFile $CPP_DIR/contrib/examples/README $PREFIX/$CPP_DIR/examples
    #
    # Test build the C++ examples
    $Show "(cd $PREFIX/$CPP_DIR/examples ; /bin/rm -f mpirun ; \
	      ln -s ../../bin/mpirun mpirun )"
    echo "/bin/rm -f $PREFIX/$CPP_DIR/examples/mpirun" >> $UNINSTALLFILE
    #
    echo "About to run C++ installation test..."
    $Show "(cd $PREFIX/$CPP_DIR/examples; $MAKE)"
    #
fi
#
echo "/bin/rm -f $PREFIX/mpiuninstall" >> $UNINSTALLFILE
echo "/bin/rm -f $UNINSTALLFILE" >> $UNINSTALLFILE
# Add the directory removes to the UNINSTALL file
for dir in $dirlist ; do
    echo "if [ -d $dir ] ; then rmdir $dir ; fi" >> $UNINSTALLFILE
done
#
cp $UNINSTALLFILE $PREFIX/mpiuninstall
#
echo installed $ARCH/$COMM/$DEVICE MPI in $PREFIX
echo $PREFIX/mpiuninstall may be used to remove the installation.
#
if [ $errs -gt 0 ] ; then
    rc=1
else
    rc=0
fi
exit $rc
