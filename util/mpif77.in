#! /bin/sh
DoLink=1
DoCompile=0
MPILOG=
Show=eval
allargs=
compileargs=
linkargs=
linkobjs=
gettinglinkarg=0
HasDashC=0
for arg in "$@" ; do
#    echo procssing arg $arg
    # Special processing for -o name
    if [ $gettinglinkarg = 1 ] ; then
	linkargs="$linkargs $arg"
	gettinglinkarg=0
	continue
    fi
    case "$arg" in 
	-c)
	# If -c is NOT specified, then we need to perform a link step.
	allargs="$allargs $arg"
	compileargs="$compileargs $arg"
	DoLink=0
	HasDashC=1
	;;
        -o)
	# Need to link
	allargs="$allargs $arg"
	linkargs="$linkargs $arg"
	compileargs="$compileargs -c"
	# Still need to add the target of the -o
	gettinglinkarg=1
	DoLink=1
	;;
	-mpilog)
	if [ -n "@MPE_LIBS@" ] ; then
		MPILOG="-lfmpi -llmpi"
	else
	    echo "-mpilog requires the MPE libraries"
	fi
	;;
	-mpitrace)
	if [ -n "@MPE_LIBS@" ] ; then
   	    MPILOG="-lfmpi -ltmpi"
	else
	    echo "-mpitrace requires the MPE libraries"
	fi
	;;
	-mpianim)
	if [ -n "@MPE_LIBS@" ] ; then
	    MPILOG="-lfmpi -lampi @MPE_LIBS@ @X_LIB@"
	else
	    echo "-mpianim requires the MPE libraries"
	fi
	;;
	-echo)
	set -x
	;;
	-show)
	Show=echo
	;;
	-help)
	echo "This is a program to compile or link MPI programs"
	echo "In addition, the following special options are supported"
	echo "    -mpilog    - Build version that generate MPE log files"
	echo "    -mpitrace  - Build version that generates traces"
	echo "    -mpianim   - Build version that generates real-time"
	echo "                 animation"
	echo "    -show      - Show the commands that would be used without"
	echo "                 runnning them"
	echo "    -help      - Give this help"
	echo "    -echo      - Show exactly what this program is doing."
	echo "                 This option should normally not be used."
	echo "This should be used just like the usual Fortran compiler"
	echo "For example,"
	echo "   $0 -c foo.f "
	echo "and"
	echo "   $0 -o foo foo.o"
	echo "Combining compilation and linking in a single command"
	echo "   $0 -o foo foo.f"
	echo "may not work on some systems, and is not recommended."
	exit 1
	;;
        *\"*) 
	allargs="$allargs `echo $arg | sed 's/\"/\\\"/g'`"
	compileargs="$compileargs `echo $arg | sed 's/\"/\\\"/g'`"
	linkargs="$linkargs `echo $arg | sed 's/\"/\\\"/g'`"
	;;
        *) allargs="$allargs $arg"
	if [ -s "$arg" ] ; then
	    ext=`expr "$arg" : '.*\(\..*\)`
	    if [ "$ext" = ".f" ] ; then
	        DoCompile=1
	        compileargs="$compileargs $arg"
	        fname=`basename $arg .f`
	        linkobjs="$linkobjs $fname.o"
	    elif [ "$ext" = ".o" ] ; then
	        DoLink=1
	        linkobjs="$linkobjs $arg"
	    else
	        compileargs="$compileargs $arg"
	        linkargs="$linkargs $arg"
	    fi
	else
            compileargs="$compileargs $arg"
	    linkargs="$linkargs $arg"
	fi
	;;
    esac
done
#
# Take care of mpif.h; try to add the link if necessary
finc="@FINC@"
if [ -z "$finc" ] ; then
    if [ ! -f mpif.h ] ; then
        echo "Adding a symbolic link for mpif.h"
	$Show ln -s @MPIR_HOME@/include/mpif.h mpif.h
    fi
fi
status=0
if [ $DoCompile = 1 ] ; then 
    if [ $HasDashC != 1 ] ; then
        compileargs="-c $compileargs"
    fi
    $Show @F77@ $finc @FFLAGS@ @OPTFLAGS@ $compileargs
    status=$?
    if [ $status != 0 ] ; then 
	exit $status
    fi
fi
if [ $DoLink = 1 ] ; then
    if [ -n "$MPILOG" ] ; then
        $Show @FLINKER@ $linkobjs @FLIB_PATH@ $MPILOG $linkargs -lpmpi @LIB_LIST@
    else
        $Show @FLINKER@ $linkobjs $linkargs @FLIB_PATH@ @LIB_LIST@
    fi
    status=$?
fi
exit $status
