dnl This is an autoconf script.
dnl To rebuild the `configure' script from this, execute the command
dnl 	autoconf
dnl in the directory containing this script.  You must have autoconf
dnl version 1.4 or later.
dnl
dnl The following text appears in the resulting `configure' script,
dnl explaining how to rebuild it.
[#!/bin/sh
# Guess values for system-dependent variables and create Makefiles.
# Generated automatically using autoconf.
# Copyright (C) 1991, 1992, 1993 Free Software Foundation, Inc.
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

progname="`echo $0 | sed 's:^\./\./:\./:'`"
print_error() {
    echo "*# $*" 2>&1 ;
    }
print_usage() {
cat <<.
Usage: ${progname} -arch=ARCH_TYPE -comm=COMM_TYPE -device=DEVICE
		   [-devicedir=DEVICE_DIR] [-transportdir=TRANSPORT_DIR]
                   [-prefix=INSTALL_DIR]  [-c++=C++_COMPILER]
                   [-mpe] [-nof77] [-f90nag] [-opt=OPTFLAGS] [-make=MAKEPGM]
                   [-no_mpegraphics] [-no_short_longs] [-memdebug]
                   [-x11_lib=X11LIB] [-x11_inc=X11INC]
                   [-mpedbg] 
                   [-nodevdebug] [-use_rndv] [-pre_post] [-pre_alloc]
		   [-var_pkt] [-pkt_size=LENGTH] [-compressed_pkt]
                   [-limited_buffers] [-tiny_buffers] [-adi_collective]
                   [-adi_coll_world]
                   [-wish=WISH] [-tcldir=TCLDIR] [-tkdir=TKDIR]
                   [-fortnames=FORTRANNAMES]
                   [-ar_nolocal]
where
   ARCH_TYPE    = the type of machine that MPI is to be configured for
   COMM_TYPE    = communications layer to be used
   DEVICE       = communications device to be used
   INSTALL_DIR  = directory where MPI will be installed (optional)
   DEVICE_DIR   = directory that MPI's ADI code needs (optional)
   TRANSPORT_DIR= directory that MPI's ADI code needs (optional)
   C++_COMPILER = default is to use g++ (optional)
   OPTFLAGS     = optimization flags to give the compilers (e.g. -g)
   MAKEPGM      = version of make to use
   LENGTH       = Length of message at which ADI switches from short
                  to long message protocol
   WISH         = Name of tcl/tk wish executable.  Configure will attempt
                  to find a version of wish for you, but if there is
                  no wish in your path or you need to use a different version,
                  use this option.  Used only for the display tools.
   TCLDIR       = Directory containing tcl.  Must have lib/libtcl.a and
                  include/tcl.h .  Used only for nupshot.
   TKDIR        = Directory containing tk 3.3 or later.  Must have lib/libtk.a
                  and include/tk.h .  Used only for nupshot.  May be
                  the same as TCLDIR.
   FORTRANNAMES = Form of the Fortran names.  See below.
   X11LIB       = Full path name for libX11.a
   X11INC       = Full path name for X11.h

One and only one 'arch', 'comm', and 'prefix' argument should be
provided.  'arch' MUST be specified before 'comm'.

If '-c++' is included as an option, then the C++ interface is also
built.  By default, g++ is used as the c++ compiler.  THIS IS CURRENTLY
UNSUPPORTED.

If '-mpe' is included as an option, then the MPE 'helper' libraries will
also be built.  If '-no_mpegraphics' is used, then the MPE routines that
make use of X11 graphics will NOT be built; this is appropriate for
systems that either do not have the X11 include files or that do not
support X11 graphics (some message-passing systems can not interoperate
with X11).

The option '-mpedbg' enables the '-mpedbg' command line switch in MPI
programs.  When used with an MPI program, the default error handler
(i.e., MPI_COMM_WORLD's error handler) tries to start xterm's running
dbx for each process that detects an error.  This option is intended
primarily for workstation environments but should work on some MPPs
(such as IBM SP2).

The option '-nof77' prevents the compilation of routines that require a
Fortran compiler.  If this option is selected, you may not use the
Fortran interface to MPI.

The option '-f90nag' allows you to use the NAG Fortran 90 instead of 
Fortran 77.  This is a preliminary version and is based on the version for
NeXTs.

The option '-opt' allows you to specify options for the compilers (both
C and Fortran).  For example, '-opt=-O' chooses optimized code
generation on many systems.

The option '-make' may be used to select an alternate make program.  For
example, on FreeBSD systems, -make=gnumake may be required because of
bugs in the system make.

The option '-no_short_longs' may be used to suppress support for ANSI C
types 'long long int' and 'long double' when they are the same size as
'long' and 'double' respectively.  Some systems allow these long ANSI C
types, but generate a warning message when they are used; this option
may be used to suppress these messages (and support for these types).

The option '-fortnames=FORTRANNAMES' allows you to specify the form of the
Fortran names.  This is used primarily to generate names with and without 
trailing underscores for those systems that support both.  Not yet 
implemented.

The option '-ar_nolocal' prevents the library archive command from attempting
to use the local directory for temporary space.  This option should be used
when (a) there isn't much space (less than 20 MB) available in the partition
where MPICH resides and (b) there is enough space in /tmp (or wherever ar
places temporary files by default).

The option '-memdebug' enables extensive internal memory debugging code.
This should be used only if you are trying to find a memory problem (it
can be used to help find memory problems in user code as well).

Special Tuning Options:

There are a number of options for tuning the behavoir of the ADI
(Abstract Device Interface) which is the low-level message-passing
interface.  These should NOT be used unless you are sure you know what
you are doing.

The option '-nodevdebug' disables the debugging code in the MPI ADI
code.  This should be used only when you are sure that everything is
working correctly.  (This option is also present to remind benchmarkers
that the low level code by default may contain debugging code.)  Note
also that some of the device code (in mpid/*) has had the debugging code
removed from the source code.

The option '-use_rndv' directs MPICH to use a rendevous protocol rather
than an eager protocol in sending messages.  This option is provided
mostly for debugging purposes; a good default is provided for each
system (not yet implemented)

The option '-pre_post' directs MPICH to 'pre-post' a receive for
incoming messages.  This can improve performance for some applications
and make performance worse for others.  It is expected that the effect
will often be small.  Not yet tested.

The option '-pre_alloc' directs MPICH to 'pre-allocate' a message buffer
into which incoming control data can be received.  With the p4 transport
(with either -device=ch_p4 or -device=chameleon and -comm=p4), this may
help reduce memory copy overhead.  -pre_alloc and -pre_post are mutually
exclusive.  Not yet tested.

The option '-var_pkt' allows you to set the message size at which MPICH
changes from its short to long message protocol.

The option '-compressed_pkt' allows you to choose a 'compressed' packet
format; this slightly reduces the size of the message 'envelope', and,
on systems with relatively slow communications, provide slightly better
performance.  Not yet tested.

The option '-pkt_size=LENGTH' allows you to choose the message length at
which the ADI (Abstract Device Interface) switches from its short to
long message format.  LENGTH must be positive.

The option '-limited_buffers' forces the ADI to be more conservative in
its use of the underlying message-passing system's buffer space.  Some
applications on some systems may need this; however, it can degrade
performance.  The option '-tiny_buffers' is even more extreme; it is needed
on systems that provide very small amounts on internal buffering.  Both
of these options can be specified with a leading 'no' as in '-notiny_buffers'
to override the choice for those systems that need them.

The option '-adi_collective' allows the ADI to provide some collective
operations in addition to the basic point-to-point operations.
Currently, most systems do not support this option (it is ignored) and
on the others it has not been extensively tested.  The option 
'-adi_coll_world' asks the ADI to try and use any collective operations that
are supported only on the MPI_COMM_WORLD communicator (and any communicator
with a similiar group).  This is also untested.


Sample Configure Usage:

To make for running on sun4's running SunOS with ch_p4 as the device,
 and with the installation directory equal to the current directory:

  ./configure -device=ch_p4 -arch=sun4
  make

Known devices are chameleon, 
        ch_nx     (native Intel NX calls), 
        ch_eui    (native IBM EUI or MPL calls),
        ch_mpl    (synonym for ch_eui)
        ch_nc     (native nCUBE calls, requires -arch=ncube),
        ch_cmmd   (native TMC CM-5 CMMD calls), and
        ch_p4     (p4)
        ch_meiko  (for Meiko CS2, using NX compatibility library), and
	ch_spp    (for the Convex Exemplar)
        meiko     (for Meiko CS2, using elan tport library).

Known architectures include (case is important)
        sun4      (SUN OS 4.x)
        solaris   (Solaris; probably 2.3 (untested))
        hpux      (HP UX)
        rs6000    (AIX for IBM RS6000)
        sgi       (Silicon Graphics IRIX 4.x, 5.x or 6.x)
        sgi5      (Silicon Graphics IRIX 5.x on R4400's, for the MESHINE)
        IRIX      (synonym for sgi)
        alpha     (DEC alpha)
        intelnx   (Intel i860 or Intel Delta)
        paragon   (Intel Paragon)
        meiko     (Meiko CS2)
        CRAY      (CRAY XMP, YMP, C90)
        cray_t3d  (CRAY T3D (untested))
        freebsd   (PC clones running FreeBSD)
	LINUX     (PC clones running LINUX)
        ksr       (Kendall Square KSR1 and KSR2)
        EWS_UX_V  (NEC EWS4800/360AD Series workstation.  Untested.)
        UXPM      (UXP/M. Untested.)

Special notes:
For -arch=IRIX -device=ch_p4, setting -comm=shared will enable the shared
memory implementation of the p4 code in the low-level device.

Others may be recognized.
.
}

ARCH=""
CPP_DIR=""
LIB_PATH=""
FLIB_PATH=""
OPTFLAGS="-g"
NOF77=0
AR_LOCAL=l
NOSHORTLONGS=0
HAS_FORTRAN=1
# Nag F90 names are call f90_unix_MP_getarg(i,s) and 
# f90_unix_MP_iargc().
F77GETARG="call getarg(i,s)"
F77IARGC="iargc()"
F90UNIX="C"
MPI_FOBJECTS="\$(MPI_FOBJECTS)"
CFLAGS=""
MPE_GRAPHICS="-DMPE_GRAPHICS"
MPE_DIR=""
MAKE=make
P4_MDEPCFLAGS=""
ASMFILES_O=""
PREFIX=""
DEVCFLAGS=""
CONFIGURE_ARGS="$*"
DEFAULT_MACHINE=''
# This next variable is a version without quotes.
# We could also consider `echo $a | sed -e 's/"/\\"/g'`
CONFIGURE_ARGS_CLEAN=`echo $* | tr '"' ' '`
if test -n "$CONFIGURE_ARGS" ; then 
    echo "Configuring with args $CONFIGURE_ARGS"
fi
MPIVERSION=`cat include/patchlevel.h | awk '{print $3}' | sed -e 's/\.[0-9]//' | tr '\012' '.'`
echo "Configuring MPICH Version $MPIVERSION"
#
# IS_HETERO is set if the device supports heterogeneous machines.
# This requires additional coding, including checking for XDR
IS_HETERO=0
for arg
do
  # Handle --exec-prefix with a space before the argument.
  if test x$next_exec_prefix = xyes; then exec_prefix=$arg; next_exec_prefix=
  # Handle --host with a space before the argument.
  elif test x$next_host = xyes; then next_host=
  # Handle --prefix with a space before the argument.
  elif test x$next_prefix = xyes; then prefix=$arg; next_prefix=
  # Handle --srcdir with a space before the argument.
  elif test x$next_srcdir = xyes; then srcdir=$arg; next_srcdir=
  else
    case $arg in
     # For backward compatibility, also recognize exact --exec_prefix.
     -exec-prefix=* | --exec_prefix=* | --exec-prefix=* | --exec-prefi=* | --exec-pref=* | --exec-pre=* | --exec-pr=* | --exec-p=* | --exec-=* | --exec=* | --exe=* | --ex=* | --e=*)
	exec_prefix=`echo $arg | sed 's/[-a-z_]*=//'` ;;
     -exec-prefix | --exec_prefix | --exec-prefix | --exec-prefi | --exec-pref | --exec-pre | --exec-pr | --exec-p | --exec- | --exec | --exe | --ex | --e)
	next_exec_prefix=yes ;;

     -prefix=* | --prefix=* | --prefi=* | --pref=* | --pre=* | --pr=* | --p=*)
	PREFIX=`echo $arg | sed 's/[-a-z_]*=//'` ;;
     -prefix | --prefix | --prefi | --pref | --pre | --pr | --p)
	next_prefix=yes ;;

     -srcdir=* | --srcdir=* | --srcdi=* | --srcd=* | --src=* | --sr=* | --s=*)
	srcdir=`echo $arg | sed 's/[-a-z_]*=//'` ;;
     -srcdir | --srcdir | --srcdi | --srcd | --src | --sr | --s)
	next_srcdir=yes ;;

     -arch=* | --arch=*)
       package=`echo $arg|sed 's/-*arch=//'`
       # Delete all the valid chars; see if any are left.
       if test -n "`echo $package|sed 's/[-a-zA-Z0-9_]*//g'`"; then
         print_error "configure: $package: invalid architecture name"; exit 1
       fi
       ARCH=`echo $package|sed s/-/_/g`
       eval "arch_`echo $package|sed s/-/_/g`=1"
       ;;

     -bopt=* | --bopt=*)
       package=`echo $arg|sed 's/-*bopt=//'`
       # Delete all the valid chars; see if any are left.
       if test -n "`echo $package|sed 's/[-a-zA-Z0-9_]*//g'`"; then
         print_error "configure: $package: invalid bopt value" ; exit 1
       fi
       BOPT=`echo $package|sed s/-/_/g`
       eval "bopt_`echo $package|sed s/-/_/g`=1" ;;

     -comm=* | --comm=*)
       package=`echo $arg|sed 's/-*comm=//'`
       # Delete all the valid chars; see if any are left.
       if test -n "`echo $package|sed 's/[-a-zA-Z0-9_]*//g'`"; then
         print_error "configure: $package: invalid communications layer name";
	  exit 1
       fi
       COMM=`echo $package|sed s/-/_/g`	
       eval "comm_`echo $package|sed s/-/_/g`=1" 
       # Handle possible synonyms
       if test -n "$comm_ch_mpl" ; then
           comm_ch_eui=1
           COMM=ch_eui
       fi
	;;

     -device=* | --device=*)
       package=`echo $arg|sed 's/-*device=//'`
       # Delete all the valid chars; see if any are left.
       if test -n "`echo $package|sed 's/[-a-zA-Z0-9_]*//g'`"; then
         print_error "configure: $package: invalid device name" ; exit 1
       fi
       DEVICE=$package    #|sed s/-/_/g`	
       eval "device_$package=1" 
       # Handle possible synonyms
       if test -n "$device_ch_mpl"; then
           device_ch_eui=1
           DEVICE=ch_eui
       fi
       ;;

     -devicedir=* | --devicedir=*)
       package=`echo $arg|sed 's/-*devicedir=//'`
       # Delete all the valid chars; see if any are left.
       DEVICE_DIR=$package	
	;;

     -transportdir=* | --transportdir=*)
       package=`echo $arg|sed 's/-*transportdir=//'`
       # Delete all the valid chars; see if any are left.
       TRANSPORT_DIR=$package
	;;

     -mpedbg | --mpedbg)
	# Definitions of DEFS must follow the PREPARE
	MPE_MPI_EXT_C="$MPE_MPI_EXT_C dbxerr.c"
	MPE_MPI_EXT_O="$MPE_MPI_EXT_O dbxerr.o"
	;;

     -ar_nolocal | --ar_nolocal)
	AR_LOCAL=''
	;;

     -nodevdebug | --nodevdebug)
        NODEVDEBUG=1
	DEVCFLAGS="$DEVCFLAGS -DMPID_DEBUG_NONE -DMPID_STAT_NONE"
	;;

     -no_short_longs | --no_short_longs)
	NOSHORTLONGS=1
	;;

     -memdebug | --memdebug)
	MEMDEBUG=1
	;;

     -use_rndv | --use_rndv)
        USERNDV=1
	DEVCFLAGS="$DEVCFLAGS -DMPID_USE_RNDV"
	;;

     -pre_post | --pre_post)
        PREPOST=1
	DEVCFLAGS="$DEVCFLAGS -DMPID_PKT_PRE_POST"
	;;

     -pre_alloc | --pre_alloc)
        PREALLOC=1
	DEVCFLAGS="$DEVCFLAGS -DMPID_PKT_PREALLOC"
	;;

     -var_pkt | --var_pkt)
        VARPKT=1
	DEVCFLAGS="$DEVCFLAGS -DMPID_PKT_VAR_SIZE"
	;;

     -compressed_pkt | --compressed_pkt)
	COMPRESSEDPKT=1
	DEVCFLAGS="$DEVCFLAGS -DMPID_PKT_COMPRESSED"
	;;

     -pkt_size=* | --pkt_size=*)
	pktsize=`echo $arg|sed 's/-*pkt_size=//'`
	PKTSIZE=$pktsize
       	DEVCFLAGS="$DEVCFLAGS -DMPID_PKT_MAX_DATA_SIZE=$pktsize"
	;;

     -limited_buffers | --limited_buffers)
	LIMITEDBUFFERS=1
	DEVCFLAGS="$DEVCFLAGS -DMPID_LIMITED_BUFFERS"
	;;

     -tiny_buffers | --tiny_buffers)
	TINYBUFFERS=1
	DEVCFLAGS="$DEVCFLAGS -DMPID_TINY_BUFFERS"
	;;

     -nolimited_buffers | --nolimited_buffers)
	LIMITEDBUFFERS=0
	DEVCFLAGS="$DEVCFLAGS -DMPID_NO_LIMITED_BUFFERS"
	;;

     -notiny_buffers | --notiny_buffers)
	TINYBUFFERS=0
	DEVCFLAGS="$DEVCFLAGS -DMPID_NO_TINY_BUFFERS"
	;;

     -adi_collective | --adi_collective)
	ADI_COLLECTIVE=1
	;;

     -adi_coll_world | --adi_coll_world)
	ADI_COLL_WORLD=1
	;;

     -f77idx)
	# Force POINTER_64_BITS definition
	F77IDX=1
	;;

     -f90nag)
        # Insert module 
	F90UNIX="      use f90_unix"
	FC=f90
	# Still to do - make sure that the Fortran interface is correctly
	# selected.
        ;;

     -c++ | --c++)
       CPP_DIR="src/c++"
       CPP_COMPILER="g++"
       echo Compiling C++ interface with g++ ;;

     -c++=* | --c++=*)
       package=`echo $arg|sed 's/-*c\+\+=//'`
       # Delete all the valid chars; see if any are left.
       if test -n "`echo $package|sed 's/[-a-zA-Z0-9_+]*//g'`"; then
         print_error "configure: $package: invalid c++ compiler name"; exit 1
       fi
       CPP_DIR="src/c++"
       CPP_COMPILER=`echo $package`		
       echo Compiling C++ interface with $package ;;

     -cc=* | --cc=*)
	CC=`echo $arg|sed 's/-*cc=//'`
	USERCC=1
	;;

     -opt=* | --opt=*)
       package="`echo $arg|sed 's/-*opt=//'`"
       # Delete all the valid chars; see if any are left.
       OPTFLAGS=$package ;;

     -mpe | --mpe)
       MPE_DIR="mpe"
       echo "Make will build MPE routines" ;;
 
     -no_mpegraphics | --no_mpegraphics)
       MPE_GRAPHICS=""
       echo "Make will not build MPE graphics routines" ;;

     -x11_lib=* | --x11_lib=* )
       USERXLIB=1
       X11LIB="`echo $arg|sed 's/-*x11_lib=//'`"
       ;;

     -x11_inc=* | --x11_inc=* )
       USERXLIB=1
       X11INC="`echo $arg|sed 's/-*x11_inc=//'`"
       ;;

     -make=* | --make=*)
       package=`echo $arg|sed 's/-*make=//'`
       MAKE="$package"
	;;

     -nof77 | --nof77)
       echo "Don't build the Fortran interfaces"
       NOF77=1
       HAS_FORTRAN=0
       CFLAGS="-DMPID_NO_FORTRAN $CFLAGS"
       MPI_FOBJECTS="" ;;
	
     -wish=* | --wish=*)
	wishloc="`echo $arg|sed 's/-*wish=//'`"
       ;;

     -tkdir=* | --tkdir=*)
	TK_DIR="`echo $arg|sed 's/-*tkdir=//'`"
       ;;

     -tcldir=* | --tcldir=*)
	TCL_DIR="`echo $arg|sed 's/-*tcldir=//'`"
       ;;

     -echo )
	set -x 
	;;

     -u | -usage | --usage | --usag | --usa | --us | --u | -help | --help )
	print_usage >& 2
       exit 1 ;;

     -v | -verbose | --verbose | --verbos | --verbo | --verb | --ver | --ve | --v)
       verbose=yes ;;

     *) 
	print_error "Unrecognized configure option $arg" 
	;;
    esac
  fi
done]

dnl Finish the initalization
AC_PREPARE()
#
# There are definitions in aclocal.m4 that must be in the same directory
# as this configure file for autoconf to properly build configure.
#
# Set basic defintions based on flags set from commandline
#
if test "$ADI_COLLECTIVE" = 1 ; then
    AC_DEFINE(MPID_USE_ADI_COLLECTIVE)
fi
if test "$ADI_COLL_WORLD" = 1 ; then
    AC_DEFINE(MPID_COLL_WORLD)
fi
#
#
# record top-level directory (this one)
# A problem.  Some systems use an NFS automounter.  This can generate
# paths of the form /tmp_mnt/... . On SOME systems, that path is
# not recognized, and you need to strip off the /tmp_mnt. On others, 
# it IS recognized, so you need to leave it in.  Grumble.
# The real problem is that OTHER nodes on the same NFS system may not
# be able to find a directory based on a /tmp_mnt/... name.
#
# It is WRONG to use $PWD, since that is maintained only by the C shell,
# and if we use it, we may find the 'wrong' directory.  To test this, we
# try writing a file to the directory and then looking for it in the 
# current directory.  Life would be so much easier if the NFS automounter
# worked correctly.
MPIR_TRIAL=$PWD
if test "$MPIR_TRIAL" != "" -a -d "$MPIR_TRIAL" ; then 
    if test -r $MPIR_TRIAL/.foo ; then
        /bin/rm -f $MPIR_TRIAL/.foo
	/bin/rm -f .foo
    fi
    if test -r $MPIR_TRIAL/.foo -o -r .foo ; then
	MPIR_TRIAL=
    else
	echo "test" > $MPIR_TRIAL/.foo
	if test ! -r .foo ; then
	    MPIR_TRIAL=
	fi
	/bin/rm -f $MPIR_TRIAL/.foo
    fi
fi
if test "$MPIR_TRIAL" = "" ; then
    MPIR_TRIAL=`pwd | sed -e 's%/tmp_mnt/%/%g'`
fi
#
# First, test the PWD is sensible
if test ! -r $MPIR_TRIAL/src/pt2pt/Makefile.in ; then
    # PWD must be messed up
    MPIR_TRIAL=`pwd`
    if test ! -r $MPIR_TRIAL/src/pt2pt/Makefile.in ; then
	print_error "Cannot determine the root directory!" 
        exit 1
    fi
    MPIR_TRIAL=`pwd | sed -e 's%/tmp_mnt/%/%g'`
    if test ! -d $MPIR_TRIAL ; then 
        print_error "Warning: your default path uses the automounter; this may"
        print_error "cause some problems if you use other NFS-connected systems."
        MPIR_TRIAL=`pwd`
    fi
fi
if test -z "$MPIR_TRIAL" ; then
    MPIR_TRIAL=`pwd | sed -e 's%/tmp_mnt/%/%g'`
    if test ! -d $MPIR_TRIAL ; then 
        print_error "Warning: your default path uses the automounter; this may"
        print_error "cause some problems if you use other NFS-connected systems."
        MPIR_TRIAL=`pwd`
    fi
fi
MPIR_HOME=$MPIR_TRIAL
#
#
# Check that an ARCH was set
# If it wasn't set, try to guess using "util/tarch"
#
if test ! -n "$ARCH" -a -x util/tarch ; then
    echo "Trying to guess architecture ..."
    ARCH=`util/tarch`
    if test -z "$ARCH" ; then
       print_error "Error: Couldn't guess target architecture, you must"
       print_error "       set an architecture type with -arch=<value>"
       exit 1
    fi
    eval "arch_$ARCH=1"
    echo "  configuring for \"$ARCH\" target architecture"
fi
if test -n "$arch_sgi" ; then
    arch_IRIX=1
    ARCH=IRIX
fi
if test -n "$arch_sgi5" ; then
    arch_IRIX5=1
    ARCH=IRIX
fi
if test -n "$arch_cray" ; then
    arch_CRAY=1
    ARCH=CRAY
fi
#
# Check that a DEVICE was set
# If it wasn't set, try to guess using "util/tdevice"
#
if test ! -n "$DEVICE" -a -x util/tdevice ; then
		echo "Trying to guess device ..."
    DEVICE=`util/tdevice $ARCH`
    if test ! -n "$DEVICE" ; then
       print_error "Error: Couldn't guess device, you must" 
       print_error "       set a device with -device=<value>" 
       exit 1
    fi
    eval "device_$DEVICE=1" 
    echo "  configuring for \"$DEVICE\" device"
fi
#
# Check for a VALID device
if test ! -d mpid/$DEVICE ; then
    print_error "$DEVICE is not a valid device!" 
    exit 1
fi
#
#
# Set Default values of variables
CC=${CC:-cc}
CLINKER=$CC
F77=${FC:-f77}
if test -n "$FC" ; then
    USERF77=1
fi
FLINKER=$F77
#
# First, check for the basic CC and Ranlib 
if test -z "$USERCC" ; then
    AC_PROG_CC()
fi
AC_PROG_INSTALL
#
# Using this autoconf macro for ranlib doesn't handle the problem 
# of 'helpful' ranlib's that issue error messages (!).  Once
# we've identified the proper compiler etc, we'll try this 
# ranlib below; if it fails, we'll replace it with ':'
#
AC_PROG_RANLIB
AR="ar cr$AR_LOCAL"
# CPRP is the version of cp that accepts -r and -p arguments.
# See CRAY below
CPRP="cp"
INCLUDE_PATH=""
USER_INCLUDE_PATH=""
USER_DEFS=""
LIB_LIST="-lmpi"
MPE_LIBS=""
# Fixup for make
PAC_MAKE_IS_GNUMAKE
PAC_MAKE_IS_BSD44
#
# Check that a DEVICE was set
if test -z "$DEVICE" ; then
    print_error "You must set a device type with -device=<value>" 
    exit 1
fi
#
# Check that an ARCH was set
if test -z "$ARCH" ; then
    print_error "You must set an architecture type with -arch=<value>"
    exit 1
fi
#
# Set comm from device?
if test -z "$COMM" ; then
    COMM=$DEVICE
fi
# If some extensions are set, mark the defs
if test -n "$MPE_MPI_EXT_C" ; then
   AC_DEFINE(MPE_USE_EXTENSIONS)
fi

#
# We should provide a way to specify a particular IRIX version, rather 
# than requiring the this code to figure everything out.
# In particular, there are IRIX-like systems that do not have the 'hinv'
# command.
#
if test -n "$arch_IRIX"; then
   # Every version and machine under IRIX is incompatible with every other
   # version.  This block of code replaces a generic "IRIX" arch value 
   # with 
   #  IRIX_<version>_<chip>
   #  For example
   #  IRIX_5_4400 (IRIX 5.x, using MIPS 4400)
   osversion=`uname -r | sed 's/\..*//'`
   # The tail -1 is necessary for multiple processor SGI boxes
   # We might use this to detect SGI multiprocessors and recommend
   # -comm=shared
   cputype=`hinv -t cpu | tail -1 | cut -f 3 -d' '`
   if test -z "$cputype" ; then
	print_error "Could not get cputype from hinv -t cpu command."
	print_error "Please send "
	hinv -t cpu 2>&1
	hinv -t cpu | cut -f 3 -d' ' 2>&1
	print_error "to mpi-bugs@mcs.anl.gov" 
	exit 1
   fi
   echo "checking for osversion and cputype"
   # cputype may contain R4400, R2000A/R3000, or something else.  
   # We may eventually need to look at it.
   if test -z "$osversion" ; then
	print_error "Could not determine OS version.  Please send" 
        print_error " " 
	uname -a
	print_error "to mpi-bugs@mcs.anl.gov" 
        exit 1
   elif test $osversion = 4 ; then
	# Nathan told us that things worked for IRIX 4 as well; 
	# however, we need 'ar ts libname' (ranlib) on version 4 but 
	# not the others
        true
   elif test $osversion = 5 ; then
	true
   elif test $osversion = 6 ; then
	true
   else 
       print_error "Could not recognize the version of IRIX (got $osversion)"
       print_error "MPICH knows about versions 4, 5 and 6; the version being"
       print_error "returned from uname -r is $osversion."
       print_error "Please send"
       uname -a 2>&1
       hinv 2>&1
       print_error "to mpi-bugs@mcs.anl.gov"
       exit 1
   fi
   echo "getting cputype..."
   OLD_ARCH=IRIX
   IRIXARCH="$ARCH_$osversion"
   # Now, handle the chip set
   changequote(,)dnl
   cputype=`echo $cputype | sed -e 's%.*/%%' -e 's/R//' | tr -d "[A-Z]"`
   changequote([,])dnl
   case $cputype in 
	3000) ;;
	4000) ;;
	4400) ;;
	4600) ;;
	8000) ;;
        *)
	print_error "Unexpected IRIX/MIPS chipset $cputype.  Please send the output"
	print_error " "
        uname -a 2>&1
        hinv 2>&1 
 	print_error " " 
        print_error "to mpi-bugs@mcs.anl.gov" 
	print_error "MPICH will continue and assume that the cputype is"
        print_error "compatible with a MIPS 4400 processor"
 	print_error " " 
        cputype=4400
	;;
   esac
   IRIXARCH="$IRIXARCH_$cputype"
   echo "IRIX-specific architecture is $IRIXARCH"
fi

# special case 'sgi5' for use on MESHINE which is much like an SGI running
# irix 5 with r4400 chips, but does not have 'hinv', so above code doesn't
# work
if test -n "$arch_sgi5"; then
   osversion=5
   cputype=4400
   IRIXARCH="$ARCH_$osversion"
   IRIXARCH="$IRIXARCH_$cputype"
   echo "IRIX-specific architecture is $IRIXARCH"
fi

if test -n "$arch_EWS_UX_V" ; then
    # This is a Unix System V system running on MIP/SGI processors
    LIB_LIST="$LIB_LIST -lsocket -lnsl -lc"	
fi
#
# End of architecture-specific tests
#
if test ! -d lib ; then 
   mkdir lib
fi
if test ! -d lib/$ARCH ; then 
   mkdir lib/$ARCH
fi
if test ! -d lib/$ARCH/$COMM ; then 
   mkdir lib/$ARCH/$COMM
fi

# Check all of the devices first; they need to be known 
# (especially chameleon) before doing the transport layer

# check whether --device=chameleon was given
if test -n "$device_chameleon"; then
  if test "$DEVICE_DIR" = "" ; then
   echo "-----------------------------------------------------"
   echo "Please enter path of the chameleon directory:";
   read path
   echo "                                              "
  else
   path=$DEVICE_DIR
  fi
  TOOLS_DIR=$path
  TOOLS_LIB_DIR="$path/libs/libs/$ARCH"
  LIB_PATH="$LIB_PATH -L$TOOLS_LIB_DIR"
  if test -s $TOOLS_LIB_DIR/tools$COMM.a ; then
      print_error "Please update to the most recent (1.2) release.  Previous"
      print_error "versions are incompatible with MPICH"
      exit 1
  elif test -s $TOOLS_LIB_DIR/libpecomm$COMM.a ; then
      LIB_LIST="$LIB_LIST -lpecomm$(COMM) -lpetsc -lpecore"
  else 
      print_error "Could not find Chameleon libraries in $path"
      exit 1
  fi
  INCLUDE_PATH="-I$TOOLS_DIR"
  #
  # the make_include should contain definitions of the DEVICE_LIB,
  # DEVICE_MAIN, and DEVICE_MAINF, all of which may be NULL.
  # This is mainly for compatibility with old MPI Makefiles.
  # New ones probably shouldn't need or use this macro...
  DEVICE_MAKE_INCLUDE="include $MPIR_HOME/mpid/chameleon/makeinclude"
  DEVICE_OBJS=""
  # In addition, the include lines for the build itself (but not for
  # example programs) needs to at least include whether the system 
  # supports heterogenity
  if test -n "$comm_p4" -o -n "$comm_pvm" -o -n "$comm_pvm3" ; then
      AC_DEFINE(MPID_HAS_HETERO)
      IS_HETERO=1
  fi 
  if test -z "$USERCC" -a \( -n "$comm_eui" -o -n "$comm_mpl" \) ; then
      CLINKERval=
      AC_PROGRAMS_CHECK(CLINKERval,mpCC mpcc)
      if test -n "$CLINKERval" ; then
	CLINKER=$CLINKERval
      else
	echo "Could not find mpCC or mpcc!"
	exit 1
      fi
      FLINKER=mpxlf
      CONFIGURE_ARGS_CLEAN="`echo $CONFIGURE_ARGS_CLEAN | tr ' ' '_'`"
  fi
fi

# 
# Check for Unix Variants
AC_AIX
AC_MINIX
#

if test -n "$device_ch_nx"; then
  if test -z "$USERCC" ; then
      CC=icc
  fi
  if test -z "$USERF77" ; then
      F77=if77
  fi
  GCC=""
  CLINKER=$CC
  FLINKER=$F77
  # If this version of the intel compiler accepts the -nx flag, use it.
  if icc -nx > /dev/null 2>&1 ; then
    LIB_LIST="$LIB_LIST -nx"
    CFLAGS="$CFLAGS -nx"
  fi
  #OPTFLAGS="-O"
  AR="ar860 crl"
  #RANLIB=true
fi

if test -n "$device_ch_shmem"; then
  if test -n "$arch_solaris" ; then
    LIB_LIST="$LIB_LIST -lthread"
  fi
  if test -n "$arch_ksr" ; then
    LIB_LIST="$LIB_LIST -lrpc"
  fi
  if test -n "$arch_alpha" ; then
    LIB_LIST="$LIB_LIST -lrpc"
  fi
fi

if test -n "$device_ch_nc"; then
  if test -z "$USERCC" ; then
     CC=ncc
  fi
  if test -z "$USERF77" ; then
     F77=nf77
  fi
  GCC=""
  CLINKER=$CC
  FLINKER=$F77
  AR="nar cr"
  #RANLIB=true
fi

if test -n "$device_ch_cmmd"; then
  if test -z "$USERCC" ; then
     CC=cc
  fi
  # TMC Told us this should be f77
  if test -z "$USERF77" ; then	
     F77=f77      
  fi
  GCC=""
  CLINKER="cmmd-ld -comp $CC"
  FLINKER="cmmd-ld -comp $F77"
  AR="ar cr"
  #RANLIB=ranlib
fi

#
# Choice of compilers on CS-2 is hard.
# There are many possible options
# PGI compilers   : good if you are on vector nodes (for f77 at least)
# Sunpro compilers: likely to be around somewhere.
# Apogee compilers: produce fast code.
#
# Unless the user told us, we try apcc, cc, pgcc in that order
#
if test -n "$device_ch_meiko"; then
  if test -z "$USERCC" ; then
      # /opt/SUNWspro/bin/cc,/opt/apogee/bin/apcc,/opt/PGI/bin/cc,
      # /opt/gcc/bin/gcc
      CCval=''
      AC_PROGRAMS_CHECK(CCval,cc apcc pgcc gcc)
      if test -z "$CCval" ; then
          print_error "Could not find a C compiler"
	  exit 1
      elif test "$CCVal" = "cc" ; then
          CC="cc -g -xcg92"
	  F77="f77 -g -cg92"
      else
	  CC=$CCval
      fi
  fi
  if test -z "$USERFC" ; then
      AC_PROGRAMS_CHECK(FCval,f77 apf77 pgf77)
      if test -n "$FCval" -a "$FCval" = f77 ; then
	F77="f77 -g -cg92"
      else
        F77="$FCval"
      fi
  fi
  GCC=""
  CLINKER="$CC"
  FLINKER="$F77"
  # Jim Cownie claims that -laio is no longer needed ...
  if test -s /opt/MEIKOcs2/lib/libmpsc.a ; then
      LIB_LIST="$LIB_LIST -L/opt/MEIKOcs2/lib -lmpsc -lew -lelan"
  else
      print_error "Could not find the library /opt/MEIKOcs2/lib/libmpsc.a"
      print_error "Can not build MEIKO version"
      exit 1
  fi
  #CFLAGS="$CFLAGS"
  # This include is needed for the elan.h files
  DEVCFLAGS="$DEVCFLAGS -I/opt/MEIKOcs2/include"
  # These were recommended by Jim Cownie
  if test -z "$OPTFLAGS" ; then
#      OPTFLAGS="-xcg92 -xO2"
       OPTFLAGS="-O"
  fi
  AR="ar cr"
  #RANLIB=true
fi

if test -n "$device_meiko"; then
  if test -z "$USERCC" ; then
      if test -x "/opt/SUNWspro/bin/cc" ; then
          CC="cc -g -xcg92"
	  F77="f77 -g -cg92"
      elif test -x "/opt/apogee/bin/apcc" ; then
          CC=apcc
	  F77=apf77
      elif test -x "/opt/PGI/bin/cc" ; then
          CC=pgcc
	  F77=pgf77
      elif test -x "/opt/gcc/bin/gcc" ; then
          CC=gcc
          F77=
      else
          print_error "Could not find a C compiler"
	  exit 1
      fi
  fi
  GCC=""
  CLINKER="$CC"
  FLINKER="$F77"
  if test -s /opt/MEIKOcs2/lib/libew.a ; then
      LIB_LIST="$LIB_LIST -L/opt/MEIKOcs2/lib -lew -lelan"
  else
      print_error "Could not find the library /opt/MEIKOcs2/lib/libew.a"
      print_error "Can not build MEIKO version"
      exit 1
  fi
  #CFLAGS="$CFLAGS"
  # This include is needed for the elan.h files
  DEVCFLAGS="$DEVCFLAGS -I/opt/MEIKOcs2/include"
  # These were recommended by Jim Cownie
  if test -z "$OPTFLAGS" ; then
#      OPTFLAGS="-xcg92 -xO2"
      OPTFLAGS="-O"
  fi
  AR="ar cr"
  #RANLIB=true
fi

# We require ch_euih as the COMM for the euih version
if test -n "$device_ch_eui"; then
  if test -n "$comm_ch_euih" ; then 
     # This is for the Yorktown EUI-H (sometimes known as MPLp).
     # We have no access to the Kingston version (MPLp).
     if test -z "$USERCC" ; then
         CC="xlc -Deuih"
     fi
     if test -z "$USERF77" ; then
         F77=xlf
     fi
     GCC=""
     CLINKER=$CC
     FLINKER=$F77
     AR="ar cr$AR_LOCAL"
     #RANLIB="ranlib"
     if test -s /usr/lpp/euih/eui/eui.exp ; then
         LIB_LIST="$LIB_LIST -bimport:/usr/lpp/euih/eui/eui.exp"
     else
         print_error "You do not have the file /usr/lpp/euih/eui/eui.exp that"
         print_error "is required to use the -comm=ch_euih version of the"
         print_error "ADI device.  This is for use with the tb0 version of the"
         print_error "IBM-Yorktown EUI-H message-passing library."
         exit 1
     fi
  else
     # This is intended for the Standard POE/MPL version
     # May want to select mpCC instead
     if test -z "$USERCC" ; then
	 CCval=
         AC_PROGRAMS_CHECK(CCval,mpCC mpcc "$CC")
         if test -n "$CCval" ; then
	    CC=$CCval
	    if test "$CC" = mpcc ; then 
	        TESTCC=xlc
	    elif test "$CC" = mpCC ; then
        	TESTCC=xlC
	    fi
         else
            echo "Could not find mpCC or mpcc!"
	    exit 1
         fi
     fi
     CLINKER=$CC
     CONFIGURE_ARGS_CLEAN="`echo $CONFIGURE_ARGS_CLEAN | tr ' ' '_'`"
     GCC=""
     if test -z "$USERF77" ; then
         F77=mpxlf
     fi
     FLINKER=$F77
     AR="ar cr$AR_LOCAL"
     #RANLIB="ranlib"
  fi
fi
#
# Shared-memory (processes) device.  Only need to set mpirun default machine.
if test -n "$device_ch_shmem" ; then
   DEFAULT_MACHINE="smp"
   # Check for MMAP
   SAVEDEFS="$DEFS"
   DEFS=""
   AC_HAVE_FUNCS(mmap)
   if test -z "$arch_solaris" -a -z "$arch_IRIX" ; then
       AC_HAVE_FUNCS(gettimeofday)
   fi
   DEV_DEFS="$DEFS"
   DEFS="$SAVEDEFS"
fi

if test -n "$device_ch_p4"; then
  echo "About to do p4 device"
#  INCLUDE_PATH="$INCLUDE_PATH -I$MPIR_HOME/mpid/ch_p4/p4-1.4/include"
# This needs to get the other libraries as required for the specific
# architecture.  
#  LIB_LIST="$LIB_LIST -bimport:/usr/lpp/euih/eui/eui.exp"
#
# P4's arch specification is different from MPI's (sun4 vs. SUN, etc.)
# Here we set P4_ARCH to the right value, which we deduce from $ARCH and $COMM
# Note that the IRIX code further below may make further changes to 
# P4_ARCH
  if test "$ARCH" = "rs6000"; then
    case $COMM in
      euih)
        P4_ARCH=SP1_EUIH ;;
      eui)
        P4_ARCH=SP1_EUI ;;
      p4)
        P4_ARCH=RS6000 ;;
      *)
        P4_ARCH=RS6000 ;;
    esac
  elif test "$ARCH" = "IRIX" ; then
    P4_ARCH=SGI
    if test $osversion = 6 ; then
        if test "$COMM" = "shared" ; then
 	    P4_ARCH=SGI_CH
	    if test $cputype = 8000 ; then
	        P4_ARCH=SGI_CH64
	        DEFAULT_MACHINE="sgi_mp"
	    fi
	else
     	    P4_ARCH=SGI
	    if test $cputype = 8000 ; then
	        P4_ARCH=SGI
	        DEFAULT_MACHINE="sgi"
	    fi
	fi
    elif test $osversion = 5 ; then 
        P4_ARCH=SGI
        if test "$COMM" = "shared" ; then
	    P4_ARCH=SGI_MP
	    DEFAULT_MACHINE="sgi_mp"
	fi
    fi  
  else
    P4_ARCH=`echo $ARCH | sed \
	    -e 's/sun4/SUN/g'            -e 's/intelnx/IPSC860/g'  \
	    -e 's/IRIX/SGI/g'            -e 's/hpux/HP/g'          \
	    -e 's/solaris/SUN_SOLARIS/g' -e 's/c2mp/CONVEX/g'      \
	    -e 's/alpha/ALPHA/g'         -e 's/dec5000/DEC5000/g'  \
	    -e 's/NeXT/NEXT/g'           -e 's/paragon/PARAGONIP/g'  \
	    -e 's/inteldelta/DELTA/g'    -e 's/symmetry/SYMMETRY/g'\
	    -e 's/cray/CRAY/g'           -e 's/tc2000/TC_2000/g'   \
	    -e 's/ksr/KSR/g'             -e 's/freebsd/FREEBSD/g'  \
	    -e 's/cm5/CM5/g'             -e 's/meiko/MEIKO_CS2/g'  \
            -e 's/rs6000/RS6000/g'	 -e 's/symm_ptx/SYMMETRY_PTX/g'`
  fi
echo "Done setting p4arch..."
#
echo "Configuring p4 subsystem..."
# Make sure that the lib Makefile gets remade
  if test "$USERCC" = 1 ; then 
      (cd mpid/ch_p4/p4-1.4 ; \
	./configure -p4arch=$P4_ARCH -p4make="$MAKE" -opt="$OPTFLAGS" -cc="$CC" )
      if test $? != 0 ; then
          print_error "Configure of the p4 sub-system may have failed"
      fi
    else
      (cd mpid/ch_p4/p4-1.4 ; \
	./configure -p4arch=$P4_ARCH -p4make="$MAKE" -opt="$OPTFLAGS" )
      if test $? != 0 ; then
          print_error "Configure of the p4 sub-system may have failed"
      fi
  fi
  P4_MDEPLIBS=`$MAKE -f mpid/ch_p4/p4-1.4/lib/Makefile p4mdeplibs | grep -v make`
  LIB_LIST="$LIB_LIST $P4_MDEPLIBS"
  #
  P4_MDEPCFLAGS=`$MAKE -f mpid/ch_p4/p4-1.4/lib/Makefile p4mdepcflags | grep -v make`
  if test -n "$P4_MDEPCFLAGS" ; then
      CFLAGS="$CFLAGS $P4_MDEPCFLAGS"
      # Note that USER_CFLAGS inherits all of CFLAGS.
  fi
  if test ! -d lib/$ARCH/ch_p4 ; then 
      mkdir lib/$ARCH/ch_p4
  fi 
#   
#   We need to change the makefile.protos in mpid/ch_p4/p4-1.4 to use
#   the correct libraries
#   if test -n "$COMM" ; then 
#       COMM="ch_p4_$COMM"
#   else
       COMM="ch_p4"
#   fi
  if test ! -d lib/$ARCH/$COMM ; then 
       mkdir lib/$ARCH/$COMM
  fi 
#   p4 library is intergrated with libmpi.a...
#   LIB_PATH="$LIB_PATH -L$lib/$ARCH/$COMM"
#   LIB_LIST="$LIB_LIST -lp4";
  IS_HETERO=1
fi

if test -n "$arch_IRIX"; then
   # We now have to look at  all sorts of things to determine the
   # various flags.  We need to set both the CFLAGS and various options
   # for the linkers (by setting CLINKER and FLINKER).
   # The OS version and chipset were determined above so that they could
   # be used to set the P4_ARCH if necessary.
   if test $osversion = 4 ; then
	# Nathan's tests showed that we needed this.
	RANLIB="ar ts"
   elif test $osversion = 5 ; then
        # Turn off warnings about long doubles not being supported.
	if test "$CC" != "gcc" ; then
            CFLAGS="$CFLAGS -woff 728"
        fi
   elif test $osversion = 6 ; then
#       these flags settings are handled by including MDEPCFLAGS from p4
	if test $cputype = 8000 ; then
#	    CFLAGS="$CFLAGS -64 -mips4"
#	    FFLAGS="$FFLAGS -64 -mips4"
	    CLINKER="$CC -64 -mips4"
	    FLINKER="$F77 -64 -mips4"
        else
#	    CFLAGS="$CFLAGS -64 -mips3" 
#	    FFLAGS="$FFLAGS -64 -mips3"
	    CLINKER="$CC -64 -mips3 -non_shared"
	    FLINKER="$F77 -64 -mips3 -non_shared"
        fi
	if test -n "$P4_MDEPCFLAGS" ; then
  	    FFLAGS="$FFLAGS $P4_MDEPCFLAGS"
        fi
        # Warning flags are > 1000
#       CFLAGS="$CFLAGS -woff 1152,1174,1184"
#       1184 not in the p4 list
        if test "$CC" != "gcc" ; then
            CFLAGS="$CFLAGS -woff 1184,1174"
        fi
   fi
   echo "Messages about long doubles not being supported are being suppressed"
   dnl AC_HAVE_ LIBRARY ( sun )
fi

# for symm_ptx, add the ptx_ifile to  LIB_LIST
if test -n "$arch_symm_ptx"; then
  LIB_LIST="$LIB_LIST $MPIR_HOME/ptx_ifile"
fi

# check whether --arch=intelnx was given
# Use this for both i860 and Delta
if test -n "$arch_intelnx"; then
  if test -z "$USERCC" ; then
      CC=icc
  fi
  if test -z "$USERF77" ; then
      F77=if77
  fi
  GCC=""
  CLINKER=$CC
  FLINKER=$F77
  AR="ar860 crl"
  # Note that RANLIB may be set incorrectly if we are cross-compiling...
  RANLIB=true
  # inteldelta is used to select the appropriate args to killproc...
  DEVCFLAGS="$DEVCFLAGS -Dinteldelta"
  #
  # X11 includes are in /usr/ipsc/XDEV/i860/include-ipsc/X11
  # X11 libs are in /usr/ipsc/XDEV/i860/lib-coff
  # at least on one system
fi

# check whether --arch=paragon was given
if test -n "$arch_paragon"; then
  if test -z "$USERCC" ; then
      CC=icc
  fi
  if test -z "$USERF77" ; then
      F77=if77
  fi
  GCC=""
  CLINKER=$CC
  FLINKER=$F77
  #OPTFLAGS="-O"
  AR="ar860 crl"
  # Note that RANLIB may be set incorrectly if we are cross-compiling...
  RANLIB=true
  #echo "If you get errors about killproc, uncomment this line"
  #DEVCFLAGS="$DEVCFLAGS -DPARAGON_HAS_NO_KILLPROC"
fi


if test -n "$arch_CRAY"; then
   # The Fortran compiler might be cf77 or f77
   if test -z "$USERF77" ; then
       # This wierd function uses the VALUE of the first argument before
       # the second!
       F77=	
       AC_PROGRAMS_CHECK(F77,cf77 f77)
   fi
   FLINKER="$F77"
   # The CRAY cp doesn't even support -r (!!) but at least there 
   # is a version that does work.
   if test -x /usr/ucb/cp ; then
       CPRP="/usr/ucb/cp"
   else
       print_error "Using default cp for copy; install may fail if -r and -p"
       print_error "switches are not supported."
   fi
   # It might be better to use AR="bld qvz" than the regular ar clr
   DEVCFLAGS="$DEVCFLAGS -DMPID_FLOAT_CRAY"
fi

#
# The compilers are in /mpp/bin (at least on some systems)
# You may also need 
# setenv TARGET cray-t3d
# Also need -lsma library
if test -n "$arch_cray_t3d"; then
   DEFAULT_MACHINE="cray_t3d"
   # The Fortran compiler might be cf77
   if test -z "$USERCC" ; then
	CC="/mpp/bin/cc"
   fi
   if test -z "$USERF77" ; then
       	F77="/mpp/bin/cf77"
   fi
   #  
   LIB_LIST="$LIB_LIST -lsma"
   CFLAGS="$CFLAGS -Tcray-t3d"
# The dp switch on the following lines allows compilation of "double precision"
# at the cost of violating the Fortran standard
   print_error Setting double precision to be the same as real, in violation 
   print_error of the Fortran standard.  This is needed because Cray Fortran 
   print_error for the T3D does not support double precision and hence is 
   print_error not actually Fortran.
   FFLAGS="$FFLAGS -Ccray-t3d -dp"
   F77GETARG="call pxfgetarg(i,s,len(s),ierr)"
#   FLINKER="mppldr"
#   CLINKER="mppldr"
   FLINKER="$F77 -Ccray-t3d"
   CLINKER="$CC -Tcray-t3d"
   RANLIB=true
   # The CRAY cp doesn't even support -r (!!) but at least there 
   # is a version that does work.
   if test -x /usr/ucb/cp ; then
       CPRP="/usr/ucb/cp"
   else
       print_error "Using default cp for copy; install may fail if -r and -p"
       print_error "switches are not supported."
   fi
   ASMFILES_O=shmem_stack.o
   ASM="/mpp/bin/cam"
fi

# In default (pre-ANSI) mode, nested #if's cause most of the file to
# be SILENTLY skipped.  
if test -n "$arch_hpux" ; then
    if test -n "$device_ch_shmem" ; then
    ASMFILES_O="amem.o"
    fi
    # Reset the CFLAGS only if gcc not selected
    if test "$CC" != "gcc" ; then 
        CFLAGS="$CFLAGS -Aa -D_POSIX_SOURCE -D_HPUX_SOURCE"
	# Alternate...
	# -Ae is extended -Aa (only on some PA RISC systems)
	#CFLAGS="$CFLAGS -Ae +Olibcalls"
	#CLINKER="cc -Ae"
	# fort77 is the POSIX-compliant version of f77; fort77 can use 
	# -Ldirectory
	#F77=fort77
	#FLINKER=fort77
	#FFLAGS="$FFLAGS +ppu"
	# Try and see that this works
	AC_COMPILE_CHECK(Checking that HP compiler has ANSI option...,,,
		hpux_ansi=1,hpux_ansi=0)
	if test $hpux_ansi = 0 ; then
	    print_error "HPUX C compiler does not support ANSI mode!"
	    print_error "This mode is required because severe bugs in HPUX CPP"
	    print_error "cause problems.  Configuration continuing BUT	"
	    print_error "if you have trouble, consider using the GNU C"
	    print_error "compiler gcc instead."
	else
          print_error "HPUX C compiler is being forced into ANSI mode so that"
          print_error "severe bugs in HPUX CPP do not cause problems"
	fi
    fi
    # This may eliminate the need for +U77 ....
    F77GETARG=["call igetarg(i,s,len(s))"]
    # We can also remove +U77 and -lU77 from the p4 lib/defs.all file.
    # Note that +U77 is not available for all systems
#    FFLAGS="$FFLAGS +U77"
#    # Try and see if this works
#    print_error "Some (?) HPUX Fortran compilers require the switch +U77"
#    print_error "in order to correctly generate calls to getarg (used to get"
#    print_error "command line arguments).  This is a bug in the HPUX f77 (since"
#    print_error "calls to iargc ARE handled without this flag)."
#    print_error "Please check the log from the makefile to insure that"
#    print_error "the compiler accepted the +U77 argument and did not"
#    print_error "interpret it as +U, followed by an unrecognized 7."
fi

if test -n "$arch_UXPM" ; then
    # This asserts that Fortran passes functions by passing the address of the
    # pointer to the function.
    AC_DEFINE(FORTRAN_SPECIAL_FUNCTION_PTR)
fi

if test -n "$arch_alpha" ; then
   CFLAGS="$CFLAGS -DDBX_IS_OSF"
fi

#
# check whether --comm=p4 was given
if test -n "$comm_p4"; then
  if test "$TRANSPORT_DIR" = "" ; then
   echo "----------------------------------------------"
   echo "Please enter the location of the P4 directory:";
   read path
   echo "                                              "
  else 
   path=$TRANSPORT_DIR
  fi
  # XXX - This macro should take into account $ARCH - unfortunatly,
  # P4's arch specification is different from MPI's (sun4 vs. SUN, etc.)
  # The macro below is a vain attempt to do the right thing.
  P4_ARCH=`echo $ARCH | sed \
	  -e 's/sun4/SUN/g'            -e 's/intelnx/IPSC860/g'  \
	  -e 's/IRIX/SGI/g'            -e 's/hpux/HP/g'          \
	  -e 's/solaris/SUN_SOLARIS/g' -e 's/c2mp/CONVEX/g'      \
	  -e 's/alpha/ALPHA/g'         -e 's/dec5000/DEC5000/g'  \
	  -e 's/NeXT/NEXT/g'           -e 's/paragon/PARAGONIP/g'  \
	  -e 's/inteldelta/DELTA/g'    -e 's/symmetry/SYMMETRY/g'\
	  -e 's/cray/CRAY/g'           -e 's/tc2000/TC_2000/g'   \
          -e 's/ksr/KSR/g'             -e 's/freebsd/FREEBSD/g'  \
	  -e 's/cm5/CM5/g'             -e 's/meiko/MEIKO_CS2/g'  \
	  -e 's/rs6000/RS6000/g'       -e 's/symm_ptx/SYMMETRY_PTX/g'`
  P4_DIR=$path
  if test -s $P4_DIR/$P4_ARCH/lib/libp4.a ; then
      LIB_PATH="$LIB_PATH -L$P4_DIR/$P4_ARCH/lib";
      LIB_LIST="$LIB_LIST -lp4";
  else
      # Check for the alternate rs6000 paths (i.e., SP2, SP1, SP1_EUIH, 
      # SP1_EUI)
      if test $P4_ARCH = "RS6000" ; then
	  for P4_ARCH in SP2 SP1 SP1_EUIH SP1_EUI ; do
	     if test -s $P4_DIR/$P4_ARCH/lib/libp4.a ; then
      		LIB_PATH="$LIB_PATH -L$P4_DIR/$P4_ARCH/lib";
                LIB_LIST="$LIB_LIST -lp4";
	        break
	     fi
          done
          if test ! -s $P4_DIR/$P4_ARCH/lib/libp4.a ; then 
	     print_error "Could not find any of the RS6000 or SP libraries in"
	     print_error "$P4_DIR."
	     exit 1
          fi
      else
          print_error "Could not find the library $P4_DIR/$P4_ARCH/lib/libp4.a"
          print_error "Please check the value of -transport_dir (=$TRANSPORT_DIR)."
          exit 1
      fi
  fi
fi

# check whether --comm=pvm3 was given
if test -n "$comm_pvm3"; then
  if test "$TRANSPORT_DIR" = "" ; then
   echo "----------------------------------------------"
   echo "Please enter the location of the pvm3 directory:";
   read path
   echo "                                              "
  else
   path=$TRANSPORT_DIR
  fi 
  PVM_ARCH=`echo $ARCH | sed -e s/sun4/SUN4/g \\
  -e s/intelnx/I860/g\\
  -e s/IRIX/SGI/g\\
  -e s/rs6000/RIOS/g`
  # XXX - This macro should take into account $ARCH - unfortunatly,
  # PVM's arch specification is different from MPI's (sun4 vs. SUN4, 
  # etc.)
  # The macro below is a vain attempt to do the right thing.
  LIB_PATH="$LIB_PATH -L$path/lib/$PVM_ARCH";
  LIB_LIST="$LIB_LIST -lpvm3";
fi

# check whether --comm=pvm was given
if test -n "$comm_pvm"; then
  if test "$TRANSPORT_DIR" = "" ; then
   echo "----------------------------------------------"
   echo "Please enter the location of the pvm2.4.x directory:";
   read path
   echo "                                              "
  else
   path=$TRANSPORT_DIR
  fi 
  PVM_ARCH=`echo $ARCH | sed -e s/sun4/SUN4/g\\
  -e s/intelnx/I860/g\\
  -e s/IRIX/SGI/g\\
  -e s/rs6000/RS6000/g`
  # XXX - This macro should take into account $ARCH - unfortunatly,
  # PVM's arch specification is different from MPI's (sun4 vs. SUN4, 
  # etc.)
  # The macro below is a vain attempt to do the right thing.
  if test -s $path/src/$PVM_ARCH/libpvm.a ; then
      LIB_PATH="$LIB_PATH -L$path/src/$PVM_ARCH";
      LIB_LIST="$LIB_LIST -lpvm";
  else
      print_error "Could not find the PVM library $path/src/$PVM_ARCH/libpvm.a"
      print_error "Make sure that you have specified the correct transport"
      print_error "directory and version of PVM (this entry is for PVM 2.4.x)."
      exit 1
  fi
fi
# check whether --comm=euih was given
if test -n "$comm_euih" -a -z "$device_ch_eui" ; then
  if test -s /usr/lpp/euih/eui/eui.exp ; then
      LIB_LIST="$LIB_LIST -bimport:/usr/lpp/euih/eui/eui.exp";
  else
     print_error "You do not have the file /usr/lpp/euih/eui/eui.exp that"
     print_error "is required to use the -comm=ch_euih version of the"
     print_error "ADI device.  This is for use with the tb0 version of the"
     print_error "IBM-Yorktown EUI-H message-passing library."
     exit 1
  fi
fi

#
# Another gratuitous change for Solaris: Solaris 2.3 does not accept the "l"
# option.  Sun must be eager to discourage people from porting to their
# system.... 
if test -n "$arch_solaris" -o -n "$arch_meiko"; then
  AR="ar cr"
  #RANLIB=true
fi

# 
# Choose the "enhanced" compiler (will check the ANSI C version).
# Only do this if the device is NOT ch_eui, in which case we've
# already set the compilers (to either xlc/f or mpxlc/f)
if test -n "$arch_rs6000" -a ! -n "$device_ch_eui" -a ! -n "$comm_eui" ; then
  # We may want to look for xlC...
  if test -z "$USERCC" ; then
      CCval=
      AC_PROGRAMS_CHECK(CCval,xlC xlc cc)
      if test -n "$CCval" ; then
	 CC=$CCval
      fi
  fi
  CLINKER=$CC
  if test -z "$USERF77" ; then
      F77=xlf
  fi
  FLINKER=$F77
  GCC=""
fi
cross_compiling=0
AC_CROSS_CHECK()
if test $cross_compiling = 1 ; then
    if test $DEVICE = ch_shmem -o $DEVICE = ch_p4 -o $DEVICE = ch_tcp ; then
        print_error "Configure was unable to compile and run a simple program."
    fi
fi
# 
# Tests for X etc should go here ...
#
MPEGRAPHICS_SOURCE=""
MPEGRAPHICS_OBJS=""
MPEGRAPHICS_FSOURCE=""
MPEGRAPHICS_FOBJS=""
X_INC=""
X_LIB=""

if test -n "$MPE_DIR"; then
  MPE_DIR="$MPIR_HOME/$MPE_DIR"
  if test -n "$MPE_GRAPHICS"; then
   # FIND_X doesn't always work correctly when cross compiling, so we
   # try to be more careful and conservative
   if test -z "$USERXLIB" ; then 
    if test $cross_compiling = 0 ; then 
       AC_FIND_X()
       if test -n "$no_x" ; then
	  print_error "Did not find X11 libraries and/or include files"
       fi
    else
       # Try to compile a program with an include file.
       # I didn't use HEADER_CHECK because I want to insist that the 
       # code try to compile with the header
       no_x=true
       AC_COMPILE_CHECK([X11 headers],[#include <X11/Xlib.h>],,no_x="")
       if test -z "$no_x" ; then 
          # Try to link a simple X program
          AC_HAVE_LIBRARY(X11,no_x="",no_x="true")
       fi
       if test -n "$no_x" ; then
         print_error " " 
         print_error "X11 is not used when cross compiling (because of the"
         print_error "difficulties in finding the correct libraries)"
         print_error " "
       fi
     fi
   fi
  fi
  if test -n "$MPE_GRAPHICS" -a -z "$no_x" ; then
    MPE_LIBS="-lmpe -lX11 -lm"
    MPEGRAPHICS_SOURCE="mpe_graphics.c xcolor.c xframe.c xinit.c xwmap.c xmouse.c"
    MPEGRAPHICS_OBJS="mpe_graphics.o xcolor.o xframe.o xinit.o xwmap.o xmouse.o"
    MPEGRAPHICS_FSOURCE="mpe_graphicsf.c"
    MPEGRAPHICS_FOBJS="mpe_graphicsf.o"
    if test -z "$x_includes" ; then
      X_INC=""
    else
      X_INC="-I$x_includes"
    fi
    if test -z "$x_libraries" ; then
      X_LIB=""
    else
      X_LIB="-L$x_libraries"
      MPE_LIBS="$X_LIB -lmpe -lX11 -lm"
    fi
    # On the Meiko CS2, you have to add additional libraries to satisfy
    # the externals needed by -X11.
    if test -n "$arch_meiko" ; then
        MPE_LIBS="$MPE_LIBS -lsocket -lnsl"
    fi
  else
    MPE_GRAPHICS=""
    MPE_LIBS="-lmpe"
  fi
else
  MPE_GRAPHICS=""
fi
#
# Check for remote shell program
#
RSH_COMMAND=
AC_PROGRAMS_CHECK(RSH_COMMAND,remsh rsh)
#
# Check that the Fortran compiler is actually available:
if test $NOF77 = 0 ; then
    HAS_F77=
    PAC_PROGRAM_CHECK(HAS_F77,$F77,1,0)
else
    HAS_F77=0
fi
if test $HAS_F77 = 0 -a $NOF77 = 0 ; then
    NOF77=1
    HAS_FORTRAN=0
    CFLAGS="$CFLAGS -DMPID_NO_FORTRAN"
    MPI_FOBJECTS="" 
elif test $HAS_F77 = 1 ; then
   # Check for strange behavior of Fortran.  For example, some FreeBSD
   # systems use f2c to implement f77, and the version of f2c that they 
   # use generates TWO (!!!) trailing underscores
   # Currently, WDEF is not used but could be...
   #
   # Eventually, we want to be able to override the choices here and
   # force a particular form.  This is particularly useful in systems
   # where a Fortran compiler option is used to force a particular
   # external name format (rs6000 xlf, for example).
   (cd src/env ; /bin/rm -f initfcmn.o ; \
	$F77 $FFLAGS -c initfcmn.f > /dev/null 2>&1 )
   if test ! -s src/env/initfcmn.o ; then
        print_error "Unable to test Fortran compiler"
        print_error "(compiling a test program failed to produce an "
        print_error "object file).  You can make the same test as "
        print_error "configure just used with "
        print_error "(cd src/env ; $F77 $FFLAGS -c initfcmn.f )"
	NOF77=1
        HAS_FORTRAN=0
        CFLAGS="$CFLAGS -DMPID_NO_FORTRAN"
        MPI_FOBJECTS="" 
   else
    # We have to be careful here, since the name may occur in several
    # forms.  We try to handle this by testing for several forms
    # directly.
    if test $arch_CRAY ; then
     # Cray doesn't accept -a ...
     nameform1=`strings src/env/initfcmn.o | grep mpir_init_fop_  | head -1`
     nameform2=`strings src/env/initfcmn.o | grep MPIR_INIT_FOP   | head -1`
     nameform3=`strings src/env/initfcmn.o | grep mpir_init_fop   | head -1`
     nameform4=`strings src/env/initfcmn.o | grep mpir_init_fop__ | head -1`
    else
     nameform1=`strings -a src/env/initfcmn.o | grep mpir_init_fop_  | head -1`
     nameform2=`strings -a src/env/initfcmn.o | grep MPIR_INIT_FOP   | head -1`
     nameform3=`strings -a src/env/initfcmn.o | grep mpir_init_fop   | head -1`
     nameform4=`strings -a src/env/initfcmn.o | grep mpir_init_fop__ | head -1`
    fi
    /bin/rm -f src/env/initfcmn.o
    if test -n "$nameform4" ; then
	echo "Fortran externals are lower case and have 1 or 2 trailing underscores"
	WDEF=-DFORTRANDOUBLEUNDERSCORE
        CFLAGS="$CFLAGS $WDEF"
    elif test -n "$nameform1" ; then
        # We don't set this in CFLAGS; it is a default case
        echo "Fortran externals have a trailing underscore and are lowercase"
	WDEF=-DFORTRANUNDERSCORE
	CFLAGS="$CFLAGS $WDEF"
    elif test -n "$nameform2" ; then
	echo "Fortran externals are uppercase"     
	WDEF=-DFORTRANCAPS 
	CFLAGS="$CFLAGS $WDEF"
    elif test -n "$nameform3" ; then
	echo "Fortran externals are lower case"
	WDEF=-DFORTRANNOUNDERSCORE 
	CFLAGS="$CFLAGS $WDEF"
    else
	print_error "Unable to determine the form of Fortran external names"
	print_error "Make sure that the compiler $F77 can be run on this system"
#	print_error "If you have problems linking, try using the -nof77 option"
#        print_error "to configure and rebuild MPICH."
	print_error "Turning off Fortran (-nof77 being assumed)."
	NOF77=1
        HAS_FORTRAN=0
        CFLAGS="$CFLAGS -DMPID_NO_FORTRAN"
        MPI_FOBJECTS="" 
    fi
#   case $nameform in 
#       MPIR_INIT_FOP | _MPIR_INIT_FOP)
#	echo "Fortran externals are uppercase"     
#	WDEF=-DFORTRANCAPS 
#	CFLAGS="$CFLAGS $WDEF"
#	;;
#       mpir_init_fop_ | _mpir_init_fop_)   
#	 # We don't set this in CFLAGS; it is a default case
#        echo "Fortran externals have a trailing underscore and are lowercase"
#	WDEF=-DFORTRANUNDERSCORE ;;
#
#       mpir_init_fop | _mpir_init_fop)     
#	echo "Fortran externals are lower case"
#	WDEF=-DFORTRANNOUNDERSCORE 
#	CFLAGS="$CFLAGS $WDEF"
#	;;
#
#           # Fortran no underscore is the "default" case for the wrappers; 
#	   # having this defined allows us to have an explicit test, 
#	   # particularly since the most common UNIX case is FORTRANUNDERSCORE
#       mpir_init_fop__ | _mpir_init_fop__)  
#	echo "Fortran externals are lower case and have 1 or 2 trailing underscores"
#	WDEF=-DFORTRANDOUBLEUNDERSCORE
#        CFLAGS="$CFLAGS $WDEF"
#        ;;
#
#       *)
#	print_error "Unable to determine the form of Fortran external names"
#	print_error "If you have problems linking, try using the -nof77 option"
#        print_error "to configure and rebuild MPICH."
#	NOF77=1
#        HAS_FORTRAN=0
#        CFLAGS="$CFLAGS -DMPID_NO_FORTRAN"
#        MPI_FOBJECTS="" 
#	;;
#   esac
    fi
fi
#
# Check for xdr available and properly installed (our FreeBSD machines
# have incorrect xdr header files, for examples).  Currently, we just
# set a dummy function body and see if rpc/xdr.h is available and
# can be included.
#
# Just to complicate things, some systems have "xdr.h" that is complete
# and can be used by itself; more frequently, xdr.h does NOT include
# definitions that it requires!  rpc.h seems to be more reliable.
#
if test "$IS_HETERO" = 1 ; then
    AC_COMPILE_CHECK("XDR includes and functions",[#include <rpc/rpc.h>],[
    int a=1;
    ],HAS_XDR=1,HAS_XDR=0)
    if test "$HAS_XDR" = 1 ; then
	AC_DEFINE(HAS_XDR)
    else 
        print_error  "XDR not available on this system" 
    fi
fi
# Check for the functions that may be needed by the ADI to implement
# Processor_name.  Save these defines in a special place.
SAVEDEFS="$DEFS"
DEFS=""
AC_HAVE_FUNCS(getdomainname gethostname sysinfo uname)
GETNAME_DEFS="$DEFS"
DEFS="$SAVEDEFS"
AC_STDC_HEADERS
SAVEDEFS="$DEFS"
DEFS=""
dnl AC_HAVE_HEADERS(stdlib.h)
PAC_CHECK_HEADERS(stdlib.h)
PAC_MALLOC_RETURNS_VOID()
USER_DEFS="$USER_DEFS $DEFS"
DEFS="$SAVEDEFS $DEFS"
#
# System is used only in MPE; i860's do not support it.
AC_HAVE_FUNCS(system)
#
# Nice is used only in env/init.c
AC_HAVE_FUNCS(nice)
#
# Turn off F77
# One problem with this is that some part of the ar will fail.  Lets hope
# it isn't fatal.  We've tried to fix this by defining MPI_FOBJECTS
# as the object files created from Fortran.
if test $NOF77 = 1 ; then
  F77=true
  FLINKER=true
fi
#
#
# Check for erroneous C compilers
broken=0
do_test=1
TESTCC="$CC"
if test $cross_compiling = 1 ; then
   if test "$CC" = mpcc ; then 
	TESTCC=xlc
   elif test "$CC" = mpCC ; then
        TESTCC=xlC
   else
        do_test=0
   fi
fi
# 
# Should eventually use a file like $file.run to see if the program should
# be run or just compiled.
#
PAC_CHECK_COMPILER_OK(cc_works=1,cc_works=0)
if test $cc_works = 0 ; then
    print_error "Could not compile a simple file with $CC!"
    print_error "Check for license and path restrictions on $CC."
    exit 1
fi
if test $do_test = 1 ; then
    PAC_CORRECT_COMPILER()
fi
#
# See if ranlib really works.  We do this by creating a small object file
# and a trial library, and then ranlib the result.
echo "checking that ranlib works"
cat <<EOF >conftest.c
int a(){return 1;}
EOF
compileonly='${CC-cc} -c $CFLAGS conftest.c >/dev/null 2>&1'
if eval $compileonly ; then 
    broken=0;
else
    broken=1;
fi
if test $broken = 1 ; then
    print_error "Error in creating test object for ranlib!"
else
    arcmd='$AR foo.a conftest.o >/dev/null 2>&1'
    eval $arcmd
    ranlibtest='$RANLIB foo.a >/dev/null 2>&1'
    if eval $ranlibtest ; then
        broken=0;
    else
        broken=1;
    fi
    /bin/rm -f foo.a
    if test $broken = 1 ; then
        print_error "RANLIB ($RANLIB) failed!"
        print_error "Assuming that ranlib is a stub returning non-zero"
        print_error "condition code"
        RANLIB=':'
    fi
fi
rm -f conftest.o conftest.c
#
#
# Check for long pointers.  All such options are placed into DEFS (see
# autoconf manual, AC _ DEFINE)
#
PAC_POINTER_64_BITS()
PAC_INT_LT_POINTER()
if test -n "$F77IDX" ; then
    AC_DEFINE(POINTER_64_BITS)
fi

# 
# Do not test 
if test "$NOSHORTLONGS" = 0 ; then
    # If not cross-compiling, we could dynamically check
    AC_LONG_DOUBLE()
    PAC_LONG_LONG_INT()
    PAC_CHECK_SIZEOF(double,doublesize)
    PAC_CHECK_SIZEOF(long double,longdoublesize)
    if test $doublesize -eq $longdoublesize ; then
	# Suppress long double if == double?
	# NOSHORTLONGS=1
	print_error "If you get errors about long doubles not supported"
	print_error "on $ARCH, use the -no_short_longs argument to configure."
    fi
fi
#
# Look for wish (the tcl/tk windowing shell; this is used by the new
# Upshot
#
if test -z "$wishloc" ; then
    PAC_FIND_WISH
fi
#
# Test that wish exists
if test -n "$wishloc" ; then
   if test ! -x $wishloc ; then
       wishloc=
   fi
fi
if test -z "$wishloc" ; then
    print_error "Could not find executable wish (needed for Upshot)"
fi
if test -z "$TCL_DIR" ; then
    PAC_FIND_TCL
fi
#
# Test the tcl was found
if test -z "$TCL_DIR" ; then
    print_error "Could not find libraries for TCL and TK (needed for Upshot)"
fi
#
# Set the location of the bitmaps
#
USER_CFLAGS="$CFLAGS $USER_DEFS"
CFLAGS="$CFLAGS $DEFS"
LIB_PATH="-L$MPIR_HOME/lib/$ARCH/$COMM $LIB_PATH"
#
# hpux's Fortran compiler f77 (but not the POSIX version fort77) does
# not accept -L <dir> for library search path.
FLIB_PATH_LEADER="-L"
if test -n "$arch_hpux" -a "$F77" = "f77" ; then
   FLIB_PATH=`echo $LIB_PATH | sed -e 's/-L/-Wl,-L,/g'`
   FLIB_PATH_LEADER="-Wl,-L,"
else
   FLIB_PATH="$LIB_PATH"
fi
#
# if the device uses the machines file and there is no machines.$ARCH, 
# create one using hostname (or uname)
#
if test $DEVICE = ch_tcp -o $DEVICE = ch_p4 ; then
    if test \! -s util/machines/machines.$ARCH ; then
        HOST=""
        if test "$ARCH" = "ipsc860" ;  then
	    HOST=`hostname`
        else
	    HOSTNAMEPGM="`which hostname | head -1`"
            if test -x "$HOSTNAMEPGM" ; then
                 HOST="`hostname`"
	    fi
        fi
        # Note that uname -n may not produce a usable hostname.  
	# Any suggestions?
        if test "$HOST" = "" ; then
	    HOST="`uname -n`"
        fi
   	cat > util/machines/machines.$ARCH <<.
$HOST
$HOST
$HOST
$HOST
$HOST
.
	echo "Created util/machines/machines.$ARCH with five copies of $HOST"
	echo "You may want to edit this file to add and delete hosts"
	echo "(These hosts are used by mpirun.)"
    fi
fi
#
# Make sure that configure is group writable
#
chmod g+w configure > /dev/null 2>&1
#
# Substitute variables
# Variables used in scripts only
AC_SUBST(wishloc)dnl
AC_SUBST(TK_DIR)dnl
AC_SUBST(TCL_DIR)dnl
AC_SUBST(BITMAP_DIR)dnl
# Variables defined ONLY for the doc/port file:
AC_SUBST(COMPRESSEDPKT)dnl
AC_SUBST(CONFIGURE_ARGS)dnl
AC_SUBST(CONFIGURE_ARGS_CLEAN)dnl
AC_SUBST(NODEVDEBUG)dnl
AC_SUBST(PKTSIZE)dnl
AC_SUBST(PREALLOC)dnl
AC_SUBST(PREPOST)dnl
AC_SUBST(USERNDV)dnl
AC_SUBST(VARPKT)dnl
AC_SUBST(LIMITEDBUFFERS)dnl
AC_SUBST(ADI_COLLECTIVE)dnl
AC_SUBST(cross_compiling)dnl
# Variables used by Makefile.in's:
AC_SUBST(ASM)dnl
AC_SUBST(ASMFILES_O)dnl
AC_SUBST(AR)dnl
AC_SUBST(ARCH)dnl
AC_SUBST(BOPT)dnl
AC_SUBST(CC)dnl
AC_SUBST(CFLAGS)dnl
AC_SUBST(CLINKER)dnl
AC_SUBST(COMM)dnl
AC_SUBST(CPP_COMPILER)dnl
AC_SUBST(CPP_DIR)dnl
AC_SUBST(CPRP)dnl
AC_SUBST(DEFAULT_MACHINE)dnl
AC_SUBST(DEVCFLAGS)dnl
AC_SUBST(DEV_DEFS)dnl
AC_SUBST(DEVICE)dnl
AC_SUBST(DEVICE_MAKE_INCLUDE)dnl
AC_SUBST(F77)dnl
AC_SUBST(FAST_COPY)dnl
AC_SUBST(FFLAGS)dnl
AC_SUBST(FLIB_PATH)dnl
AC_SUBST(FLIB_PATH_LEADER)dnl
AC_SUBST(FLINKER)dnl
AC_SUBST(GETNAME_DEFS)dnl
AC_SUBST(HAS_FORTRAN)dnl
AC_SUBST(INCLUDE_PATH)dnl
AC_SUBST(LIB_LIST)dnl
AC_SUBST(LIB_PATH)dnl
AC_SUBST(MAKE)dnl
AC_SUBST(MPEGRAPHICS_FOBJS)dnl
AC_SUBST(MPEGRAPHICS_FSOURCE)dnl
AC_SUBST(MPEGRAPHICS_OBJS)dnl
AC_SUBST(MPEGRAPHICS_SOURCE)dnl
AC_SUBST(MPE_DIR)dnl
AC_SUBST(MPE_GRAPHICS)dnl
AC_SUBST(MPE_LIBS)dnl
AC_SUBST(MPE_MPI_EXT_C)dnl
AC_SUBST(MPE_MPI_EXT_O)dnl
AC_SUBST(MPIR_HOME)dnl
AC_SUBST(MPI_FOBJECTS)dnl
AC_SUBST(MEMDEBUG)dnl
AC_SUBST(OPTFLAGS)dnl
AC_SUBST(P4_ARCH)dnl
AC_SUBST(P4_DIR)dnl
AC_SUBST(RHS_COMMAND)dnl
# P4_MDEPCFLAGS now used only in doc/port.in
AC_SUBST(P4_MDEPCFLAGS)dnl
AC_SUBST(PREFIX)dnl
AC_SUBST(RANLIB)dnl
AC_SUBST(TOOLS_DIR)dnl
AC_SUBST(USER_CFLAGS)dnl
AC_SUBST(USER_INCLUDE_PATH)dnl
AC_SUBST(X_INC)dnl
AC_SUBST(X_LIB)dnl
#
# src/env/farg.f
# 
AC_SUBST(F77IARGC)dnl
AC_SUBST(F77GETARG)dnl
AC_SUBST(F90UNIX)dnl
# End configuration file
AC_OUTPUT(Makefile examples/Makefile examples/test/Makefile examples/test/pt2pt/Makefile examples/test/pt2pt/runtests examples/test/coll/Makefile examples/test/coll/runtests examples/test/topol/Makefile examples/test/topol/runtests examples/test/context/Makefile examples/test/context/runtests examples/test/env/Makefile examples/test/lederman/Makefile examples/contrib/usingmpi/Makefile examples/contrib/life/Makefile examples/contrib/nuclei/Makefile examples/contrib/C++/Makefile examples/contrib/mandel-pvm/Makefile examples/perftest/Makefile src/pt2pt/Makefile src/coll/Makefile src/context/Makefile src/dmpi/Makefile src/env/Makefile src/topol/Makefile src/profile/Makefile src/util/Makefile src/c++/Makefile mpe/Makefile mpe/Makefile_nompi examples/contrib/Makefile examples/basic/Makefile profiling/wrappergen/Makefile profiling/examples/Makefile profiling/nupshot/Makefile profiling/lib/Makefile mpe/contrib/mandel/Makefile mpe/contrib/mastermind/Makefile mpe/contrib/life/Makefile mpe/test/Makefile src/env/farg.f)
#
# Configure JUST the correct device file
CONFIG_FILES=mpid/$DEVICE/Makefile
if test -n "$device_ch_shmem" ; then
    CONFIG_FILES="$CONFIG_FILES mpid/ch_shmem/p2ptest/Makefile"
fi
if test -n "$device_ch_tcp" ; then
    (cd mpid/ch_tcp/p3; configure )
fi
export CONFIG_FILES
./config.status
CONFIG_FILES=
#
# Configure insists on adding a line to the TOP of the file, making it 
# unsuited to modifying shell scripts.  Here we strip the first line from
# runtests
for dir in pt2pt coll context topol ; do 
 (cd examples/test/$dir ; /bin/rm -f .run1 ; sed -e '1d' runtests > .run1 ; \
 /bin/rm -f runtests ; /bin/mv .run1 runtests ; chmod a+x runtests )
done
#
# Ditto for the src/env/farg.f file
(cd src/env ; /bin/rm -f .run1 ; sed -e '1d' farg.f > .run1 ; \
 /bin/rm -f farg.f ; /bin/mv .run1 farg.f )
#
# Set the final choices of flags
if test "$MEMDEBUG" = "1" ; then
    /bin/rm -f include/mpisys.h
    (cd include ; echo "#define MPIR_MEMDEBUG" | cat - mpisys.h.in > mpisys.h)
else 
    /bin/rm -f include/mpisys.h
    cp include/mpisys.h.in include/mpisys.h
fi

#
# If the test suite is part of the directory, generate its makefiles
if test -d tsuite ; then
    CONFIG_FILES="tsuite/Makefile tsuite/coll/Makefile tsuite/pt2pt/Makefile"
    export CONFIG_FILES
    ./config.status
fi
#
# If the bugs directory is available, generate its makefiles
if test -d bugs ; then
    CONFIG_FILES="bugs/Makefile bugs/irecv/Makefile bugs/fort/Makefile bugs/sockperf/Makefile bugs/srleak/Makefile bugs/ssend/Makefile bugs/testsendrecv/Makefile"
    export CONFIG_FILES
    ./config.status
fi
#
# If the xmpi directory is available, generate its files
if test -d xmpi ; then 
    CONFIG_FILES="xmpi/buildinfo.tcl"
    export CONFIG_FILES
    ./config.status
fi
#
# If the doc/port.in file is available, generate it
if test -f doc/port.in ; then
    CONFIG_FILES="doc/port doc/portbuild doc/portperf doc/porttest"
    export CONFIG_FILES
    ./config.status
    (cd doc ; /bin/rm -f .run1 ; sed -e '1d' port > .run1 ; \
    /bin/rm -f port ; /bin/mv .run1 port ; chmod a+x port ; \
    /bin/rm -f .run1 ; sed -e '1d' portbuild > .run1 ; \
    /bin/rm -f portbuild ; /bin/mv .run1 portbuild ; chmod a+x portbuild ; \
    /bin/rm -f .run1 ; sed -e '1d' portperf > .run1 ; \
    /bin/rm -f portperf ; /bin/mv .run1 portperf ; chmod a+x portperf ; \
    /bin/rm -f .run1 ; sed -e '1d' porttest > .run1 ; \
    /bin/rm -f porttest ; /bin/mv .run1 porttest ; chmod a+x porttest ; \
)
fi
#
# If the experimental devices are available, generate their makefiles
if test -d mpid/ch_pvm3_3 ; then
    CONFIG_FILES="mpid/ch_pvm3_3/Makefile"
    export CONFIG_FILES
    ./config.status
fi
#
# Try to update the upshot script
#if test -f profiling/upshot/bin/upshot.in
#    CONFIG_FILES="profiling/upshot/bin/upshot"
#    export CONFIG_FILES
#    ./config.status
#    (cd profiling/upshot/bin ; /bin/rm -f .run1 ; \
#	sed -e '1d' upshot > .run1 ; \
#    /bin/rm -f upshot ; /bin/mv .run1 upshot ; chmod a+x upshot )
#fi
exit 0
